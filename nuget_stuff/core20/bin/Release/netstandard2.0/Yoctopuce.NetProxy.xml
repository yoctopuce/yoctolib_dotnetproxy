<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yoctopuce.NetProxy</name>
    </assembly>
    <members>
        <member name="M:YoctoLib.YAPI.DisableExceptions">
            <summary>
              Disables the use of exceptions to report runtime errors.
            <para>
              When exceptions are disabled, every function returns a specific
              error value which depends on its type and which is documented in
              this reference manual.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAPI.EnableExceptions">
            <summary>
              Re-enables the use of exceptions for runtime error handling.
            <para>
              Be aware than when exceptions are enabled, every function that fails
              triggers an exception. If the exception is not caught by the user code,
              it  either fires the debugger or aborts (i.e. crash) the program.
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAPI.RegisterLogFunction(YoctoLib.YAPI.yLogFunc)">
            <summary>
              Registers a log callback function.
            <para>
              This callback will be called each time
              the API have something to say. Quite useful to debug the API.
            </para>
            </summary>
            <param name="logfun">
              a procedure taking a string parameter, or <c>null</c>
              to unregister a previously registered  callback.
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.RegisterHubDiscoveryCallback(YoctoLib.YAPI.YHubDiscoveryCallback)">
            <summary>
              Register a callback function, to be called each time an Network Hub send
              an SSDP message.
            <para>
              The callback has two string parameter, the first one
              contain the serial number of the hub and the second contain the URL of the
              network hub (this URL can be passed to RegisterHub). This callback will be invoked
              while yUpdateDeviceList is running. You will have to call this function on a regular basis.
            </para>
            <para>
            </para>
            </summary>
            <param name="hubDiscoveryCallback">
              a procedure taking two string parameter, the serial
              number and the hub URL. Use <c>null</c> to unregister a previously registered  callback.
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.RegisterDeviceArrivalCallback(YoctoLib.YAPI.yDeviceUpdateFunc)">
            <summary>
              Register a callback function, to be called each time
              a device is plugged.
            <para>
              This callback will be invoked while <c>yUpdateDeviceList</c>
              is running. You will have to call this function on a regular basis.
            </para>
            </summary>
            <param name="arrivalCallback">
              a procedure taking a <c>YModule</c> parameter, or <c>null</c>
              to unregister a previously registered  callback.
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.RegisterDeviceRemovalCallback(YoctoLib.YAPI.yDeviceUpdateFunc)">
            <summary>
              Register a callback function, to be called each time
              a device is unplugged.
            <para>
              This callback will be invoked while <c>yUpdateDeviceList</c>
              is running. You will have to call this function on a regular basis.
            </para>
            </summary>
            <param name="removalCallback">
              a procedure taking a <c>YModule</c> parameter, or <c>null</c>
              to unregister a previously registered  callback.
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.GetAPIVersion">
            <summary>
              Returns the version identifier for the Yoctopuce library in use.
            <para>
              The version is a string in the form <c>"Major.Minor.Build"</c>,
              for instance <c>"1.01.5535"</c>. For languages using an external
              DLL (for instance C#, VisualBasic or Delphi), the character string
              includes as well the DLL version, for instance
              <c>"1.01.5535 (1.01.5439)"</c>.
            </para>
            <para>
              If you want to verify in your code that the library version is
              compatible with the version that you have used during development,
              verify that the major number is strictly equal and that the minor
              number is greater or equal. The build number is not relevant
              with respect to the library compatibility.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a character string describing the library version.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPI.InitAPI(System.Int32,System.String@)">
            <summary>
              Initializes the Yoctopuce programming library explicitly.
            <para>
              It is not strictly needed to call <c>yInitAPI()</c>, as the library is
              automatically  initialized when calling <c>yRegisterHub()</c> for the
              first time.
            </para>
            <para>
              When <c>YAPI.DETECT_NONE</c> is used as detection <c>mode</c>,
              you must explicitly use <c>yRegisterHub()</c> to point the API to the
              VirtualHub on which your devices are connected before trying to access them.
            </para>
            </summary>
            <param name="mode">
              an integer corresponding to the type of automatic
              device detection to use. Possible values are
              <c>YAPI.DETECT_NONE</c>, <c>YAPI.DETECT_USB</c>, <c>YAPI.DETECT_NET</c>,
              and <c>YAPI.DETECT_ALL</c>.
            </param>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.FreeAPI">
            <summary>
              Waits for all pending communications with Yoctopuce devices to be
              completed then frees dynamically allocated resources used by
              the Yoctopuce library.
            <para>
            </para>
            <para>
              From an operating system standpoint, it is generally not required to call
              this function since the OS will automatically free allocated resources
              once your program is completed. However there are two situations when
              you may really want to use that function:
            </para>
            <para>
              - Free all dynamically allocated memory blocks in order to
              track a memory leak.
            </para>
            <para>
              - Send commands to devices right before the end
              of the program. Since commands are sent in an asynchronous way
              the program could exit before all commands are effectively sent.
            </para>
            <para>
              You should not call any other library function after calling
              <c>yFreeAPI()</c>, or your program will crash.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAPI.RegisterHub(System.String,System.String@)">
            <summary>
              Setup the Yoctopuce library to use modules connected on a given machine.
            <para>
              The
              parameter will determine how the API will work. Use the following values:
            </para>
            <para>
              <b>usb</b>: When the <c>usb</c> keyword is used, the API will work with
              devices connected directly to the USB bus. Some programming languages such a JavaScript,
              PHP, and Java don't provide direct access to USB hardware, so <c>usb</c> will
              not work with these. In this case, use a VirtualHub or a networked YoctoHub (see below).
            </para>
            <para>
              <b><i>x.x.x.x</i></b> or <b><i>hostname</i></b>: The API will use the devices connected to the
              host with the given IP address or hostname. That host can be a regular computer
              running a VirtualHub, or a networked YoctoHub such as YoctoHub-Ethernet or
              YoctoHub-Wireless. If you want to use the VirtualHub running on you local
              computer, use the IP address 127.0.0.1.
            </para>
            <para>
              <b>callback</b>: that keyword make the API run in "<i>HTTP Callback</i>" mode.
              This a special mode allowing to take control of Yoctopuce devices
              through a NAT filter when using a VirtualHub or a networked YoctoHub. You only
              need to configure your hub to call your server script on a regular basis.
              This mode is currently available for PHP and Node.JS only.
            </para>
            <para>
              Be aware that only one application can use direct USB access at a
              given time on a machine. Multiple access would cause conflicts
              while trying to access the USB modules. In particular, this means
              that you must stop the VirtualHub software before starting
              an application that uses direct USB access. The workaround
              for this limitation is to setup the library to use the VirtualHub
              rather than direct USB access.
            </para>
            <para>
              If access control has been activated on the hub, virtual or not, you want to
              reach, the URL parameter should look like:
            </para>
            <para>
              <c>http://username:password@address:port</c>
            </para>
            <para>
              You can call <i>RegisterHub</i> several times to connect to several machines.
            </para>
            <para>
            </para>
            </summary>
            <param name="url">
              a string containing either <c>"usb"</c>,<c>"callback"</c> or the
              root URL of the hub to monitor
            </param>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.PreregisterHub(System.String,System.String@)">
            <summary>
              Fault-tolerant alternative to <c>yRegisterHub()</c>.
            <para>
              This function has the same
              purpose and same arguments as <c>yRegisterHub()</c>, but does not trigger
              an error when the selected hub is not available at the time of the function call.
              This makes it possible to register a network hub independently of the current
              connectivity, and to try to contact it only when a device is actively needed.
            </para>
            <para>
            </para>
            </summary>
            <param name="url">
              a string containing either <c>"usb"</c>,<c>"callback"</c> or the
              root URL of the hub to monitor
            </param>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.TestHub(System.String,System.Int32,System.String@)">
            <summary>
              Test if the hub is reachable.
            <para>
              This method do not register the hub, it only test if the
              hub is usable. The url parameter follow the same convention as the <c>yRegisterHub</c>
              method. This method is useful to verify the authentication parameters for a hub. It
              is possible to force this method to return after mstimeout milliseconds.
            </para>
            <para>
            </para>
            </summary>
            <param name="url">
              a string containing either <c>"usb"</c>,<c>"callback"</c> or the
              root URL of the hub to monitor
            </param>
            <param name="mstimeout">
              the number of millisecond available to test the connection.
            </param>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.UnregisterHub(System.String)">
            <summary>
              Setup the Yoctopuce library to no more use modules connected on a previously
              registered machine with RegisterHub.
            <para>
            </para>
            </summary>
            <param name="url">
              a string containing either <c>"usb"</c> or the
              root URL of the hub to monitor
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.UpdateDeviceList(System.String@)">
            <summary>
              Triggers a (re)detection of connected Yoctopuce modules.
            <para>
              The library searches the machines or USB ports previously registered using
              <c>yRegisterHub()</c>, and invokes any user-defined callback function
              in case a change in the list of connected devices is detected.
            </para>
            <para>
              This function can be called as frequently as desired to refresh the device list
              and to make the application aware of hot-plug events. However, since device
              detection is quite a heavy process, UpdateDeviceList shouldn't be called more
              than once every two seconds.
            </para>
            </summary>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.HandleEvents(System.String@)">
            <summary>
              Maintains the device-to-library communication channel.
            <para>
              If your program includes significant loops, you may want to include
              a call to this function to make sure that the library takes care of
              the information pushed by the modules on the communication channels.
              This is not strictly necessary, but it may improve the reactivity
              of the library for the following commands.
            </para>
            <para>
              This function may signal an error in case there is a communication problem
              while contacting a module.
            </para>
            </summary>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.Sleep(System.Int32,System.String@)">
            <summary>
              Pauses the execution flow for a specified duration.
            <para>
              This function implements a passive waiting loop, meaning that it does not
              consume CPU cycles significantly. The processor is left available for
              other threads and processes. During the pause, the library nevertheless
              reads from time to time information from the Yoctopuce modules by
              calling <c>yHandleEvents()</c>, in order to stay up-to-date.
            </para>
            <para>
              This function may signal an error in case there is a communication problem
              while contacting a module.
            </para>
            </summary>
            <param name="ms_duration">
              an integer corresponding to the duration of the pause,
              in milliseconds.
            </param>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.TriggerHubDiscovery(System.String@)">
            <summary>
              Force a hub discovery, if a callback as been registered with <c>yRegisterHubDiscoveryCallback</c> it
              will be called for each net work hub that will respond to the discovery.
            <para>
            </para>
            </summary>
            <param name="errmsg">
              a string passed by reference to receive any error message.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPI.GetTickCount">
            <summary>
              Returns the current value of a monotone millisecond-based time counter.
            <para>
              This counter can be used to compute delays in relation with
              Yoctopuce devices, which also uses the millisecond as timebase.
            </para>
            </summary>
            <returns>
              a long integer corresponding to the millisecond counter.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPI.CheckLogicalName(System.String)">
            <summary>
              Checks if a given string is valid as logical name for a module or a function.
            <para>
              A valid logical name has a maximum of 19 characters, all among
              <c>A..Z</c>, <c>a..z</c>, <c>0..9</c>, <c>_</c>, and <c>-</c>.
              If you try to configure a logical name with an incorrect string,
              the invalid characters are ignored.
            </para>
            </summary>
            <param name="name">
              a string containing the name to check.
            </param>
            <returns>
              <c>true</c> if the name is valid, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPI.SetDeviceListValidity(System.Int32)">
            <summary>
              Modifies the delay between each forced enumeration of the used YoctoHubs.
            <para>
              By default, the library performs a full enumeration every 10 seconds.
              To reduce network traffic, you can increase this delay.
              It's particularly useful when a YoctoHub is connected to the GSM network
              where traffic is billed. This parameter doesn't impact modules connected by USB,
              nor the working of module arrival/removal callbacks.
              Note: you must call this function after <c>yInitAPI</c>.
            </para>
            <para>
            </para>
            </summary>
            <param name="deviceListValidity">
              nubmer of seconds between each enumeration.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.GetDeviceListValidity">
            <summary>
              Returns the delay between each forced enumeration of the used YoctoHubs.
            <para>
              Note: you must call this function after <c>yInitAPI</c>.
            </para>
            </summary>
            <returns>
              the number of seconds between each enumeration.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPI.AddUdevRule(System.Boolean)">
            <summary>
              Adds a UDEV rule which authorizes all users to access Yoctopuce modules
              connected to the USB ports.
            <para>
              This function works only under Linux. The process that
              calls this method must have root privileges because this method changes the Linux configuration.
            </para>
            </summary>
            <param name="force">
              if true, overwrites any existing rule.
            </param>
            <returns>
              an empty string if the rule has been added.
            </returns>
            <para>
              On failure, returns a string that starts with "error:".
            </para>
        </member>
        <member name="M:YoctoLib.YAPI.SetNetworkTimeout(System.Int32)">
            <summary>
              Modifies the network connection delay for <c>yRegisterHub()</c> and <c>yUpdateDeviceList()</c>.
            <para>
              This delay impacts only the YoctoHubs and VirtualHub
              which are accessible through the network. By default, this delay is of 20000 milliseconds,
              but depending or you network you may want to change this delay,
              gor example if your network infrastructure is based on a GSM connection.
            </para>
            <para>
            </para>
            </summary>
            <param name="networkMsTimeout">
              the network connection delay in milliseconds.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.GetNetworkTimeout">
            <summary>
              Returns the network connection delay for <c>yRegisterHub()</c> and <c>yUpdateDeviceList()</c>.
            <para>
              This delay impacts only the YoctoHubs and VirtualHub
              which are accessible through the network. By default, this delay is of 20000 milliseconds,
              but depending or you network you may want to change this delay,
              for example if your network infrastructure is based on a GSM connection.
            </para>
            </summary>
            <returns>
              the network connection delay in milliseconds.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPI.SetCacheValidity(System.UInt64)">
            <summary>
              Change the validity period of the data loaded by the library.
            <para>
              By default, when accessing a module, all the attributes of the
              module functions are automatically kept in cache for the standard
              duration (5 ms). This method can be used to change this standard duration,
              for example in order to reduce network or USB traffic. This parameter
              does not affect value change callbacks
              Note: This function must be called after <c>yInitAPI</c>.
            </para>
            </summary>
            <param name="cacheValidityMs">
              an integer corresponding to the validity attributed to the
              loaded function parameters, in milliseconds.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAPI.GetCacheValidity">
            <summary>
              Returns the validity period of the data loaded by the library.
            <para>
              This method returns the cache validity of all attributes
              module functions.
              Note: This function must be called after <c>yInitAPI </c>.
            </para>
            </summary>
            <returns>
              an integer corresponding to the validity attributed to the
              loaded function parameters, in milliseconds
            </returns>
        </member>
        <member name="M:YoctoLib.YAPIContext.SetDeviceListValidity(System.Int32)">
            <summary>
              Modifies the delay between each forced enumeration of the used YoctoHubs.
            <para>
              By default, the library performs a full enumeration every 10 seconds.
              To reduce network traffic, you can increase this delay.
              It's particularly useful when a YoctoHub is connected to the GSM network
              where traffic is billed. This parameter doesn't impact modules connected by USB,
              nor the working of module arrival/removal callbacks.
              Note: you must call this function after <c>yInitAPI</c>.
            </para>
            <para>
            </para>
            </summary>
            <param name="deviceListValidity">
              nubmer of seconds between each enumeration.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAPIContext.GetDeviceListValidity">
            <summary>
              Returns the delay between each forced enumeration of the used YoctoHubs.
            <para>
              Note: you must call this function after <c>yInitAPI</c>.
            </para>
            </summary>
            <returns>
              the number of seconds between each enumeration.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPIContext.AddUdevRule(System.Boolean)">
            <summary>
              Adds a UDEV rule which authorizes all users to access Yoctopuce modules
              connected to the USB ports.
            <para>
              This function works only under Linux. The process that
              calls this method must have root privileges because this method changes the Linux configuration.
            </para>
            </summary>
            <param name="force">
              if true, overwrites any existing rule.
            </param>
            <returns>
              an empty string if the rule has been added.
            </returns>
            <para>
              On failure, returns a string that starts with "error:".
            </para>
        </member>
        <member name="M:YoctoLib.YAPIContext.SetNetworkTimeout(System.Int32)">
            <summary>
              Modifies the network connection delay for <c>yRegisterHub()</c> and <c>yUpdateDeviceList()</c>.
            <para>
              This delay impacts only the YoctoHubs and VirtualHub
              which are accessible through the network. By default, this delay is of 20000 milliseconds,
              but depending or you network you may want to change this delay,
              gor example if your network infrastructure is based on a GSM connection.
            </para>
            <para>
            </para>
            </summary>
            <param name="networkMsTimeout">
              the network connection delay in milliseconds.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAPIContext.GetNetworkTimeout">
            <summary>
              Returns the network connection delay for <c>yRegisterHub()</c> and <c>yUpdateDeviceList()</c>.
            <para>
              This delay impacts only the YoctoHubs and VirtualHub
              which are accessible through the network. By default, this delay is of 20000 milliseconds,
              but depending or you network you may want to change this delay,
              for example if your network infrastructure is based on a GSM connection.
            </para>
            </summary>
            <returns>
              the network connection delay in milliseconds.
            </returns>
        </member>
        <member name="M:YoctoLib.YAPIContext.SetCacheValidity(System.UInt64)">
            <summary>
              Change the validity period of the data loaded by the library.
            <para>
              By default, when accessing a module, all the attributes of the
              module functions are automatically kept in cache for the standard
              duration (5 ms). This method can be used to change this standard duration,
              for example in order to reduce network or USB traffic. This parameter
              does not affect value change callbacks
              Note: This function must be called after <c>yInitAPI</c>.
            </para>
            </summary>
            <param name="cacheValidityMs">
              an integer corresponding to the validity attributed to the
              loaded function parameters, in milliseconds.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAPIContext.GetCacheValidity">
            <summary>
              Returns the validity period of the data loaded by the library.
            <para>
              This method returns the cache validity of all attributes
              module functions.
              Note: This function must be called after <c>yInitAPI </c>.
            </para>
            </summary>
            <returns>
              an integer corresponding to the validity attributed to the
              loaded function parameters, in milliseconds
            </returns>
        </member>
        <member name="T:YoctoLib.YFirmwareUpdate">
            <summary>
              The <c>YFirmwareUpdate</c> class let you control the firmware update of a Yoctopuce
              module.
            <para>
              This class should not be instantiate directly, but instances should be retrieved
              using the <c>YModule</c> method <c>module.updateFirmware</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YFirmwareUpdate.GetAllBootLoaders">
            <summary>
              Returns a list of all the modules in "firmware update" mode.
            <para>
              Only devices
              connected over USB are listed. For devices connected to a YoctoHub, you
              must connect yourself to the YoctoHub web interface.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an array of strings containing the serial numbers of devices in "firmware update" mode.
            </returns>
        </member>
        <member name="M:YoctoLib.YFirmwareUpdate.CheckFirmware(System.String,System.String,System.Int32)">
            <summary>
              Test if the byn file is valid for this module.
            <para>
              It is possible to pass a directory instead of a file.
              In that case, this method returns the path of the most recent appropriate byn file. This method will
              ignore any firmware older than minrelease.
            </para>
            <para>
            </para>
            </summary>
            <param name="serial">
              the serial number of the module to update
            </param>
            <param name="path">
              the path of a byn file or a directory that contains byn files
            </param>
            <param name="minrelease">
              a positive integer
            </param>
            <returns>
              : the path of the byn file to use, or an empty string if no byn files matches the requirement
            </returns>
            <para>
              On failure, returns a string that starts with "error:".
            </para>
        </member>
        <member name="M:YoctoLib.YFirmwareUpdate.get_progress">
            <summary>
              Returns the progress of the firmware update, on a scale from 0 to 100.
            <para>
              When the object is
              instantiated, the progress is zero. The value is updated during the firmware update process until
              the value of 100 is reached. The 100 value means that the firmware update was completed
              successfully. If an error occurs during the firmware update, a negative value is returned, and the
              error message can be retrieved with <c>get_progressMessage</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion)
              or a negative error code in case of failure.
            </returns>
        </member>
        <member name="M:YoctoLib.YFirmwareUpdate.get_progressMessage">
            <summary>
              Returns the last progress message of the firmware update process.
            <para>
              If an error occurs during the
              firmware update process, the error message is returned
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string  with the latest progress message, or the error message.
            </returns>
        </member>
        <member name="M:YoctoLib.YFirmwareUpdate.startUpdate">
            <summary>
              Starts the firmware update process.
            <para>
              This method starts the firmware update process in background. This method
              returns immediately. You can monitor the progress of the firmware update with the <c>get_progress()</c>
              and <c>get_progressMessage()</c> methods.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion),
              or a negative error code in case of failure.
            </returns>
            <para>
              On failure returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoLib.YDataStream">
            <c>DataStream</c> objects represent bare recorded measure sequences,
            exactly as found within the data logger present on Yoctopuce
            sensors.
            <para>
              In most cases, it is not necessary to use <c>DataStream</c> objects
              directly, as the <c>DataSet</c> objects (returned by the
              <c>get_recordedData()</c> method from sensors and the
              <c>get_dataSets()</c> method from the data logger) provide
              a more convenient interface.
            </para>
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_runIndex">
            <summary>
              Returns the run index of the data stream.
            <para>
              A run can be made of
              multiple datastreams, for different time intervals.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the run index.
            </returns>
        </member>
        <member name="M:YoctoLib.YDataStream.get_startTime">
            <summary>
              Returns the relative start time of the data stream, measured in seconds.
            <para>
              For recent firmwares, the value is relative to the present time,
              which means the value is always negative.
              If the device uses a firmware older than version 13000, value is
              relative to the start of the time the device was powered on, and
              is always positive.
              If you need an absolute UTC timestamp, use <c>get_realStartTimeUTC()</c>.
            </para>
            <para>
              <b>DEPRECATED</b>: This method has been replaced by <c>get_realStartTimeUTC()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of seconds
              between the start of the run and the beginning of this data
              stream.
            </returns>
        </member>
        <member name="M:YoctoLib.YDataStream.get_startTimeUTC">
            <summary>
              Returns the start time of the data stream, relative to the Jan 1, 1970.
            <para>
              If the UTC time was not set in the datalogger at the time of the recording
              of this data stream, this method returns 0.
            </para>
            <para>
              <b>DEPRECATED</b>: This method has been replaced by <c>get_realStartTimeUTC()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of seconds
              between the Jan 1, 1970 and the beginning of this data
              stream (i.e. Unix time representation of the absolute time).
            </returns>
        </member>
        <member name="M:YoctoLib.YDataStream.get_realStartTimeUTC">
            <summary>
              Returns the start time of the data stream, relative to the Jan 1, 1970.
            <para>
              If the UTC time was not set in the datalogger at the time of the recording
              of this data stream, this method returns 0.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number  corresponding to the number of seconds
              between the Jan 1, 1970 and the beginning of this data
              stream (i.e. Unix time representation of the absolute time).
            </returns>
        </member>
        <member name="M:YoctoLib.YDataStream.get_dataSamplesIntervalMs">
            <summary>
              Returns the number of milliseconds between two consecutive
              rows of this data stream.
            <para>
              By default, the data logger records one row
              per second, but the recording frequency can be changed for
              each device function
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to a number of milliseconds.
            </returns>
        </member>
        <member name="M:YoctoLib.YDataStream.get_rowCount">
            <summary>
              Returns the number of data rows present in this stream.
            <para>
            </para>
            <para>
              If the device uses a firmware older than version 13000,
              this method fetches the whole data stream from the device
              if not yet done, which can cause a little delay.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of rows.
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_columnCount">
            <summary>
              Returns the number of data columns present in this stream.
            <para>
              The meaning of the values present in each column can be obtained
              using the method <c>get_columnNames()</c>.
            </para>
            <para>
              If the device uses a firmware older than version 13000,
              this method fetches the whole data stream from the device
              if not yet done, which can cause a little delay.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of columns.
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_columnNames">
            <summary>
              Returns the title (or meaning) of each data column present in this stream.
            <para>
              In most case, the title of the data column is the hardware identifier
              of the sensor that produced the data. For streams recorded at a lower
              recording rate, the dataLogger stores the min, average and max value
              during each measure interval into three columns with suffixes _min,
              _avg and _max respectively.
            </para>
            <para>
              If the device uses a firmware older than version 13000,
              this method fetches the whole data stream from the device
              if not yet done, which can cause a little delay.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a list containing as many strings as there are columns in the
              data stream.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_minValue">
            <summary>
              Returns the smallest measure observed within this stream.
            <para>
              If the device uses a firmware older than version 13000,
              this method will always return YDataStream.DATA_INVALID.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the smallest value,
              or YDataStream.DATA_INVALID if the stream is not yet complete (still recording).
            </returns>
            <para>
              On failure, throws an exception or returns YDataStream.DATA_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_averageValue">
            <summary>
              Returns the average of all measures observed within this stream.
            <para>
              If the device uses a firmware older than version 13000,
              this method will always return YDataStream.DATA_INVALID.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the average value,
              or YDataStream.DATA_INVALID if the stream is not yet complete (still recording).
            </returns>
            <para>
              On failure, throws an exception or returns YDataStream.DATA_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_maxValue">
            <summary>
              Returns the largest measure observed within this stream.
            <para>
              If the device uses a firmware older than version 13000,
              this method will always return YDataStream.DATA_INVALID.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the largest value,
              or YDataStream.DATA_INVALID if the stream is not yet complete (still recording).
            </returns>
            <para>
              On failure, throws an exception or returns YDataStream.DATA_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_dataRows">
            <summary>
              Returns the whole data set contained in the stream, as a bidimensional
              table of numbers.
            <para>
              The meaning of the values present in each column can be obtained
              using the method <c>get_columnNames()</c>.
            </para>
            <para>
              This method fetches the whole data stream from the device,
              if not yet done.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a list containing as many elements as there are rows in the
              data stream. Each row itself is a list of floating-point
              numbers.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YDataStream.get_data(System.Int32,System.Int32)">
            <summary>
              Returns a single measure from the data stream, specified by its
              row and column index.
            <para>
              The meaning of the values present in each column can be obtained
              using the method get_columnNames().
            </para>
            <para>
              This method fetches the whole data stream from the device,
              if not yet done.
            </para>
            <para>
            </para>
            </summary>
            <param name="row">
              row index
            </param>
            <param name="col">
              column index
            </param>
            <returns>
              a floating-point number
            </returns>
            <para>
              On failure, throws an exception or returns YDataStream.DATA_INVALID.
            </para>
        </member>
        <member name="T:YoctoLib.YMeasure">
            <c>YMeasure</c> objects are used within the API to represent
            a value measured at a specified time. These objects are
            used in particular in conjunction with the <c>YDataSet</c> class,
            but also for sensors periodic timed reports
            (see <c>sensor.registerTimedReportCallback</c>).
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YMeasure.get_startTimeUTC">
            <summary>
              Returns the start time of the measure, relative to the Jan 1, 1970 UTC
              (Unix timestamp).
            <para>
              When the recording rate is higher then 1 sample
              per second, the timestamp may have a fractional part.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the number of seconds
              between the Jan 1, 1970 UTC and the beginning of this measure.
            </returns>
        </member>
        <member name="M:YoctoLib.YMeasure.get_endTimeUTC">
            <summary>
              Returns the end time of the measure, relative to the Jan 1, 1970 UTC
              (Unix timestamp).
            <para>
              When the recording rate is higher than 1 sample
              per second, the timestamp may have a fractional part.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the number of seconds
              between the Jan 1, 1970 UTC and the end of this measure.
            </returns>
        </member>
        <member name="M:YoctoLib.YMeasure.get_minValue">
            <summary>
              Returns the smallest value observed during the time interval
              covered by this measure.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the smallest value observed.
            </returns>
        </member>
        <member name="M:YoctoLib.YMeasure.get_averageValue">
            <summary>
              Returns the average value observed during the time interval
              covered by this measure.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the average value observed.
            </returns>
        </member>
        <member name="M:YoctoLib.YMeasure.get_maxValue">
            <summary>
              Returns the largest value observed during the time interval
              covered by this measure.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the largest value observed.
            </returns>
        </member>
        <member name="T:YoctoLib.YDataSet">
            <c>YDataSet</c> objects make it possible to retrieve a set of recorded measures
            for a given sensor and a specified time interval. They can be used
            to load data points with a progress report. When the <c>YDataSet</c> object is
            instantiated by the <c>sensor.get_recordedData()</c>  function, no data is
            yet loaded from the module. It is only when the <c>loadMore()</c>
            method is called over and over than data will be effectively loaded
            from the dataLogger.
            <para>
              A preview of available measures is available using the function
              <c>get_preview()</c> as soon as <c>loadMore()</c> has been called
              once. Measures themselves are available using function <c>get_measures()</c>
              when loaded by subsequent calls to <c>loadMore()</c>.
            </para>
            <para>
              This class can only be used on devices that use a relatively recent firmware,
              as <c>YDataSet</c> objects are not supported by firmwares older than version 13000.
            </para>
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YDataSet.get_hardwareId">
            <summary>
              Returns the unique hardware identifier of the function who performed the measures,
              in the form <c>SERIAL.FUNCTIONID</c>.
            <para>
              The unique hardware identifier is composed of the
              device serial number and of the hardware identifier of the function
              (for example <c>THRMCPL1-123456.temperature1</c>)
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the function (ex: <c>THRMCPL1-123456.temperature1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YDataSet.HARDWAREID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataSet.get_functionId">
            <summary>
              Returns the hardware identifier of the function that performed the measure,
              without reference to the module.
            <para>
              For example <c>temperature1</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that identifies the function (ex: <c>temperature1</c>)
            </returns>
        </member>
        <member name="M:YoctoLib.YDataSet.get_unit">
            <summary>
              Returns the measuring unit for the measured value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that represents a physical unit.
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YDataSet.UNIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataSet.get_startTimeUTC">
            <summary>
              Returns the start time of the dataset, relative to the Jan 1, 1970.
            <para>
              When the <c>YDataSet</c> object is created, the start time is the value passed
              in parameter to the <c>get_dataSet()</c> function. After the
              very first call to <c>loadMore()</c>, the start time is updated
              to reflect the timestamp of the first measure actually found in the
              dataLogger within the specified range.
            </para>
            <para>
              <b>DEPRECATED</b>: This method has been replaced by <c>get_summary()</c>
              which contain more precise informations.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of seconds
              between the Jan 1, 1970 and the beginning of this data
              set (i.e. Unix time representation of the absolute time).
            </returns>
        </member>
        <member name="M:YoctoLib.YDataSet.get_endTimeUTC">
            <summary>
              Returns the end time of the dataset, relative to the Jan 1, 1970.
            <para>
              When the <c>YDataSet</c> object is created, the end time is the value passed
              in parameter to the <c>get_dataSet()</c> function. After the
              very first call to <c>loadMore()</c>, the end time is updated
              to reflect the timestamp of the last measure actually found in the
              dataLogger within the specified range.
            </para>
            <para>
              <b>DEPRECATED</b>: This method has been replaced by <c>get_summary()</c>
              which contain more precise informations.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of seconds
              between the Jan 1, 1970 and the end of this data
              set (i.e. Unix time representation of the absolute time).
            </returns>
        </member>
        <member name="M:YoctoLib.YDataSet.get_progress">
            <summary>
              Returns the progress of the downloads of the measures from the data logger,
              on a scale from 0 to 100.
            <para>
              When the object is instantiated by <c>get_dataSet</c>,
              the progress is zero. Each time <c>loadMore()</c> is invoked, the progress
              is updated, to reach the value 100 only once all measures have been loaded.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion).
            </returns>
        </member>
        <member name="M:YoctoLib.YDataSet.loadMore">
            <summary>
              Loads the the next block of measures from the dataLogger, and updates
              the progress indicator.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion),
              or a negative error code in case of failure.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDataSet.get_summary">
            <summary>
              Returns an <c>YMeasure</c> object which summarizes the whole
              <c>YDataSet</c>.
            <para>
              In includes the following information:
              - the start of a time interval
              - the end of a time interval
              - the minimal value observed during the time interval
              - the average value observed during the time interval
              - the maximal value observed during the time interval
            </para>
            <para>
              This summary is available as soon as <c>loadMore()</c> has
              been called for the first time.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an <c>YMeasure</c> object
            </returns>
        </member>
        <member name="M:YoctoLib.YDataSet.get_preview">
            <summary>
              Returns a condensed version of the measures that can
              retrieved in this <c>YDataSet</c>, as a list of <c>YMeasure</c>
              objects.
            <para>
              Each item includes:
              - the start of a time interval
              - the end of a time interval
              - the minimal value observed during the time interval
              - the average value observed during the time interval
              - the maximal value observed during the time interval
            </para>
            <para>
              This preview is available as soon as <c>loadMore()</c> has
              been called for the first time.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a table of records, where each record depicts the
              measured values during a time interval
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YDataSet.get_measuresAt(YoctoLib.YMeasure)">
            <summary>
              Returns the detailed set of measures for the time interval corresponding
              to a given condensed measures previously returned by <c>get_preview()</c>.
            <para>
              The result is provided as a list of <c>YMeasure</c> objects.
            </para>
            <para>
            </para>
            </summary>
            <param name="measure">
              condensed measure from the list previously returned by
              <c>get_preview()</c>.
            </param>
            <returns>
              a table of records, where each record depicts the
              measured values during a time interval
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YDataSet.get_measures">
            <summary>
              Returns all measured values currently available for this DataSet,
              as a list of <c>YMeasure</c> objects.
            <para>
              Each item includes:
              - the start of the measure time interval
              - the end of the measure time interval
              - the minimal value observed during the time interval
              - the average value observed during the time interval
              - the maximal value observed during the time interval
            </para>
            <para>
              Before calling this method, you should call <c>loadMore()</c>
              to load data from the device. You may have to call loadMore()
              several time until all rows are loaded, but you can start
              looking at available data rows before the load is complete.
            </para>
            <para>
              The oldest measures are always loaded first, and the most
              recent measures will be loaded last. As a result, timestamps
              are normally sorted in ascending order within the measure table,
              unless there was an unexpected adjustment of the datalogger UTC
              clock.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a table of records, where each record depicts the
              measured value for a given time interval
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="T:YoctoLib.YConsolidatedDataSet">
            <c>YConsolidatedDataSet</c> objects make it possible to retrieve a set of
            recorded measures from multiple sensors, for a specified time interval.
            They can be used to load data points progressively, and to receive
            data records by timestamp, one by one..
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YConsolidatedDataSet.Init(System.Collections.Generic.List{System.String},System.Double,System.Double)">
            <summary>
              Returns an object holding historical data for multiple
              sensors, for a specified time interval.
            <para>
              The measures will be retrieved from the data logger, which must have been turned
              on at the desired time. The resulting object makes it possible to load progressively
              a large set of measures from multiple sensors, consolidating data on the fly
              to align records based on measurement timestamps.
            </para>
            <para>
            </para>
            </summary>
            <param name="sensorNames">
              array of logical names or hardware identifiers of the sensors
              for which data must be loaded from their data logger.
            </param>
            <param name="startTime">
              the start of the desired measure time interval,
              as a Unix timestamp, i.e. the number of seconds since
              January 1, 1970 UTC. The special value 0 can be used
              to include any measure, without initial limit.
            </param>
            <param name="endTime">
              the end of the desired measure time interval,
              as a Unix timestamp, i.e. the number of seconds since
              January 1, 1970 UTC. The special value 0 can be used
              to include any measure, without ending limit.
            </param>
            <returns>
              an instance of <c>YConsolidatedDataSet</c>, providing access to
              consolidated historical data. Records can be loaded progressively
              using the <c>YConsolidatedDataSet.nextRecord()</c> method.
            </returns>
        </member>
        <member name="M:YoctoLib.YConsolidatedDataSet.nextRecord(System.Collections.Generic.List{System.Double})">
            <summary>
              Extracts the next data record from the data logger of all sensors linked to this
              object.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="datarec">
              array of floating point numbers, that will be filled by the
              function with the timestamp of the measure in first position,
              followed by the measured value in next positions.
            </param>
            <returns>
              an integer in the range 0 to 100 (percentage of completion),
              or a negative error code in case of failure.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoLib.YFunction">
            <summary>
              This is the parent class for all public objects representing device functions documented in
              the high-level programming API.
            <para>
              This abstract class does all the real job, but without
              knowledge of the specific function attributes.
            </para>
            <para>
              Instantiating a child class of YFunction does not cause any communication.
              The instance simply keeps track of its function identifier, and will dynamically bind
              to a matching device at the time it is really being used to read or set an attribute.
              In order to allow true hot-plug replacement of one device by another, the binding stay
              dynamic through the life of the object.
            </para>
            <para>
              The YFunction class implements a generic high-level cache for the attribute values of
              the specified function, pre-parsed from the REST API string.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YFunction.get_logicalName">
            <summary>
              Returns the logical name of the function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the logical name of the function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFunction.LOGICALNAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.set_logicalName(System.String)">
            <summary>
              Changes the logical name of the function.
            <para>
              You can use <c>yCheckLogicalName()</c>
              prior to this call to make sure that your parameter is valid.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the logical name of the function
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.get_advertisedValue">
            <summary>
              Returns a short string representing the current state of the function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a short string representing the current state of the function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFunction.ADVERTISEDVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.FindFunction(System.String)">
            <summary>
              Retrieves a function for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the function is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YFunction.isOnline()</c> to test if the function is
              indeed online at a given time. In case of ambiguity when looking for
              a function by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the function, for instance
              <c>MyDevice.</c>.
            </param>
            <returns>
              a <c>YFunction</c> object allowing you to drive the function.
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.registerValueCallback(YoctoLib.YFunction.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YFunction.muteValueCallbacks">
            <summary>
              Disables the propagation of every new advertised value to the parent hub.
            <para>
              You can use this function to save bandwidth and CPU on computers with limited
              resources, or to prevent unwanted invocations of the HTTP callback.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.unmuteValueCallbacks">
            <summary>
              Re-enables the propagation of every new advertised value to the parent hub.
            <para>
              This function reverts the effect of a previous call to <c>muteValueCallbacks()</c>.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.loadAttribute(System.String)">
            <summary>
              Returns the current value of a single function attribute, as a text string, as quickly as
              possible but without using the cached value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="attrName">
              the name of the requested attribute
            </param>
            <returns>
              a string with the value of the the attribute
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.isReadOnly">
            <summary>
              Test if the function is readOnly.
            <para>
              Return <c>true</c> if the function is write protected
              or that the function is not available.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>true</c> if the function is readOnly or not online.
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.get_serialNumber">
            <summary>
              Returns the serial number of the module, as set by the factory.
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the serial number of the module, as set by the factory.
            </returns>
            <para>
              On failure, throws an exception or returns YFunction.SERIALNUMBER_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.nextFunction">
            <summary>
              c
            <para>
              omment from .yc definition
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YFunction.FirstFunction">
            <summary>
              c
            <para>
              omment from .yc definition
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YFunction.describe">
            <summary>
              Returns a short text that describes unambiguously the instance of the function in the form <c>TYPE(NAME)=SERIAL&#46;FUNCTIONID</c>.
            <para>
              More precisely,
              <c>TYPE</c>       is the type of the function,
              <c>NAME</c>       it the name used for the first access to the function,
              <c>SERIAL</c>     is the serial number of the module if the module is connected or <c>"unresolved"</c>, and
              <c>FUNCTIONID</c> is  the hardware identifier of the function if the module is connected.
              For example, this method returns <c>Relay(MyCustomName.relay1)=RELAYLO1-123456.relay1</c> if the
              module is already connected or <c>Relay(BadCustomeName.relay1)=unresolved</c> if the module has
              not yet been connected. This method does not trigger any USB or TCP transaction and can therefore be used in
              a debugger.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that describes the function
              (ex: <c>Relay(MyCustomName.relay1)=RELAYLO1-123456.relay1</c>)
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.get_hardwareId">
            <summary>
              Returns the unique hardware identifier of the function in the form <c>SERIAL.FUNCTIONID</c>.
            <para>
              The unique hardware identifier is composed of the device serial
              number and of the hardware identifier of the function (for example <c>RELAYLO1-123456.relay1</c>).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the function (ex: <c>RELAYLO1-123456.relay1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YFunction.HARDWAREID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.get_functionId">
            <summary>
              Returns the hardware identifier of the function, without reference to the module.
            <para>
              For example
              <c>relay1</c>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that identifies the function (ex: <c>relay1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YFunction.FUNCTIONID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.get_friendlyName">
            <summary>
              Returns a global identifier of the function in the format <c>MODULE_NAME&#46;FUNCTION_NAME</c>.
            <para>
              The returned string uses the logical names of the module and of the function if they are defined,
              otherwise the serial number of the module and the hardware identifier of the function
              (for example: <c>MyCustomName.relay1</c>)
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the function using logical names
              (ex: <c>MyCustomName.relay1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YFunction.FRIENDLYNAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.get_errorType">
            <summary>
              Returns the numerical error code of the latest error with the function.
            <para>
              This method is mostly useful when using the Yoctopuce library with
              exceptions disabled.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a number corresponding to the code of the latest error that occurred while
              using the function object
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.get_errorMessage">
            <summary>
              Returns the error message of the latest error with the function.
            <para>
              This method is mostly useful when using the Yoctopuce library with
              exceptions disabled.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest error message that occured while
              using the function object
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.isOnline">
            <summary>
              Checks if the function is currently reachable, without raising any error.
            <para>
              If there is a cached value for the function in cache, that has not yet
              expired, the device is considered reachable.
              No exception is raised if there is an error while trying to contact the
              device hosting the function.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>true</c> if the function can be reached, and <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.load(System.UInt64)">
            <summary>
              Preloads the function cache with a specified validity duration.
            <para>
              By default, whenever accessing a device, all function attributes
              are kept in cache for the standard duration (5 ms). This method can be
              used to temporarily mark the cache as valid for a longer period, in order
              to reduce network traffic for instance.
            </para>
            <para>
            </para>
            </summary>
            <param name="msValidity">
              an integer corresponding to the validity attributed to the
              loaded function parameters, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.clearCache">
            <summary>
              Invalidates the cache.
            <para>
              Invalidates the cache of the function attributes. Forces the
              next call to get_xxx() or loadxxx() to use values that come from the device.
            </para>
            <para>
            @noreturn
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YFunction.get_module">
            <summary>
              Gets the <c>YModule</c> object for the device on which the function is located.
            <para>
              If the function cannot be located on any module, the returned instance of
              <c>YModule</c> is not shown as on-line.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an instance of <c>YModule</c>
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.get_functionDescriptor">
            <summary>
              Returns a unique identifier of type <c>YFUN_DESCR</c> corresponding to the function.
            <para>
              This identifier can be used to test if two instances of <c>YFunction</c> reference the same
              physical function on the same physical device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an identifier of type <c>YFUN_DESCR</c>.
            </returns>
            <para>
              If the function has never been contacted, the returned value is <c>Y$CLASSNAME$.FUNCTIONDESCRIPTOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFunction.get_userData">
            <summary>
              Returns the value of the userData attribute, as previously stored using method
              <c>set_userData</c>.
            <para>
              This attribute is never touched directly by the API, and is at disposal of the caller to
              store a context.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              the object stored previously by the caller.
            </returns>
        </member>
        <member name="M:YoctoLib.YFunction.set_userData(System.Object)">
            <summary>
              Stores a user context provided as argument in the userData attribute of the function.
            <para>
              This attribute is never touched by the API, and is at disposal of the caller to store a context.
            </para>
            <para>
            </para>
            </summary>
            <param name="data">
              any kind of object to be stored
            @noreturn
            </param>
        </member>
        <member name="T:YoctoLib.YModule">
            <summary>
              The <c>YModule</c> class can be used with all Yoctopuce USB devices.
            <para>
              It can be used to control the module global parameters, and
              to enumerate the functions provided by each module.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YModule.get_productName">
            <summary>
              Returns the commercial name of the module, as set by the factory.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the commercial name of the module, as set by the factory
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PRODUCTNAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_serialNumber">
            <summary>
              Returns the serial number of the module, as set by the factory.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the serial number of the module, as set by the factory
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.SERIALNUMBER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_productId">
            <summary>
              Returns the USB device identifier of the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the USB device identifier of the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PRODUCTID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_productRelease">
            <summary>
              Returns the release number of the module hardware, preprogrammed at the factory.
            <para>
              The original hardware release returns value 1, revision B returns value 2, etc.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the release number of the module hardware, preprogrammed at the factory
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PRODUCTRELEASE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_firmwareRelease">
            <summary>
              Returns the version of the firmware embedded in the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the version of the firmware embedded in the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.FIRMWARERELEASE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_persistentSettings">
            <summary>
              Returns the current state of persistent module settings.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YModule.PERSISTENTSETTINGS_LOADED</c>, <c>YModule.PERSISTENTSETTINGS_SAVED</c> and
              <c>YModule.PERSISTENTSETTINGS_MODIFIED</c> corresponding to the current state of persistent module settings
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PERSISTENTSETTINGS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_luminosity">
            <summary>
              Returns the luminosity of the  module informative LEDs (from 0 to 100).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the luminosity of the  module informative LEDs (from 0 to 100)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.LUMINOSITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.set_luminosity(System.Int32)">
            <summary>
              Changes the luminosity of the module informative leds.
            <para>
              The parameter is a
              value between 0 and 100.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the luminosity of the module informative leds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_beacon">
            <summary>
              Returns the state of the localization beacon.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YModule.BEACON_OFF</c> or <c>YModule.BEACON_ON</c>, according to the state of the localization beacon
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.BEACON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.set_beacon(System.Int32)">
            <summary>
              Turns on or off the module localization beacon.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YModule.BEACON_OFF</c> or <c>YModule.BEACON_ON</c>
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_upTime">
            <summary>
              Returns the number of milliseconds spent since the module was powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds spent since the module was powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.UPTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_usbCurrent">
            <summary>
              Returns the current consumed by the module on the USB bus, in milli-amps.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current consumed by the module on the USB bus, in milli-amps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.USBCURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_rebootCountdown">
            <summary>
              Returns the remaining number of seconds before the module restarts, or zero when no
              reboot has been scheduled.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the remaining number of seconds before the module restarts, or zero when no
              reboot has been scheduled
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.REBOOTCOUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_userVar">
            <summary>
              Returns the value previously stored in this attribute.
            <para>
              On startup and after a device reboot, the value is always reset to zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the value previously stored in this attribute
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.USERVAR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.set_userVar(System.Int32)">
            <summary>
              Stores a 32 bit value in the device RAM.
            <para>
              This attribute is at programmer disposal,
              should he need to store a state variable.
              On startup and after a device reboot, the value is always reset to zero.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.FindModule(System.String)">
            <summary>
              Allows you to find a module from its serial number or from its logical name.
            <para>
            </para>
            <para>
              This function does not require that the module is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YModule.isOnline()</c> to test if the module is
              indeed online at a given time. In case of ambiguity when looking for
              a module by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string containing either the serial number or
              the logical name of the desired module
            </param>
            <returns>
              a <c>YModule</c> object allowing you to drive the module
              or get additional information on the module.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.registerValueCallback(YoctoLib.YModule.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YModule.saveToFlash">
            <summary>
              Saves current settings in the nonvolatile memory of the module.
            <para>
              Warning: the number of allowed save operations during a module life is
              limited (about 100000 cycles). Do not call this function within a loop.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.revertFromFlash">
            <summary>
              Reloads the settings stored in the nonvolatile memory, as
              when the module is powered on.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.reboot(System.Int32)">
            <summary>
              Schedules a simple module reboot after the given number of seconds.
            <para>
            </para>
            </summary>
            <param name="secBeforeReboot">
              number of seconds before rebooting
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.triggerFirmwareUpdate(System.Int32)">
            <summary>
              Schedules a module reboot into special firmware update mode.
            <para>
            </para>
            </summary>
            <param name="secBeforeReboot">
              number of seconds before rebooting
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.registerLogCallback(YoctoLib.YModule.LogCallback)">
            <summary>
              Registers a device log callback function.
            <para>
              This callback will be called each time
              that a module sends a new log message. Mostly useful to debug a Yoctopuce module.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the module object that emitted the log message, and the character string containing the log.
              On failure, throws an exception or returns a negative error code.
            </param>
        </member>
        <member name="M:YoctoLib.YModule.registerConfigChangeCallback(YoctoLib.YModule.ConfigChangeCallback)">
            <summary>
              Register a callback function, to be called when a persistent settings in
              a device configuration has been changed (e.g.
            <para>
              change of unit, etc).
            </para>
            </summary>
            <param name="callback">
              a procedure taking a YModule parameter, or <c>null</c>
              to unregister a previously registered  callback.
            </param>
        </member>
        <member name="M:YoctoLib.YModule.registerBeaconCallback(YoctoLib.YModule.BeaconCallback)">
            <summary>
              Register a callback function, to be called when the localization beacon of the module
              has been changed.
            <para>
              The callback function should take two arguments: the YModule object of
              which the beacon has changed, and an integer describing the new beacon state.
            </para>
            </summary>
            <param name="callback">
              The callback function to call, or <c>null</c> to unregister a
              previously registered callback.
            </param>
        </member>
        <member name="M:YoctoLib.YModule.triggerConfigChangeCallback">
            <summary>
              Triggers a configuration change callback, to check if they are supported or not.
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YModule.checkFirmware(System.String,System.Boolean)">
            <summary>
              Tests whether the byn file is valid for this module.
            <para>
              This method is useful to test if the module needs to be updated.
              It is possible to pass a directory as argument instead of a file. In this case, this method returns
              the path of the most recent
              appropriate <c>.byn</c> file. If the parameter <c>onlynew</c> is true, the function discards
              firmwares that are older or
              equal to the installed firmware.
            </para>
            <para>
            </para>
            </summary>
            <param name="path">
              the path of a byn file or a directory that contains byn files
            </param>
            <param name="onlynew">
              returns only files that are strictly newer
            </param>
            <para>
            </para>
            <returns>
              the path of the byn file to use or a empty string if no byn files matches the requirement
            </returns>
            <para>
              On failure, throws an exception or returns a string that start with "error:".
            </para>
        </member>
        <member name="M:YoctoLib.YModule.updateFirmwareEx(System.String,System.Boolean)">
            <summary>
              Prepares a firmware update of the module.
            <para>
              This method returns a <c>YFirmwareUpdate</c> object which
              handles the firmware update process.
            </para>
            <para>
            </para>
            </summary>
            <param name="path">
              the path of the <c>.byn</c> file to use.
            </param>
            <param name="force">
              true to force the firmware update even if some prerequisites appear not to be met
            </param>
            <returns>
              a <c>YFirmwareUpdate</c> object or NULL on error.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.updateFirmware(System.String)">
            <summary>
              Prepares a firmware update of the module.
            <para>
              This method returns a <c>YFirmwareUpdate</c> object which
              handles the firmware update process.
            </para>
            <para>
            </para>
            </summary>
            <param name="path">
              the path of the <c>.byn</c> file to use.
            </param>
            <returns>
              a <c>YFirmwareUpdate</c> object or NULL on error.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.get_allSettings">
            <summary>
              Returns all the settings and uploaded files of the module.
            <para>
              Useful to backup all the
              logical names, calibrations parameters, and uploaded files of a device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a binary buffer with all the settings.
            </returns>
            <para>
              On failure, throws an exception or returns an binary object of size 0.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.set_allSettingsAndFiles(System.Byte[])">
            <summary>
              Restores all the settings and uploaded files to the module.
            <para>
              This method is useful to restore all the logical names and calibrations parameters,
              uploaded files etc. of a device from a backup.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modifications must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="settings">
              a binary buffer with all the settings.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.hasFunction(System.String)">
            <summary>
              Tests if the device includes a specific function.
            <para>
              This method takes a function identifier
              and returns a boolean.
            </para>
            <para>
            </para>
            </summary>
            <param name="funcId">
              the requested function identifier
            </param>
            <returns>
              true if the device has the function identifier
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.get_functionIds(System.String)">
            <summary>
              Retrieve all hardware identifier that match the type passed in argument.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="funType">
              The type of function (Relay, LightSensor, Voltage,...)
            </param>
            <returns>
              an array of strings.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.set_allSettings(System.Byte[])">
            <summary>
              Restores all the settings of the device.
            <para>
              Useful to restore all the logical names and calibrations parameters
              of a module from a backup.Remember to call the <c>saveToFlash()</c> method of the module if the
              modifications must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="settings">
              a binary buffer with all the settings.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_hardwareId">
            <summary>
              Returns the unique hardware identifier of the module.
            <para>
              The unique hardware identifier is made of the device serial
              number followed by string ".module".
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the module
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.download(System.String)">
            <summary>
              Downloads the specified built-in file and returns a binary buffer with its content.
            <para>
            </para>
            </summary>
            <param name="pathname">
              name of the new file to load
            </param>
            <returns>
              a binary buffer with the file content
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YAPI.INVALID_STRING</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_icon2d">
            <summary>
              Returns the icon of the module.
            <para>
              The icon is a PNG image and does not
              exceeds 1536 bytes.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a binary buffer with module icon, in png format.
              On failure, throws an exception or returns  <c>YAPI.INVALID_STRING</c>.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.get_lastLogs">
            <summary>
              Returns a string with last logs of the module.
            <para>
              This method return only
              logs that are still in the module.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string with last logs of the module.
              On failure, throws an exception or returns  <c>YAPI.INVALID_STRING</c>.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.log(System.String)">
            <summary>
              Adds a text message to the device logs.
            <para>
              This function is useful in
              particular to trace the execution of HTTP callbacks. If a newline
              is desired after the message, it must be included in the string.
            </para>
            </summary>
            <param name="text">
              the string to append to the logs.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.get_subDevices">
            <summary>
              Returns a list of all the modules that are plugged into the current module.
            <para>
              This method only makes sense when called for a YoctoHub/VirtualHub.
              Otherwise, an empty array will be returned.
            </para>
            </summary>
            <returns>
              an array of strings containing the sub modules.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.get_parentHub">
            <summary>
              Returns the serial number of the YoctoHub on which this module is connected.
            <para>
              If the module is connected by USB, or if the module is the root YoctoHub, an
              empty string is returned.
            </para>
            </summary>
            <returns>
              a string with the serial number of the YoctoHub or an empty string
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.get_url">
            <summary>
              Returns the URL used to access the module.
            <para>
              If the module is connected by USB, the
              string 'usb' is returned.
            </para>
            </summary>
            <returns>
              a string with the URL of the module.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.nextModule">
            <summary>
              Continues the module enumeration started using <c>yFirstModule()</c>.
            <para>
              Caution: You can't make any assumption about the returned modules order.
              If you want to find a specific module, use <c>Module.findModule()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YModule</c> object, corresponding to
              the next module found, or a <c>null</c> pointer
              if there are no more modules to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YModule.get_friendlyName">
            <summary>
              Returns a global identifier of the function in the format <c>MODULE_NAME&#46;FUNCTION_NAME</c>.
            <para>
              The returned string uses the logical names of the module and of the function if they are defined,
              otherwise the serial number of the module and the hardware identifier of the function
              (for example: <c>MyCustomName.relay1</c>)
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the function using logical names
              (ex: <c>MyCustomName.relay1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YFunction.FRIENDLYNAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.functionCount">
            <summary>
              Returns the number of functions (beside the "module" interface) available on the module.
            <para>
            </para>
            </summary>
            <returns>
              the number of functions on the module
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.functionId(System.Int32)">
            <summary>
              Retrieves the hardware identifier of the <i>n</i>th function on the module.
            <para>
            </para>
            </summary>
            <param name="functionIndex">
              the index of the function for which the information is desired, starting at 0 for the first function.
            </param>
            <returns>
              a string corresponding to the unambiguous hardware identifier of the requested module function
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.functionType(System.Int32)">
            <summary>
              Retrieves the type of the <i>n</i>th function on the module.
            <para>
            </para>
            </summary>
            <param name="functionIndex">
              the index of the function for which the information is desired, starting at 0 for the first function.
            </param>
            <returns>
              a string corresponding to the type of the function
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.functionBaseType(System.Int32)">
            <summary>
              Retrieves the base type of the <i>n</i>th function on the module.
            <para>
              For instance, the base type of all measuring functions is "Sensor".
            </para>
            </summary>
            <param name="functionIndex">
              the index of the function for which the information is desired, starting at 0 for the first function.
            </param>
            <returns>
              a string corresponding to the base type of the function
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.functionName(System.Int32)">
            <summary>
              Retrieves the logical name of the <i>n</i>th function on the module.
            <para>
            </para>
            </summary>
            <param name="functionIndex">
              the index of the function for which the information is desired, starting at 0 for the first function.
            </param>
            <returns>
              a string corresponding to the logical name of the requested module function
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.functionValue(System.Int32)">
            <summary>
              Retrieves the advertised value of the <i>n</i>th function on the module.
            <para>
            </para>
            </summary>
            <param name="functionIndex">
              the index of the function for which the information is desired, starting at 0 for the first function.
            </param>
            <returns>
              a short string (up to 6 characters) corresponding to the advertised value of the requested module function
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YModule.FirstModule">
            <summary>
              Starts the enumeration of modules currently accessible.
            <para>
              Use the method <c>YModule.nextModule()</c> to iterate on the
              next modules.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YModule</c> object, corresponding to
              the first module currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YSensor">
            <summary>
              The <c>YSensor</c> class is the parent class for all Yoctopuce sensor types.
            <para>
              It can be
              used to read the current value and unit of any sensor, read the min/max
              value, configure autonomous recording frequency and access recorded data.
              It also provide a function to register a callback invoked each time the
              observed value changes, or at a predefined interval. Using this class rather
              than a specific subclass makes it possible to create generic applications
              that work with any Yoctopuce sensor, even those that do not yet exist.
              Note: The <c>YAnButton</c> class is the only analog input which does not inherit
              from <c>YSensor</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YSensor.get_unit">
            <summary>
              Returns the measuring unit for the measure.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the measuring unit for the measure
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.UNIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_currentValue">
            <summary>
              Returns the current value of the measure, in the specified unit, as a floating point number.
            <para>
              Note that a get_currentValue() call will *not* start a measure in the device, it
              will just return the last measure that occurred in the device. Indeed, internally, each Yoctopuce
              devices is continuously making measurements at a hardware specific frequency.
            </para>
            <para>
              If continuously calling  get_currentValue() leads you to performances issues, then
              you might consider to switch to callback programming model. Check the "advanced
              programming" chapter in in your device user manual for more information.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of the measure, in the specified unit,
              as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.CURRENTVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.set_lowestValue(System.Double)">
            <summary>
              Changes the recorded minimal value observed.
            <para>
              Can be used to reset the value returned
              by get_lowestValue().
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the recorded minimal value observed
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_lowestValue">
            <summary>
              Returns the minimal value observed for the measure since the device was started.
            <para>
              Can be reset to an arbitrary value thanks to set_lowestValue().
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the minimal value observed for the measure since the device was started
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.LOWESTVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.set_highestValue(System.Double)">
            <summary>
              Changes the recorded maximal value observed.
            <para>
              Can be used to reset the value returned
              by get_lowestValue().
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the recorded maximal value observed
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_highestValue">
            <summary>
              Returns the maximal value observed for the measure since the device was started.
            <para>
              Can be reset to an arbitrary value thanks to set_highestValue().
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the maximal value observed for the measure since the device was started
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.HIGHESTVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_currentRawValue">
            <summary>
              Returns the uncalibrated, unrounded raw value returned by the
              sensor, in the specified unit, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the uncalibrated, unrounded raw value returned by the
              sensor, in the specified unit, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.CURRENTRAWVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_logFrequency">
            <summary>
              Returns the datalogger recording frequency for this function, or "OFF"
              when measures are not stored in the data logger flash memory.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the datalogger recording frequency for this function, or "OFF"
              when measures are not stored in the data logger flash memory
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.LOGFREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.set_logFrequency(System.String)">
            <summary>
              Changes the datalogger recording frequency for this function.
            <para>
              The frequency can be specified as samples per second,
              as sample per minute (for instance "15/m") or in samples per
              hour (eg. "4/h"). To disable recording for this function, use
              the value "OFF". Note that setting the  datalogger recording frequency
              to a greater value than the sensor native sampling frequency is useless,
              and even counterproductive: those two frequencies are not related.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the datalogger recording frequency for this function
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_reportFrequency">
            <summary>
              Returns the timed value notification frequency, or "OFF" if timed
              value notifications are disabled for this function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the timed value notification frequency, or "OFF" if timed
              value notifications are disabled for this function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.REPORTFREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.set_reportFrequency(System.String)">
            <summary>
              Changes the timed value notification frequency for this function.
            <para>
              The frequency can be specified as samples per second,
              as sample per minute (for instance "15/m") or in samples per
              hour (e.g. "4/h"). To disable timed value notifications for this
              function, use the value "OFF". Note that setting the  timed value
              notification frequency to a greater value than the sensor native
              sampling frequency is unless, and even counterproductive: those two
              frequencies are not related.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the timed value notification frequency for this function
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_advMode">
            <summary>
              Returns the measuring mode used for the advertised value pushed to the parent hub.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YSensor.ADVMODE_IMMEDIATE</c>, <c>YSensor.ADVMODE_PERIOD_AVG</c>,
              <c>YSensor.ADVMODE_PERIOD_MIN</c> and <c>YSensor.ADVMODE_PERIOD_MAX</c> corresponding to the
              measuring mode used for the advertised value pushed to the parent hub
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.ADVMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.set_advMode(System.Int32)">
            <summary>
              Changes the measuring mode used for the advertised value pushed to the parent hub.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YSensor.ADVMODE_IMMEDIATE</c>, <c>YSensor.ADVMODE_PERIOD_AVG</c>,
              <c>YSensor.ADVMODE_PERIOD_MIN</c> and <c>YSensor.ADVMODE_PERIOD_MAX</c> corresponding to the
              measuring mode used for the advertised value pushed to the parent hub
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.set_resolution(System.Double)">
            <summary>
              Changes the resolution of the measured physical values.
            <para>
              The resolution corresponds to the numerical precision
              when displaying value. It does not change the precision of the measure itself.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the resolution of the measured physical values
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_resolution">
            <summary>
              Returns the resolution of the measured values.
            <para>
              The resolution corresponds to the numerical precision
              of the measures, which is not always the same as the actual precision of the sensor.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the resolution of the measured values
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.RESOLUTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.get_sensorState">
            <summary>
              Returns the sensor health state code, which is zero when there is an up-to-date measure
              available or a positive code if the sensor is not able to provide a measure right now.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the sensor health state code, which is zero when there is an up-to-date measure
              available or a positive code if the sensor is not able to provide a measure right now
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.SENSORSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.FindSensor(System.String)">
            <summary>
              Retrieves a sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSensor.isOnline()</c> to test if the sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the sensor, for instance
              <c>MyDevice.</c>.
            </param>
            <returns>
              a <c>YSensor</c> object allowing you to drive the sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YSensor.registerValueCallback(YoctoLib.YSensor.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YSensor.isSensorReady">
            <summary>
              Checks if the sensor is currently able to provide an up-to-date measure.
            <para>
              Returns false if the device is unreachable, or if the sensor does not have
              a current measure to transmit. No exception is raised if there is an error
              while trying to contact the device hosting $THEFUNCTION$.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>true</c> if the sensor can provide an up-to-date measure, and <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:YoctoLib.YSensor.get_dataLogger">
            <summary>
              Returns the <c>YDatalogger</c> object of the device hosting the sensor.
            <para>
              This method returns an object
              that can control global parameters of the data logger. The returned object
              should not be freed.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an <c>YDatalogger</c> object, or null on error.
            </returns>
        </member>
        <member name="M:YoctoLib.YSensor.startDataLogger">
            <summary>
              Starts the data logger on the device.
            <para>
              Note that the data logger
              will only save the measures on this sensor if the logFrequency
              is not set to "OFF".
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoLib.YSensor.stopDataLogger">
            <summary>
              Stops the datalogger on the device.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoLib.YSensor.get_recordedData(System.Double,System.Double)">
            <summary>
              Retrieves a <c>YDataSet</c> object holding historical data for this
              sensor, for a specified time interval.
            <para>
              The measures will be
              retrieved from the data logger, which must have been turned
              on at the desired time. See the documentation of the <c>YDataSet</c>
              class for information on how to get an overview of the
              recorded data, and how to load progressively a large set
              of measures from the data logger.
            </para>
            <para>
              This function only works if the device uses a recent firmware,
              as <c>YDataSet</c> objects are not supported by firmwares older than
              version 13000.
            </para>
            <para>
            </para>
            </summary>
            <param name="startTime">
              the start of the desired measure time interval,
              as a Unix timestamp, i.e. the number of seconds since
              January 1, 1970 UTC. The special value 0 can be used
              to include any measure, without initial limit.
            </param>
            <param name="endTime">
              the end of the desired measure time interval,
              as a Unix timestamp, i.e. the number of seconds since
              January 1, 1970 UTC. The special value 0 can be used
              to include any measure, without ending limit.
            </param>
            <returns>
              an instance of <c>YDataSet</c>, providing access to historical
              data. Past measures can be loaded progressively
              using methods from the <c>YDataSet</c> object.
            </returns>
        </member>
        <member name="M:YoctoLib.YSensor.registerTimedReportCallback(YoctoLib.YSensor.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YSensor.calibrateFromPoints(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Configures error correction data points, in particular to compensate for
              a possible perturbation of the measure caused by an enclosure.
            <para>
              It is possible
              to configure up to five correction points. Correction points must be provided
              in ascending order, and be in the range of the sensor. The device will automatically
              perform a linear interpolation of the error correction between specified
              points. Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
              For more information on advanced capabilities to refine the calibration of
              sensors, please contact support@yoctopuce.com.
            </para>
            <para>
            </para>
            </summary>
            <param name="rawValues">
              array of floating point numbers, corresponding to the raw
              values returned by the sensor for the correction points.
            </param>
            <param name="refValues">
              array of floating point numbers, corresponding to the corrected
              values for the correction points.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.loadCalibrationPoints(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Retrieves error correction data points previously entered using the method
              <c>calibrateFromPoints</c>.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="rawValues">
              array of floating point numbers, that will be filled by the
              function with the raw sensor values for the correction points.
            </param>
            <param name="refValues">
              array of floating point numbers, that will be filled by the
              function with the desired values for the correction points.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSensor.nextSensor">
            <summary>
              Continues the enumeration of sensors started using <c>yFirstSensor()</c>.
            <para>
              Caution: You can't make any assumption about the returned sensors order.
              If you want to find a specific a sensor, use <c>Sensor.findSensor()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSensor</c> object, corresponding to
              a sensor currently online, or a <c>null</c> pointer
              if there are no more sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YSensor.FirstSensor">
            <summary>
              Starts the enumeration of sensors currently accessible.
            <para>
              Use the method <c>YSensor.nextSensor()</c> to iterate on
              next sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSensor</c> object, corresponding to
              the first sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YDataLogger">
            <summary>
              A non-volatile memory for storing ongoing measured data is available on most Yoctopuce
              sensors.
            <para>
              Recording can happen automatically, without requiring a permanent
              connection to a computer.
              The <c>YDataLogger</c> class controls the global parameters of the internal data
              logger. Recording control (start/stop) as well as data retreival is done at
              sensor objects level.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YDataLogger.get_currentRunIndex">
            <summary>
              Returns the current run number, corresponding to the number of times the module was
              powered on with the dataLogger enabled at some point.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current run number, corresponding to the number of times the module was
              powered on with the dataLogger enabled at some point
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.CURRENTRUNINDEX_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.get_timeUTC">
            <summary>
              Returns the Unix timestamp for current UTC time, if known.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the Unix timestamp for current UTC time, if known
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.TIMEUTC_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.set_timeUTC(System.Int64)">
            <summary>
              Changes the current UTC time reference used for recorded data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current UTC time reference used for recorded data
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.get_recording">
            <summary>
              Returns the current activation state of the data logger.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDataLogger.RECORDING_OFF</c>, <c>YDataLogger.RECORDING_ON</c> and
              <c>YDataLogger.RECORDING_PENDING</c> corresponding to the current activation state of the data logger
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.RECORDING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.set_recording(System.Int32)">
            <summary>
              Changes the activation state of the data logger to start/stop recording data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDataLogger.RECORDING_OFF</c>, <c>YDataLogger.RECORDING_ON</c> and
              <c>YDataLogger.RECORDING_PENDING</c> corresponding to the activation state of the data logger to
              start/stop recording data
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.get_autoStart">
            <summary>
              Returns the default activation state of the data logger on power up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YDataLogger.AUTOSTART_OFF</c> or <c>YDataLogger.AUTOSTART_ON</c>, according to the
              default activation state of the data logger on power up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.AUTOSTART_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.set_autoStart(System.Int32)">
            <summary>
              Changes the default activation state of the data logger on power up.
            <para>
              Do not forget to call the <c>saveToFlash()</c> method of the module to save the
              configuration change.  Note: if the device doesn't have any time source at his disposal when
              starting up, it will wait for ~8 seconds before automatically starting to record  with
              an arbitrary timestamp
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YDataLogger.AUTOSTART_OFF</c> or <c>YDataLogger.AUTOSTART_ON</c>, according to the
              default activation state of the data logger on power up
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.get_beaconDriven">
            <summary>
              Returns true if the data logger is synchronised with the localization beacon.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YDataLogger.BEACONDRIVEN_OFF</c> or <c>YDataLogger.BEACONDRIVEN_ON</c>, according to true
              if the data logger is synchronised with the localization beacon
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.BEACONDRIVEN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.set_beaconDriven(System.Int32)">
            <summary>
              Changes the type of synchronisation of the data logger.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YDataLogger.BEACONDRIVEN_OFF</c> or <c>YDataLogger.BEACONDRIVEN_ON</c>, according to the
              type of synchronisation of the data logger
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.get_usage">
            <summary>
              Returns the percentage of datalogger memory in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the percentage of datalogger memory in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.USAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.FindDataLogger(System.String)">
            <summary>
              Retrieves a data logger for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the data logger is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDataLogger.isOnline()</c> to test if the data logger is
              indeed online at a given time. In case of ambiguity when looking for
              a data logger by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the data logger, for instance
              <c>LIGHTMK3.dataLogger</c>.
            </param>
            <returns>
              a <c>YDataLogger</c> object allowing you to drive the data logger.
            </returns>
        </member>
        <member name="M:YoctoLib.YDataLogger.registerValueCallback(YoctoLib.YDataLogger.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YDataLogger.forgetAllDataStreams">
            <summary>
              Clears the data logger memory and discards all recorded data streams.
            <para>
              This method also resets the current run index to zero.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.get_dataSets">
            <summary>
              Returns a list of <c>YDataSet</c> objects that can be used to retrieve
              all measures stored by the data logger.
            <para>
            </para>
            <para>
              This function only works if the device uses a recent firmware,
              as <c>YDataSet</c> objects are not supported by firmwares older than
              version 13000.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a list of <c>YDataSet</c> object.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="M:YoctoLib.YDataLogger.nextDataLogger">
            <summary>
              Continues the enumeration of data loggers started using <c>yFirstDataLogger()</c>.
            <para>
              Caution: You can't make any assumption about the returned data loggers order.
              If you want to find a specific a data logger, use <c>DataLogger.findDataLogger()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDataLogger</c> object, corresponding to
              a data logger currently online, or a <c>null</c> pointer
              if there are no more data loggers to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YDataLogger.FirstDataLogger">
            <summary>
              Starts the enumeration of data loggers currently accessible.
            <para>
              Use the method <c>YDataLogger.nextDataLogger()</c> to iterate on
              next data loggers.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDataLogger</c> object, corresponding to
              the first data logger currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YAccelerometer">
            <summary>
              The <c>YAccelerometer</c> class allows you to read and configure Yoctopuce accelerometers.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the possibility to access x, y and z components of the acceleration
              vector separately.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAccelerometer.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAccelerometer.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAccelerometer.get_xValue">
            <summary>
              Returns the X component of the acceleration, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the X component of the acceleration, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.XVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAccelerometer.get_yValue">
            <summary>
              Returns the Y component of the acceleration, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Y component of the acceleration, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.YVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAccelerometer.get_zValue">
            <summary>
              Returns the Z component of the acceleration, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Z component of the acceleration, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.ZVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAccelerometer.FindAccelerometer(System.String)">
            <summary>
              Retrieves an accelerometer for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the accelerometer is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAccelerometer.isOnline()</c> to test if the accelerometer is
              indeed online at a given time. In case of ambiguity when looking for
              an accelerometer by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the accelerometer, for instance
              <c>Y3DMK002.accelerometer</c>.
            </param>
            <returns>
              a <c>YAccelerometer</c> object allowing you to drive the accelerometer.
            </returns>
        </member>
        <member name="M:YoctoLib.YAccelerometer.registerValueCallback(YoctoLib.YAccelerometer.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAccelerometer.registerTimedReportCallback(YoctoLib.YAccelerometer.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAccelerometer.nextAccelerometer">
            <summary>
              Continues the enumeration of accelerometers started using <c>yFirstAccelerometer()</c>.
            <para>
              Caution: You can't make any assumption about the returned accelerometers order.
              If you want to find a specific an accelerometer, use <c>Accelerometer.findAccelerometer()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAccelerometer</c> object, corresponding to
              an accelerometer currently online, or a <c>null</c> pointer
              if there are no more accelerometers to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YAccelerometer.FirstAccelerometer">
            <summary>
              Starts the enumeration of accelerometers currently accessible.
            <para>
              Use the method <c>YAccelerometer.nextAccelerometer()</c> to iterate on
              next accelerometers.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAccelerometer</c> object, corresponding to
              the first accelerometer currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YAltitude">
            <summary>
              The <c>YAltitude</c> class allows you to read and configure Yoctopuce altimeters.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to configure the barometric pressure adjusted to
              sea level (QNH) for barometric sensors.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAltitude.set_currentValue(System.Double)">
            <summary>
              Changes the current estimated altitude.
            <para>
              This allows one to compensate for
              ambient pressure variations and to work in relative mode.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current estimated altitude
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAltitude.set_qnh(System.Double)">
            <summary>
              Changes the barometric pressure adjusted to sea level used to compute
              the altitude (QNH).
            <para>
              This enables you to compensate for atmospheric pressure
              changes due to weather conditions. Applicable to barometric altimeters only.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the barometric pressure adjusted to sea level used to compute
              the altitude (QNH)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAltitude.get_qnh">
            <summary>
              Returns the barometric pressure adjusted to sea level used to compute
              the altitude (QNH).
            <para>
              Applicable to barometric altimeters only.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the barometric pressure adjusted to sea level used to compute
              the altitude (QNH)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAltitude.QNH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAltitude.get_technology">
            <summary>
              Returns the technology used by the sesnor to compute
              altitude.
            <para>
              Possibles values are  "barometric" and "gps"
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the technology used by the sesnor to compute
              altitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAltitude.TECHNOLOGY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAltitude.FindAltitude(System.String)">
            <summary>
              Retrieves an altimeter for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the altimeter is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAltitude.isOnline()</c> to test if the altimeter is
              indeed online at a given time. In case of ambiguity when looking for
              an altimeter by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the altimeter, for instance
              <c>YALTIMK2.altitude</c>.
            </param>
            <returns>
              a <c>YAltitude</c> object allowing you to drive the altimeter.
            </returns>
        </member>
        <member name="M:YoctoLib.YAltitude.registerValueCallback(YoctoLib.YAltitude.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAltitude.registerTimedReportCallback(YoctoLib.YAltitude.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAltitude.nextAltitude">
            <summary>
              Continues the enumeration of altimeters started using <c>yFirstAltitude()</c>.
            <para>
              Caution: You can't make any assumption about the returned altimeters order.
              If you want to find a specific an altimeter, use <c>Altitude.findAltitude()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAltitude</c> object, corresponding to
              an altimeter currently online, or a <c>null</c> pointer
              if there are no more altimeters to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YAltitude.FirstAltitude">
            <summary>
              Starts the enumeration of altimeters currently accessible.
            <para>
              Use the method <c>YAltitude.nextAltitude()</c> to iterate on
              next altimeters.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAltitude</c> object, corresponding to
              the first altimeter currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YAnButton">
            <summary>
              The <c>YAnButton</c> class provide access to basic resistive inputs.
            <para>
              Such inputs can be used to measure the state
              of a simple button as well as to read an analog potentiometer (variable resistance).
              This can be use for instance with a continuous rotating knob, a throttle grip
              or a joystick. The module is capable to calibrate itself on min and max values,
              in order to compute a calibrated value that varies proportionally with the
              potentiometer position, regardless of its total resistance.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAnButton.get_calibratedValue">
            <summary>
              Returns the current calibrated input value (between 0 and 1000, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current calibrated input value (between 0 and 1000, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.CALIBRATEDVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_rawValue">
            <summary>
              Returns the current measured input value as-is (between 0 and 4095, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current measured input value as-is (between 0 and 4095, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.RAWVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_analogCalibration">
            <summary>
              Tells if a calibration process is currently ongoing.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAnButton.ANALOGCALIBRATION_OFF</c> or <c>YAnButton.ANALOGCALIBRATION_ON</c>
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.ANALOGCALIBRATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.set_analogCalibration(System.Int32)">
            <summary>
              Starts or stops the calibration process.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module at the end of the calibration if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YAnButton.ANALOGCALIBRATION_OFF</c> or <c>YAnButton.ANALOGCALIBRATION_ON</c>
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_calibrationMax">
            <summary>
              Returns the maximal value measured during the calibration (between 0 and 4095, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximal value measured during the calibration (between 0 and 4095, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.CALIBRATIONMAX_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.set_calibrationMax(System.Int32)">
            <summary>
              Changes the maximal calibration value for the input (between 0 and 4095, included), without actually
              starting the automated calibration.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximal calibration value for the input (between 0 and 4095,
              included), without actually
              starting the automated calibration
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_calibrationMin">
            <summary>
              Returns the minimal value measured during the calibration (between 0 and 4095, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimal value measured during the calibration (between 0 and 4095, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.CALIBRATIONMIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.set_calibrationMin(System.Int32)">
            <summary>
              Changes the minimal calibration value for the input (between 0 and 4095, included), without actually
              starting the automated calibration.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimal calibration value for the input (between 0 and 4095,
              included), without actually
              starting the automated calibration
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_sensitivity">
            <summary>
              Returns the sensibility for the input (between 1 and 1000) for triggering user callbacks.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the sensibility for the input (between 1 and 1000) for triggering user callbacks
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.SENSITIVITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.set_sensitivity(System.Int32)">
            <summary>
              Changes the sensibility for the input (between 1 and 1000) for triggering user callbacks.
            <para>
              The sensibility is used to filter variations around a fixed value, but does not preclude the
              transmission of events when the input value evolves constantly in the same direction.
              Special case: when the value 1000 is used, the callback will only be thrown when the logical state
              of the input switches from pressed to released and back.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the sensibility for the input (between 1 and 1000) for triggering user callbacks
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_isPressed">
            <summary>
              Returns true if the input (considered as binary) is active (closed contact), and false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAnButton.ISPRESSED_FALSE</c> or <c>YAnButton.ISPRESSED_TRUE</c>, according to true if
              the input (considered as binary) is active (closed contact), and false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.ISPRESSED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_lastTimePressed">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last time
              the input button was pressed (the input contact transitioned from open to closed).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last time
              the input button was pressed (the input contact transitioned from open to closed)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.LASTTIMEPRESSED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_lastTimeReleased">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last time
              the input button was released (the input contact transitioned from closed to open).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last time
              the input button was released (the input contact transitioned from closed to open)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.LASTTIMERELEASED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_pulseCounter">
            <summary>
              Returns the pulse counter value.
            <para>
              The value is a 32 bit integer. In case
              of overflow (>=2^32), the counter will wrap. To reset the counter, just
              call the resetCounter() method.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the pulse counter value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.PULSECOUNTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_pulseTimer">
            <summary>
              Returns the timer of the pulses counter (ms).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the timer of the pulses counter (ms)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.get_inputType">
            <summary>
              Returns the decoding method applied to the input (analog or multiplexed binary switches).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YAnButton.INPUTTYPE_ANALOG_FAST</c>, <c>YAnButton.INPUTTYPE_DIGITAL4</c> and
              <c>YAnButton.INPUTTYPE_ANALOG_SMOOTH</c> corresponding to the decoding method applied to the input
              (analog or multiplexed binary switches)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.INPUTTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.set_inputType(System.Int32)">
            <summary>
              Changes the decoding method applied to the input (analog or multiplexed binary switches).
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YAnButton.INPUTTYPE_ANALOG_FAST</c>, <c>YAnButton.INPUTTYPE_DIGITAL4</c> and
              <c>YAnButton.INPUTTYPE_ANALOG_SMOOTH</c> corresponding to the decoding method applied to the input
              (analog or multiplexed binary switches)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.FindAnButton(System.String)">
            <summary>
              Retrieves an analog input for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the analog input is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAnButton.isOnline()</c> to test if the analog input is
              indeed online at a given time. In case of ambiguity when looking for
              an analog input by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the analog input, for instance
              <c>YBUZZER2.anButton1</c>.
            </param>
            <returns>
              a <c>YAnButton</c> object allowing you to drive the analog input.
            </returns>
        </member>
        <member name="M:YoctoLib.YAnButton.registerValueCallback(YoctoLib.YAnButton.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAnButton.resetCounter">
            <summary>
              Returns the pulse counter value as well as its timer.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAnButton.nextAnButton">
            <summary>
              Continues the enumeration of analog inputs started using <c>yFirstAnButton()</c>.
            <para>
              Caution: You can't make any assumption about the returned analog inputs order.
              If you want to find a specific an analog input, use <c>AnButton.findAnButton()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAnButton</c> object, corresponding to
              an analog input currently online, or a <c>null</c> pointer
              if there are no more analog inputs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YAnButton.FirstAnButton">
            <summary>
              Starts the enumeration of analog inputs currently accessible.
            <para>
              Use the method <c>YAnButton.nextAnButton()</c> to iterate on
              next analog inputs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAnButton</c> object, corresponding to
              the first analog input currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YArithmeticSensor">
            <summary>
              The <c>YArithmeticSensor</c> class allows some Yoctopuce devices to compute in real-time
              values based on an arithmetic formula involving one or more measured signals as
              well as the temperature.
            <para>
              As for any physical sensor, the computed values can be
              read by callback and stored in the built-in datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the arithmetic sensor.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the arithmetic sensor
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.get_description">
            <summary>
              Returns a short informative description of the formula.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a short informative description of the formula
            </returns>
            <para>
              On failure, throws an exception or returns <c>YArithmeticSensor.DESCRIPTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.FindArithmeticSensor(System.String)">
            <summary>
              Retrieves an arithmetic sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the arithmetic sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YArithmeticSensor.isOnline()</c> to test if the arithmetic sensor is
              indeed online at a given time. In case of ambiguity when looking for
              an arithmetic sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the arithmetic sensor, for instance
              <c>RXUVOLT1.arithmeticSensor1</c>.
            </param>
            <returns>
              a <c>YArithmeticSensor</c> object allowing you to drive the arithmetic sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.registerValueCallback(YoctoLib.YArithmeticSensor.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.registerTimedReportCallback(YoctoLib.YArithmeticSensor.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.defineExpression(System.String,System.String)">
            <summary>
              Defines the arithmetic function by means of an algebraic expression.
            <para>
              The expression
              may include references to device sensors, by their physical or logical name, to
              usual math functions and to auxiliary functions defined separately.
            </para>
            </summary>
            <param name="expr">
              the algebraic expression defining the function.
            </param>
            <param name="descr">
              short informative description of the expression.
            </param>
            <returns>
              the current expression value if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns YAPI.INVALID_DOUBLE.
            </para>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.loadExpression">
            <summary>
              Retrieves the algebraic expression defining the arithmetic function, as previously
              configured using the <c>defineExpression</c> function.
            <para>
            </para>
            </summary>
            <returns>
              a string containing the mathematical expression.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.defineAuxiliaryFunction(System.String,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Defines a auxiliary function by means of a table of reference points.
            <para>
              Intermediate values
              will be interpolated between specified reference points. The reference points are given
              as pairs of floating point numbers.
              The auxiliary function will be available for use by all ArithmeticSensor objects of the
              device. Up to nine auxiliary function can be defined in a device, each containing up to
              96 reference points.
            </para>
            </summary>
            <param name="name">
              auxiliary function name, up to 16 characters.
            </param>
            <param name="inputValues">
              array of floating point numbers, corresponding to the function input value.
            </param>
            <param name="outputValues">
              array of floating point numbers, corresponding to the output value
              desired for each of the input value, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.loadAuxiliaryFunction(System.String,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Retrieves the reference points table defining an auxiliary function previously
              configured using the <c>defineAuxiliaryFunction</c> function.
            <para>
            </para>
            </summary>
            <param name="name">
              auxiliary function name, up to 16 characters.
            </param>
            <param name="inputValues">
              array of floating point numbers, that is filled by the function
              with all the function reference input value.
            </param>
            <param name="outputValues">
              array of floating point numbers, that is filled by the function
              output value for each of the input value, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.nextArithmeticSensor">
            <summary>
              Continues the enumeration of arithmetic sensors started using <c>yFirstArithmeticSensor()</c>.
            <para>
              Caution: You can't make any assumption about the returned arithmetic sensors order.
              If you want to find a specific an arithmetic sensor, use <c>ArithmeticSensor.findArithmeticSensor()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YArithmeticSensor</c> object, corresponding to
              an arithmetic sensor currently online, or a <c>null</c> pointer
              if there are no more arithmetic sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YArithmeticSensor.FirstArithmeticSensor">
            <summary>
              Starts the enumeration of arithmetic sensors currently accessible.
            <para>
              Use the method <c>YArithmeticSensor.nextArithmeticSensor()</c> to iterate on
              next arithmetic sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YArithmeticSensor</c> object, corresponding to
              the first arithmetic sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YAudioIn">
            <summary>
              The <c>YAudioIn</c> class allows you to configure the volume of an audio input.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAudioIn.get_volume">
            <summary>
              Returns audio input gain, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to audio input gain, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioIn.set_volume(System.Int32)">
            <summary>
              Changes audio input gain, in per cents.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to audio input gain, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioIn.get_mute">
            <summary>
              Returns the state of the mute function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAudioIn.MUTE_FALSE</c> or <c>YAudioIn.MUTE_TRUE</c>, according to the state of the mute function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.MUTE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioIn.set_mute(System.Int32)">
            <summary>
              Changes the state of the mute function.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YAudioIn.MUTE_FALSE</c> or <c>YAudioIn.MUTE_TRUE</c>, according to the state of the mute function
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioIn.get_volumeRange">
            <summary>
              Returns the supported volume range.
            <para>
              The low value of the
              range corresponds to the minimal audible value. To
              completely mute the sound, use <c>set_mute()</c>
              instead of the <c>set_volume()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the supported volume range
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.VOLUMERANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioIn.get_signal">
            <summary>
              Returns the detected input signal level.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the detected input signal level
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.SIGNAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioIn.get_noSignalFor">
            <summary>
              Returns the number of seconds elapsed without detecting a signal.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds elapsed without detecting a signal
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.NOSIGNALFOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioIn.FindAudioIn(System.String)">
            <summary>
              Retrieves an audio input for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the audio input is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAudioIn.isOnline()</c> to test if the audio input is
              indeed online at a given time. In case of ambiguity when looking for
              an audio input by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the audio input, for instance
              <c>MyDevice.audioIn1</c>.
            </param>
            <returns>
              a <c>YAudioIn</c> object allowing you to drive the audio input.
            </returns>
        </member>
        <member name="M:YoctoLib.YAudioIn.registerValueCallback(YoctoLib.YAudioIn.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAudioIn.nextAudioIn">
            <summary>
              Continues the enumeration of audio inputs started using <c>yFirstAudioIn()</c>.
            <para>
              Caution: You can't make any assumption about the returned audio inputs order.
              If you want to find a specific an audio input, use <c>AudioIn.findAudioIn()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAudioIn</c> object, corresponding to
              an audio input currently online, or a <c>null</c> pointer
              if there are no more audio inputs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YAudioIn.FirstAudioIn">
            <summary>
              Starts the enumeration of audio inputs currently accessible.
            <para>
              Use the method <c>YAudioIn.nextAudioIn()</c> to iterate on
              next audio inputs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAudioIn</c> object, corresponding to
              the first audio input currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YAudioOut">
            <summary>
              The <c>YAudioOut</c> class allows you to configure the volume of an audio output.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YAudioOut.get_volume">
            <summary>
              Returns audio output volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to audio output volume, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioOut.set_volume(System.Int32)">
            <summary>
              Changes audio output volume, in per cents.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to audio output volume, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioOut.get_mute">
            <summary>
              Returns the state of the mute function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAudioOut.MUTE_FALSE</c> or <c>YAudioOut.MUTE_TRUE</c>, according to the state of the mute function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.MUTE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioOut.set_mute(System.Int32)">
            <summary>
              Changes the state of the mute function.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YAudioOut.MUTE_FALSE</c> or <c>YAudioOut.MUTE_TRUE</c>, according to the state of the mute function
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioOut.get_volumeRange">
            <summary>
              Returns the supported volume range.
            <para>
              The low value of the
              range corresponds to the minimal audible value. To
              completely mute the sound, use <c>set_mute()</c>
              instead of the <c>set_volume()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the supported volume range
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.VOLUMERANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioOut.get_signal">
            <summary>
              Returns the detected output current level.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the detected output current level
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.SIGNAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioOut.get_noSignalFor">
            <summary>
              Returns the number of seconds elapsed without detecting a signal.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds elapsed without detecting a signal
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.NOSIGNALFOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YAudioOut.FindAudioOut(System.String)">
            <summary>
              Retrieves an audio output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the audio output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAudioOut.isOnline()</c> to test if the audio output is
              indeed online at a given time. In case of ambiguity when looking for
              an audio output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the audio output, for instance
              <c>MyDevice.audioOut1</c>.
            </param>
            <returns>
              a <c>YAudioOut</c> object allowing you to drive the audio output.
            </returns>
        </member>
        <member name="M:YoctoLib.YAudioOut.registerValueCallback(YoctoLib.YAudioOut.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YAudioOut.nextAudioOut">
            <summary>
              Continues the enumeration of audio outputs started using <c>yFirstAudioOut()</c>.
            <para>
              Caution: You can't make any assumption about the returned audio outputs order.
              If you want to find a specific an audio output, use <c>AudioOut.findAudioOut()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAudioOut</c> object, corresponding to
              an audio output currently online, or a <c>null</c> pointer
              if there are no more audio outputs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YAudioOut.FirstAudioOut">
            <summary>
              Starts the enumeration of audio outputs currently accessible.
            <para>
              Use the method <c>YAudioOut.nextAudioOut()</c> to iterate on
              next audio outputs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YAudioOut</c> object, corresponding to
              the first audio output currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YBluetoothLink">
            <summary>
              BluetoothLink function provides control over Bluetooth link
              and status for devices that are Bluetooth-enabled.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_ownAddress">
            <summary>
              Returns the MAC-48 address of the bluetooth interface, which is unique on the bluetooth network.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the MAC-48 address of the bluetooth interface, which is unique on the
              bluetooth network
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.OWNADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_pairingPin">
            <summary>
              Returns an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.PAIRINGPIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.set_pairingPin(System.String)">
            <summary>
              Changes the PIN code used by the module for bluetooth pairing.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module to save the
              new value in the device flash.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the PIN code used by the module for bluetooth pairing
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_remoteAddress">
            <summary>
              Returns the MAC-48 address of the remote device to connect to.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the MAC-48 address of the remote device to connect to
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.REMOTEADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.set_remoteAddress(System.String)">
            <summary>
              Changes the MAC-48 address defining which remote device to connect to.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the MAC-48 address defining which remote device to connect to
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_remoteName">
            <summary>
              Returns the bluetooth name the remote device, if found on the bluetooth network.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the bluetooth name the remote device, if found on the bluetooth network
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.REMOTENAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_mute">
            <summary>
              Returns the state of the mute function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YBluetoothLink.MUTE_FALSE</c> or <c>YBluetoothLink.MUTE_TRUE</c>, according to the state
              of the mute function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.MUTE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.set_mute(System.Int32)">
            <summary>
              Changes the state of the mute function.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YBluetoothLink.MUTE_FALSE</c> or <c>YBluetoothLink.MUTE_TRUE</c>, according to the state
              of the mute function
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_preAmplifier">
            <summary>
              Returns the audio pre-amplifier volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the audio pre-amplifier volume, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.PREAMPLIFIER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.set_preAmplifier(System.Int32)">
            <summary>
              Changes the audio pre-amplifier volume, in per cents.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the audio pre-amplifier volume, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_volume">
            <summary>
              Returns the connected headset volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the connected headset volume, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.set_volume(System.Int32)">
            <summary>
              Changes the connected headset volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the connected headset volume, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_linkState">
            <summary>
              Returns the bluetooth link state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YBluetoothLink.LINKSTATE_DOWN</c>, <c>YBluetoothLink.LINKSTATE_FREE</c>,
              <c>YBluetoothLink.LINKSTATE_SEARCH</c>, <c>YBluetoothLink.LINKSTATE_EXISTS</c>,
              <c>YBluetoothLink.LINKSTATE_LINKED</c> and <c>YBluetoothLink.LINKSTATE_PLAY</c> corresponding to
              the bluetooth link state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.LINKSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.get_linkQuality">
            <summary>
              Returns the bluetooth receiver signal strength, in pourcents, or 0 if no connection is established.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the bluetooth receiver signal strength, in pourcents, or 0 if no
              connection is established
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.LINKQUALITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.FindBluetoothLink(System.String)">
            <summary>
              Retrieves a Bluetooth sound controller for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the Bluetooth sound controller is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YBluetoothLink.isOnline()</c> to test if the Bluetooth sound controller is
              indeed online at a given time. In case of ambiguity when looking for
              a Bluetooth sound controller by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the Bluetooth sound controller, for instance
              <c>MyDevice.bluetoothLink1</c>.
            </param>
            <returns>
              a <c>YBluetoothLink</c> object allowing you to drive the Bluetooth sound controller.
            </returns>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.registerValueCallback(YoctoLib.YBluetoothLink.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.connect">
            <summary>
              Attempt to connect to the previously selected remote device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.disconnect">
            <summary>
              Disconnect from the previously selected remote device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.nextBluetoothLink">
            <summary>
              Continues the enumeration of Bluetooth sound controllers started using <c>yFirstBluetoothLink()</c>.
            <para>
              Caution: You can't make any assumption about the returned Bluetooth sound controllers order.
              If you want to find a specific a Bluetooth sound controller, use <c>BluetoothLink.findBluetoothLink()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YBluetoothLink</c> object, corresponding to
              a Bluetooth sound controller currently online, or a <c>null</c> pointer
              if there are no more Bluetooth sound controllers to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YBluetoothLink.FirstBluetoothLink">
            <summary>
              Starts the enumeration of Bluetooth sound controllers currently accessible.
            <para>
              Use the method <c>YBluetoothLink.nextBluetoothLink()</c> to iterate on
              next Bluetooth sound controllers.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YBluetoothLink</c> object, corresponding to
              the first Bluetooth sound controller currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YBuzzer">
            <summary>
              The <c>YBuzzer</c> class allows you to drive a buzzer.
            <para>
              You can
              choose the frequency and the volume at which the buzzer must sound.
              You can also pre-program a play sequence.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YBuzzer.set_frequency(System.Double)">
            <summary>
              Changes the frequency of the signal sent to the buzzer.
            <para>
              A zero value stops the buzzer.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the frequency of the signal sent to the buzzer
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.get_frequency">
            <summary>
              Returns the  frequency of the signal sent to the buzzer/speaker.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the  frequency of the signal sent to the buzzer/speaker
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.get_volume">
            <summary>
              Returns the volume of the signal sent to the buzzer/speaker.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the volume of the signal sent to the buzzer/speaker
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.set_volume(System.Int32)">
            <summary>
              Changes the volume of the signal sent to the buzzer/speaker.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the volume of the signal sent to the buzzer/speaker
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.get_playSeqSize">
            <summary>
              Returns the current length of the playing sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current length of the playing sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.PLAYSEQSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.get_playSeqMaxSize">
            <summary>
              Returns the maximum length of the playing sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum length of the playing sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.PLAYSEQMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.get_playSeqSignature">
            <summary>
              Returns the playing sequence signature.
            <para>
              As playing
              sequences cannot be read from the device, this can be used
              to detect if a specific playing sequence is already
              programmed.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the playing sequence signature
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.PLAYSEQSIGNATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.FindBuzzer(System.String)">
            <summary>
              Retrieves a buzzer for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the buzzer is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YBuzzer.isOnline()</c> to test if the buzzer is
              indeed online at a given time. In case of ambiguity when looking for
              a buzzer by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the buzzer, for instance
              <c>YBUZZER2.buzzer</c>.
            </param>
            <returns>
              a <c>YBuzzer</c> object allowing you to drive the buzzer.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.registerValueCallback(YoctoLib.YBuzzer.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YBuzzer.addFreqMoveToPlaySeq(System.Int32,System.Int32)">
            <summary>
              Adds a new frequency transition to the playing sequence.
            <para>
            </para>
            </summary>
            <param name="freq">
              desired frequency when the transition is completed, in Hz
            </param>
            <param name="msDelay">
              duration of the frequency transition, in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.addPulseToPlaySeq(System.Int32,System.Int32)">
            <summary>
              Adds a pulse to the playing sequence.
            <para>
            </para>
            </summary>
            <param name="freq">
              pulse frequency, in Hz
            </param>
            <param name="msDuration">
              pulse duration, in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.addVolMoveToPlaySeq(System.Int32,System.Int32)">
            <summary>
              Adds a new volume transition to the playing sequence.
            <para>
              Frequency stays untouched:
              if frequency is at zero, the transition has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="volume">
              desired volume when the transition is completed, as a percentage.
            </param>
            <param name="msDuration">
              duration of the volume transition, in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.addNotesToPlaySeq(System.String)">
            <summary>
              Adds notes to the playing sequence.
            <para>
              Notes are provided as text words, separated by
              spaces. The pitch is specified using the usual letter from A to G. The duration is
              specified as the divisor of a whole note: 4 for a fourth, 8 for an eight note, etc.
              Some modifiers are supported: <c>#</c> and <c>b</c> to alter a note pitch,
              <c>'</c> and <c>,</c> to move to the upper/lower octave, <c>.</c> to enlarge
              the note duration.
            </para>
            </summary>
            <param name="notes">
              notes to be played, as a text string.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.startPlaySeq">
            <summary>
              Starts the preprogrammed playing sequence.
            <para>
              The sequence
              runs in loop until it is stopped by stopPlaySeq or an explicit
              change. To play the sequence only once, use <c>oncePlaySeq()</c>.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.stopPlaySeq">
            <summary>
              Stops the preprogrammed playing sequence and sets the frequency to zero.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.resetPlaySeq">
            <summary>
              Resets the preprogrammed playing sequence and sets the frequency to zero.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.oncePlaySeq">
            <summary>
              Starts the preprogrammed playing sequence and run it once only.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.savePlaySeq">
            <summary>
              Saves the preprogrammed playing sequence to flash memory.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.reloadPlaySeq">
            <summary>
              Reloads the preprogrammed playing sequence from the flash memory.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.pulse(System.Int32,System.Int32)">
            <summary>
              Activates the buzzer for a short duration.
            <para>
            </para>
            </summary>
            <param name="frequency">
              pulse frequency, in hertz
            </param>
            <param name="duration">
              pulse duration in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.freqMove(System.Int32,System.Int32)">
            <summary>
              Makes the buzzer frequency change over a period of time.
            <para>
            </para>
            </summary>
            <param name="frequency">
              frequency to reach, in hertz. A frequency under 25Hz stops the buzzer.
            </param>
            <param name="duration">
              pulse duration in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.volumeMove(System.Int32,System.Int32)">
            <summary>
              Makes the buzzer volume change over a period of time, frequency  stays untouched.
            <para>
            </para>
            </summary>
            <param name="volume">
              volume to reach in %
            </param>
            <param name="duration">
              change duration in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YBuzzer.playNotes(System.String)">
            <summary>
              Immediately play a note sequence.
            <para>
              Notes are provided as text words, separated by
              spaces. The pitch is specified using the usual letter from A to G. The duration is
              specified as the divisor of a whole note: 4 for a fourth, 8 for an eight note, etc.
              Some modifiers are supported: <c>#</c> and <c>b</c> to alter a note pitch,
              <c>'</c> and <c>,</c> to move to the upper/lower octave, <c>.</c> to enlarge
              the note duration.
            </para>
            </summary>
            <param name="notes">
              notes to be played, as a text string.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.nextBuzzer">
            <summary>
              Continues the enumeration of buzzers started using <c>yFirstBuzzer()</c>.
            <para>
              Caution: You can't make any assumption about the returned buzzers order.
              If you want to find a specific a buzzer, use <c>Buzzer.findBuzzer()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YBuzzer</c> object, corresponding to
              a buzzer currently online, or a <c>null</c> pointer
              if there are no more buzzers to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YBuzzer.FirstBuzzer">
            <summary>
              Starts the enumeration of buzzers currently accessible.
            <para>
              Use the method <c>YBuzzer.nextBuzzer()</c> to iterate on
              next buzzers.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YBuzzer</c> object, corresponding to
              the first buzzer currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YCarbonDioxide">
            <summary>
              The <c>YCarbonDioxide</c> class allows you to read and configure Yoctopuce CO2 sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to perform manual calibration if required.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.get_abcPeriod">
            <summary>
              Returns the Automatic Baseline Calibration period, in hours.
            <para>
              A negative value
              means that automatic baseline calibration is disabled.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the Automatic Baseline Calibration period, in hours
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCarbonDioxide.ABCPERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.set_abcPeriod(System.Int32)">
            <summary>
              Changes Automatic Baseline Calibration period, in hours.
            <para>
              If you need
              to disable automatic baseline calibration (for instance when using the
              sensor in an environment that is constantly above 400 ppm CO2), set the
              period to -1. For the Yocto-CO2-V2, the only possible values are 24 and -1.
              Remember to call the <c>saveToFlash()</c> method of the
              module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to Automatic Baseline Calibration period, in hours
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.FindCarbonDioxide(System.String)">
            <summary>
              Retrieves a CO2 sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the CO2 sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCarbonDioxide.isOnline()</c> to test if the CO2 sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a CO2 sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the CO2 sensor, for instance
              <c>YCO2MK02.carbonDioxide</c>.
            </param>
            <returns>
              a <c>YCarbonDioxide</c> object allowing you to drive the CO2 sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.registerValueCallback(YoctoLib.YCarbonDioxide.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.registerTimedReportCallback(YoctoLib.YCarbonDioxide.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.triggerForcedCalibration(System.Double)">
            <summary>
              Triggers a forced calibration of the sensor at a given CO2 level, specified
              between 400ppm and 2000ppm.
            <para>
              Before invoking this command, the sensor must
              have been maintained within the specified CO2 density during at least two
              minutes.
            </para>
            <para>
            </para>
            </summary>
            <param name="refVal">
              reference CO2 density for the calibration
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.triggerBaselineCalibration">
            <summary>
              Triggers a baseline calibration at standard CO2 ambiant level (400ppm).
            <para>
              It is normally not necessary to manually calibrate the sensor, because
              the built-in automatic baseline calibration procedure will automatically
              fix any long-term drift based on the lowest level of CO2 observed over the
              automatic calibration period. However, if automatic baseline calibration
              is disabled, you may want to manually trigger a calibration from time to
              time. Before starting a baseline calibration, make sure to put the sensor
              in a standard environment (e.g. outside in fresh air) at around 400 ppm
              for at least two minutes.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.triggerZeroCalibration">
            <summary>
              Triggers a zero calibration of the sensor on carbon dioxide-free air -
              for use with first generation Yocto-CO2 only.
            <para>
              It is normally not necessary to manually calibrate the sensor, because
              the built-in automatic baseline calibration procedure will automatically
              fix any long-term drift based on the lowest level of CO2 observed over the
              automatic calibration period. However, if you disable automatic baseline
              calibration, you may want to manually trigger a calibration from time to
              time. Before starting a zero calibration, you should circulate carbon
              dioxide-free air within the sensor for a minute or two, using a small pipe
              connected to the sensor. Please contact support@yoctopuce.com for more details
              on the zero calibration procedure.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.nextCarbonDioxide">
            <summary>
              Continues the enumeration of CO2 sensors started using <c>yFirstCarbonDioxide()</c>.
            <para>
              Caution: You can't make any assumption about the returned CO2 sensors order.
              If you want to find a specific a CO2 sensor, use <c>CarbonDioxide.findCarbonDioxide()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCarbonDioxide</c> object, corresponding to
              a CO2 sensor currently online, or a <c>null</c> pointer
              if there are no more CO2 sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YCarbonDioxide.FirstCarbonDioxide">
            <summary>
              Starts the enumeration of CO2 sensors currently accessible.
            <para>
              Use the method <c>YCarbonDioxide.nextCarbonDioxide()</c> to iterate on
              next CO2 sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCarbonDioxide</c> object, corresponding to
              the first CO2 sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YCellRecord">
            <c>YCellRecord</c> objects are used to describe a wireless network.
            These objects are used in particular in conjunction with the
            <c>YCellular</c> class.
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YCellRecord.get_cellOperator">
            <summary>
              Returns the name of the the cell operator, as received from the network.
            <para>
            </para>
            </summary>
            <returns>
              a string with the name of the the cell operator.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellRecord.get_mobileCountryCode">
            <summary>
              Returns the Mobile Country Code (MCC).
            <para>
              The MCC is a unique identifier for each country.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Mobile Country Code (MCC).
            </returns>
        </member>
        <member name="M:YoctoLib.YCellRecord.get_mobileNetworkCode">
            <summary>
              Returns the Mobile Network Code (MNC).
            <para>
              The MNC is a unique identifier for each phone
              operator within a country.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Mobile Network Code (MNC).
            </returns>
        </member>
        <member name="M:YoctoLib.YCellRecord.get_locationAreaCode">
            <summary>
              Returns the Location Area Code (LAC).
            <para>
              The LAC is a unique identifier for each
              place within a country.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Location Area Code (LAC).
            </returns>
        </member>
        <member name="M:YoctoLib.YCellRecord.get_cellId">
            <summary>
              Returns the Cell ID.
            <para>
              The Cell ID is a unique identifier for each
              base transmission station within a LAC.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Cell Id.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellRecord.get_signalStrength">
            <summary>
              Returns the signal strength, measured in dBm.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the signal strength.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellRecord.get_timingAdvance">
            <summary>
              Returns the Timing Advance (TA).
            <para>
              The TA corresponds to the time necessary
              for the signal to reach the base station from the device.
              Each increment corresponds about to 550m of distance.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Timing Advance (TA).
            </returns>
        </member>
        <member name="T:YoctoLib.YCellular">
            <summary>
              The <c>YCellular</c> class provides control over cellular network parameters
              and status for devices that are GSM-enabled.
            <para>
              Note that TCP/IP parameters are configured separately, using class <c>YNetwork</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YCellular.get_linkQuality">
            <summary>
              Returns the link quality, expressed in percent.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the link quality, expressed in percent
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.LINKQUALITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_cellOperator">
            <summary>
              Returns the name of the cell operator currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the cell operator currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.CELLOPERATOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_cellIdentifier">
            <summary>
              Returns the unique identifier of the cellular antenna in use: MCC, MNC, LAC and Cell ID.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the unique identifier of the cellular antenna in use: MCC, MNC, LAC and Cell ID
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.CELLIDENTIFIER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_cellType">
            <summary>
              Active cellular connection type.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YCellular.CELLTYPE_GPRS</c>, <c>YCellular.CELLTYPE_EGPRS</c>,
              <c>YCellular.CELLTYPE_WCDMA</c>, <c>YCellular.CELLTYPE_HSDPA</c>, <c>YCellular.CELLTYPE_NONE</c>,
              <c>YCellular.CELLTYPE_CDMA</c>, <c>YCellular.CELLTYPE_LTE_M</c>, <c>YCellular.CELLTYPE_NB_IOT</c>
              and <c>YCellular.CELLTYPE_EC_GSM_IOT</c>
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.CELLTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_imsi">
            <summary>
              Returns the International Mobile Subscriber Identity (MSI) that uniquely identifies
              the SIM card.
            <para>
              The first 3 digits represent the mobile country code (MCC), which
              is followed by the mobile network code (MNC), either 2-digit (European standard)
              or 3-digit (North American standard)
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the International Mobile Subscriber Identity (MSI) that uniquely identifies
              the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.IMSI_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_message">
            <summary>
              Returns the latest status message from the wireless interface.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest status message from the wireless interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.MESSAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_pin">
            <summary>
              Returns an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.PIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_pin(System.String)">
            <summary>
              Changes the PIN code used by the module to access the SIM card.
            <para>
              This function does not change the code on the SIM card itself, but only changes
              the parameter used by the device to try to get access to it. If the SIM code
              does not work immediately on first try, it will be automatically forgotten
              and the message will be set to "Enter SIM PIN". The method should then be
              invoked again with right correct PIN code. After three failed attempts in a row,
              the message is changed to "Enter SIM PUK" and the SIM card PUK code must be
              provided using method <c>sendPUK</c>.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module to save the
              new value in the device flash.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the PIN code used by the module to access the SIM card
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_radioConfig">
            <summary>
              Returns the type of protocol used over the serial line, as a string.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used over the serial line, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.RADIOCONFIG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_radioConfig(System.String)">
            <summary>
              Changes the type of protocol used over the serial line.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each bytes sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used over the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_lockedOperator">
            <summary>
              Returns the name of the only cell operator to use if automatic choice is disabled,
              or an empty string if the SIM card will automatically choose among available
              cell operators.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the only cell operator to use if automatic choice is disabled,
              or an empty string if the SIM card will automatically choose among available
              cell operators
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.LOCKEDOPERATOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_lockedOperator(System.String)">
            <summary>
              Changes the name of the cell operator to be used.
            <para>
              If the name is an empty
              string, the choice will be made automatically based on the SIM card. Otherwise,
              the selected operator is the only one that will be used.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the name of the cell operator to be used
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_airplaneMode">
            <summary>
              Returns true if the airplane mode is active (radio turned off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YCellular.AIRPLANEMODE_OFF</c> or <c>YCellular.AIRPLANEMODE_ON</c>, according to true if
              the airplane mode is active (radio turned off)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.AIRPLANEMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_airplaneMode(System.Int32)">
            <summary>
              Changes the activation state of airplane mode (radio turned off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YCellular.AIRPLANEMODE_OFF</c> or <c>YCellular.AIRPLANEMODE_ON</c>, according to the
              activation state of airplane mode (radio turned off)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_enableData">
            <summary>
              Returns the condition for enabling IP data services (GPRS).
            <para>
              When data services are disabled, SMS are the only mean of communication.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YCellular.ENABLEDATA_HOMENETWORK</c>, <c>YCellular.ENABLEDATA_ROAMING</c>,
              <c>YCellular.ENABLEDATA_NEVER</c> and <c>YCellular.ENABLEDATA_NEUTRALITY</c> corresponding to the
              condition for enabling IP data services (GPRS)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.ENABLEDATA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_enableData(System.Int32)">
            <summary>
              Changes the condition for enabling IP data services (GPRS).
            <para>
              The service can be either fully deactivated, or limited to the SIM home network,
              or enabled for all partner networks (roaming). Caution: enabling data services
              on roaming networks may cause prohibitive communication costs !
            </para>
            <para>
              When data services are disabled, SMS are the only mean of communication.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YCellular.ENABLEDATA_HOMENETWORK</c>, <c>YCellular.ENABLEDATA_ROAMING</c>,
              <c>YCellular.ENABLEDATA_NEVER</c> and <c>YCellular.ENABLEDATA_NEUTRALITY</c> corresponding to the
              condition for enabling IP data services (GPRS)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_apn">
            <summary>
              Returns the Access Point Name (APN) to be used, if needed.
            <para>
              When left blank, the APN suggested by the cell operator will be used.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the Access Point Name (APN) to be used, if needed
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.APN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_apn(System.String)">
            <summary>
              Returns the Access Point Name (APN) to be used, if needed.
            <para>
              When left blank, the APN suggested by the cell operator will be used.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_apnSecret">
            <summary>
              Returns an opaque string if APN authentication parameters have been configured
              in the device, or an empty string otherwise.
            <para>
              To configure these parameters, use <c>set_apnAuth()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to an opaque string if APN authentication parameters have been configured
              in the device, or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.APNSECRET_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_pingInterval">
            <summary>
              Returns the automated connectivity check interval, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the automated connectivity check interval, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.PINGINTERVAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_pingInterval(System.Int32)">
            <summary>
              Changes the automated connectivity check interval, in seconds.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the automated connectivity check interval, in seconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_dataSent">
            <summary>
              Returns the number of bytes sent so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of bytes sent so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.DATASENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_dataSent(System.Int32)">
            <summary>
              Changes the value of the outgoing data counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the outgoing data counter
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.get_dataReceived">
            <summary>
              Returns the number of bytes received so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of bytes received so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.DATARECEIVED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_dataReceived(System.Int32)">
            <summary>
              Changes the value of the incoming data counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the incoming data counter
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.FindCellular(System.String)">
            <summary>
              Retrieves a cellular interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the cellular interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCellular.isOnline()</c> to test if the cellular interface is
              indeed online at a given time. In case of ambiguity when looking for
              a cellular interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the cellular interface, for instance
              <c>YHUBGSM1.cellular</c>.
            </param>
            <returns>
              a <c>YCellular</c> object allowing you to drive the cellular interface.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellular.registerValueCallback(YoctoLib.YCellular.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCellular.sendPUK(System.String,System.String)">
            <summary>
              Sends a PUK code to unlock the SIM card after three failed PIN code attempts, and
              setup a new PIN into the SIM card.
            <para>
              Only ten consecutive tentatives are permitted:
              after that, the SIM card will be blocked permanently without any mean of recovery
              to use it again. Note that after calling this method, you have usually to invoke
              method <c>set_pin()</c> to tell the YoctoHub which PIN to use in the future.
            </para>
            <para>
            </para>
            </summary>
            <param name="puk">
              the SIM PUK code
            </param>
            <param name="newPin">
              new PIN code to configure into the SIM card
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.set_apnAuth(System.String,System.String)">
            <summary>
              Configure authentication parameters to connect to the APN.
            <para>
              Both
              PAP and CHAP authentication are supported.
            </para>
            <para>
            </para>
            </summary>
            <param name="username">
              APN username
            </param>
            <param name="password">
              APN password
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular.clearDataCounters">
            <summary>
              Clear the transmitted data counters.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCellular._AT(System.String)">
            <summary>
              Sends an AT command to the GSM module and returns the command output.
            <para>
              The command will only execute when the GSM module is in standard
              command state, and should leave it in the exact same state.
              Use this function with great care !
            </para>
            </summary>
            <param name="cmd">
              the AT command to execute, like for instance: "+CCLK?".
            </param>
            <para>
            </para>
            <returns>
              a string with the result of the commands. Empty lines are
              automatically removed from the output.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellular.get_availableOperators">
            <summary>
              Returns the list detected cell operators in the neighborhood.
            <para>
              This function will typically take between 30 seconds to 1 minute to
              return. Note that any SIM card can usually only connect to specific
              operators. All networks returned by this function might therefore
              not be available for connection.
            </para>
            </summary>
            <returns>
              a list of string (cell operator names).
            </returns>
        </member>
        <member name="M:YoctoLib.YCellular.quickCellSurvey">
            <summary>
              Returns a list of nearby cellular antennas, as required for quick
              geolocation of the device.
            <para>
              The first cell listed is the serving
              cell, and the next ones are the neighbor cells reported by the
              serving cell.
            </para>
            </summary>
            <returns>
              a list of <c>YCellRecords</c>.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellular.decodePLMN(System.String)">
            <summary>
              Returns the cell operator brand for a given MCC/MNC pair.
            <para>
            </para>
            </summary>
            <param name="mccmnc">
              a string starting with a MCC code followed by a MNC code,
            </param>
            <returns>
              a string containing the corresponding cell operator brand name.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellular.nextCellular">
            <summary>
              Continues the enumeration of cellular interfaces started using <c>yFirstCellular()</c>.
            <para>
              Caution: You can't make any assumption about the returned cellular interfaces order.
              If you want to find a specific a cellular interface, use <c>Cellular.findCellular()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCellular</c> object, corresponding to
              a cellular interface currently online, or a <c>null</c> pointer
              if there are no more cellular interfaces to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YCellular.FirstCellular">
            <summary>
              Starts the enumeration of cellular interfaces currently accessible.
            <para>
              Use the method <c>YCellular.nextCellular()</c> to iterate on
              next cellular interfaces.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCellular</c> object, corresponding to
              the first cellular interface currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YColorLed">
            <summary>
              The <c>ColorLed</c> class allows you to drive a color LED.
            <para>
              The color can be specified using RGB coordinates as well as HSL coordinates.
              The module performs all conversions form RGB to HSL automatically. It is then
              self-evident to turn on a LED with a given hue and to progressively vary its
              saturation or lightness. If needed, you can find more information on the
              difference between RGB and HSL in the section following this one.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YColorLed.get_rgbColor">
            <summary>
              Returns the current RGB color of the LED.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current RGB color of the LED
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.RGBCOLOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.set_rgbColor(System.Int32)">
            <summary>
              Changes the current color of the LED, using an RGB color.
            <para>
              Encoding is done as follows: 0xRRGGBB.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current color of the LED, using an RGB color
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.get_hslColor">
            <summary>
              Returns the current HSL color of the LED.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current HSL color of the LED
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.HSLCOLOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.set_hslColor(System.Int32)">
            <summary>
              Changes the current color of the LED, using a color HSL.
            <para>
              Encoding is done as follows: 0xHHSSLL.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current color of the LED, using a color HSL
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.rgbMove(System.Int32,System.Int32)">
            <summary>
              Performs a smooth transition in the RGB color space between the current color and a target color.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="rgb_target">
              desired RGB color at the end of the transition
            </param>
            <param name="ms_duration">
              duration of the transition, in millisecond
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.hslMove(System.Int32,System.Int32)">
            <summary>
              Performs a smooth transition in the HSL color space between the current color and a target color.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="hsl_target">
              desired HSL color at the end of the transition
            </param>
            <param name="ms_duration">
              duration of the transition, in millisecond
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.get_rgbColorAtPowerOn">
            <summary>
              Returns the configured color to be displayed when the module is turned on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the configured color to be displayed when the module is turned on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.RGBCOLORATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.set_rgbColorAtPowerOn(System.Int32)">
            <summary>
              Changes the color that the LED displays by default when the module is turned on.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the color that the LED displays by default when the module is turned on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.get_blinkSeqSize">
            <summary>
              Returns the current length of the blinking sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current length of the blinking sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.BLINKSEQSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.get_blinkSeqMaxSize">
            <summary>
              Returns the maximum length of the blinking sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum length of the blinking sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.BLINKSEQMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.get_blinkSeqSignature">
            <summary>
              Return the blinking sequence signature.
            <para>
              Since blinking
              sequences cannot be read from the device, this can be used
              to detect if a specific blinking sequence is already
              programmed.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.BLINKSEQSIGNATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLed.FindColorLed(System.String)">
            <summary>
              Retrieves an RGB LED for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the RGB LED is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YColorLed.isOnline()</c> to test if the RGB LED is
              indeed online at a given time. In case of ambiguity when looking for
              an RGB LED by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the RGB LED, for instance
              <c>YRGBLED2.colorLed1</c>.
            </param>
            <returns>
              a <c>YColorLed</c> object allowing you to drive the RGB LED.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLed.registerValueCallback(YoctoLib.YColorLed.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YColorLed.addHslMoveToBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Add a new transition to the blinking sequence, the move will
              be performed in the HSL space.
            <para>
            </para>
            </summary>
            <param name="HSLcolor">
              desired HSL color when the transition is completed
            </param>
            <param name="msDelay">
              duration of the color transition, in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLed.addRgbMoveToBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Adds a new transition to the blinking sequence, the move is
              performed in the RGB space.
            <para>
            </para>
            </summary>
            <param name="RGBcolor">
              desired RGB color when the transition is completed
            </param>
            <param name="msDelay">
              duration of the color transition, in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLed.startBlinkSeq">
            <summary>
              Starts the preprogrammed blinking sequence.
            <para>
              The sequence is
              run in a loop until it is stopped by stopBlinkSeq or an explicit
              change.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLed.stopBlinkSeq">
            <summary>
              Stops the preprogrammed blinking sequence.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLed.resetBlinkSeq">
            <summary>
              Resets the preprogrammed blinking sequence.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLed.nextColorLed">
            <summary>
              Continues the enumeration of RGB LEDs started using <c>yFirstColorLed()</c>.
            <para>
              Caution: You can't make any assumption about the returned RGB LEDs order.
              If you want to find a specific an RGB LED, use <c>ColorLed.findColorLed()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YColorLed</c> object, corresponding to
              an RGB LED currently online, or a <c>null</c> pointer
              if there are no more RGB LEDs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLed.FirstColorLed">
            <summary>
              Starts the enumeration of RGB LEDs currently accessible.
            <para>
              Use the method <c>YColorLed.nextColorLed()</c> to iterate on
              next RGB LEDs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YColorLed</c> object, corresponding to
              the first RGB LED currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YColorLedCluster">
            <summary>
              The <c>YColorLedCluster</c> class allows you to drive a
              color LED cluster.
            <para>
              Unlike the <c>ColorLed</c> class, the <c>YColorLedCluster</c>
              class allows to handle several LEDs at once. Color changes can be done using RGB
              coordinates as well as HSL coordinates.
              The module performs all conversions form RGB to HSL automatically. It is then
              self-evident to turn on a LED with a given hue and to progressively vary its
              saturation or lightness. If needed, you can find more information on the
              difference between RGB and HSL in the section following this one.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_activeLedCount">
            <summary>
              Returns the number of LEDs currently handled by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of LEDs currently handled by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.ACTIVELEDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_activeLedCount(System.Int32)">
            <summary>
              Changes the number of LEDs currently handled by the device.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of LEDs currently handled by the device
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_ledType">
            <summary>
              Returns the RGB LED type currently handled by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YColorLedCluster.LEDTYPE_RGB</c> or <c>YColorLedCluster.LEDTYPE_RGBW</c>, according to
              the RGB LED type currently handled by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.LEDTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_ledType(System.Int32)">
            <summary>
              Changes the RGB LED type currently handled by the device.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YColorLedCluster.LEDTYPE_RGB</c> or <c>YColorLedCluster.LEDTYPE_RGBW</c>, according to
              the RGB LED type currently handled by the device
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_maxLedCount">
            <summary>
              Returns the maximum number of LEDs that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of LEDs that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.MAXLEDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_blinkSeqMaxCount">
            <summary>
              Returns the maximum number of sequences that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of sequences that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.BLINKSEQMAXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_blinkSeqMaxSize">
            <summary>
              Returns the maximum length of sequences.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum length of sequences
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.BLINKSEQMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.FindColorLedCluster(System.String)">
            <summary>
              Retrieves a RGB LED cluster for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the RGB LED cluster is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YColorLedCluster.isOnline()</c> to test if the RGB LED cluster is
              indeed online at a given time. In case of ambiguity when looking for
              a RGB LED cluster by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the RGB LED cluster, for instance
              <c>YRGBLED2.colorLedCluster</c>.
            </param>
            <returns>
              a <c>YColorLedCluster</c> object allowing you to drive the RGB LED cluster.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.registerValueCallback(YoctoLib.YColorLedCluster.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_rgbColor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the current color of consecutive LEDs in the cluster, using a RGB color.
            <para>
              Encoding is done as follows: 0xRRGGBB.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="rgbValue">
              new color.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_rgbColorAtPowerOn(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the  color at device startup of consecutive LEDs in the cluster, using a RGB color.
            <para>
              Encoding is done as follows: 0xRRGGBB. Don't forget to call <c>saveLedsConfigAtPowerOn()</c>
              to make sure the modification is saved in the device flash memory.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="rgbValue">
              new color.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_hslColorAtPowerOn(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the  color at device startup of consecutive LEDs in the cluster, using a HSL color.
            <para>
              Encoding is done as follows: 0xHHSSLL. Don't forget to call <c>saveLedsConfigAtPowerOn()</c>
              to make sure the modification is saved in the device flash memory.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="hslValue">
              new color.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_hslColor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the current color of consecutive LEDs in the cluster, using a HSL color.
            <para>
              Encoding is done as follows: 0xHHSSLL.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="hslValue">
              new color.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.rgb_move(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Allows you to modify the current color of a group of adjacent LEDs to another color, in a seamless and
              autonomous manner.
            <para>
              The transition is performed in the RGB space.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="rgbValue">
              new color (0xRRGGBB).
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.hsl_move(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Allows you to modify the current color of a group of adjacent LEDs  to another color, in a seamless and
              autonomous manner.
            <para>
              The transition is performed in the HSL space. In HSL, hue is a circular
              value (0..360°). There are always two paths to perform the transition: by increasing
              or by decreasing the hue. The module selects the shortest transition.
              If the difference is exactly 180°, the module selects the transition which increases
              the hue.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="hslValue">
              new color (0xHHSSLL).
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.addRgbMoveToBlinkSeq(System.Int32,System.Int32,System.Int32)">
            <summary>
              Adds an RGB transition to a sequence.
            <para>
              A sequence is a transition list, which can
              be executed in loop by a group of LEDs.  Sequences are persistent and are saved
              in the device flash memory as soon as the <c>saveBlinkSeq()</c> method is called.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="rgbValue">
              target color (0xRRGGBB)
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.addHslMoveToBlinkSeq(System.Int32,System.Int32,System.Int32)">
            <summary>
              Adds an HSL transition to a sequence.
            <para>
              A sequence is a transition list, which can
              be executed in loop by an group of LEDs.  Sequences are persistent and are saved
              in the device flash memory as soon as the <c>saveBlinkSeq()</c> method is called.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="hslValue">
              target color (0xHHSSLL)
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.addMirrorToBlinkSeq(System.Int32)">
            <summary>
              Adds a mirror ending to a sequence.
            <para>
              When the sequence will reach the end of the last
              transition, its running speed will automatically be reversed so that the sequence plays
              in the reverse direction, like in a mirror. After the first transition of the sequence
              is played at the end of the reverse execution, the sequence starts again in
              the initial direction.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.addJumpToBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Adds to a sequence a jump to another sequence.
            <para>
              When a pixel will reach this jump,
              it will be automatically relinked to the new sequence, and will run it starting
              from the beginning.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="linkSeqIndex">
              index of the sequence to chain.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.addUnlinkToBlinkSeq(System.Int32)">
            <summary>
              Adds a to a sequence a hard stop code.
            <para>
              When a pixel will reach this stop code,
              instead of restarting the sequence in a loop it will automatically be unlinked
              from the sequence.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.linkLedToBlinkSeq(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Links adjacent LEDs to a specific sequence.
            <para>
              These LEDs start to execute
              the sequence as soon as  startBlinkSeq is called. It is possible to add an offset
              in the execution: that way we  can have several groups of LED executing the same
              sequence, with a  temporal offset. A LED cannot be linked to more than one sequence.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="offset">
              execution offset in ms.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.linkLedToBlinkSeqAtPowerOn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Links adjacent LEDs to a specific sequence at device power-on.
            <para>
              Don't forget to configure
              the sequence auto start flag as well and call <c>saveLedsConfigAtPowerOn()</c>. It is possible to add an offset
              in the execution: that way we  can have several groups of LEDs executing the same
              sequence, with a  temporal offset. A LED cannot be linked to more than one sequence.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="offset">
              execution offset in ms.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.linkLedToPeriodicBlinkSeq(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Links adjacent LEDs to a specific sequence.
            <para>
              These LED start to execute
              the sequence as soon as  startBlinkSeq is called. This function automatically
              introduces a shift between LEDs so that the specified number of sequence periods
              appears on the group of LEDs (wave effect).
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="periods">
              number of periods to show on LEDs.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.unlinkLedFromBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Unlinks adjacent LEDs from a  sequence.
            <para>
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.startBlinkSeq(System.Int32)">
            <summary>
              Starts a sequence execution: every LED linked to that sequence starts to
              run it in a loop.
            <para>
              Note that a sequence with a zero duration can't be started.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to start.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.stopBlinkSeq(System.Int32)">
            <summary>
              Stops a sequence execution.
            <para>
              If started again, the execution
              restarts from the beginning.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to stop.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.resetBlinkSeq(System.Int32)">
            <summary>
              Stops a sequence execution and resets its contents.
            <para>
              LEDs linked to this
              sequence are not automatically updated anymore.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to reset
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_blinkSeqStateAtPowerOn(System.Int32,System.Int32)">
            <summary>
              Configures a sequence to make it start automatically at device
              startup.
            <para>
              Note that a sequence with a zero duration can't be started.
              Don't forget to call <c>saveBlinkSeq()</c> to make sure the
              modification is saved in the device flash memory.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to reset.
            </param>
            <param name="autostart">
              0 to keep the sequence turned off and 1 to start it automatically.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_blinkSeqSpeed(System.Int32,System.Int32)">
            <summary>
              Changes the execution speed of a sequence.
            <para>
              The natural execution speed is 1000 per
              thousand. If you configure a slower speed, you can play the sequence in slow-motion.
              If you set a negative speed, you can play the sequence in reverse direction.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to start.
            </param>
            <param name="speed">
              sequence running speed (-1000...1000).
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.saveLedsConfigAtPowerOn">
            <summary>
              Saves the LEDs power-on configuration.
            <para>
              This includes the start-up color or
              sequence binding for all LEDs. Warning: if some LEDs are linked to a sequence, the
              method <c>saveBlinkSeq()</c> must also be called to save the sequence definition.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.saveBlinkSeq(System.Int32)">
            <summary>
              Saves the definition of a sequence.
            <para>
              Warning: only sequence steps and flags are saved.
              to save the LEDs startup bindings, the method <c>saveLedsConfigAtPowerOn()</c>
              must be called.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to start.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_rgbColorBuffer(System.Int32,System.Byte[])">
            <summary>
              Sends a binary buffer to the LED RGB buffer, as is.
            <para>
              First three bytes are RGB components for LED specified as parameter, the
              next three bytes for the next LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_rgbColorArray(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
              Sends 24bit RGB colors (provided as a list of integers) to the LED RGB buffer, as is.
            <para>
              The first number represents the RGB value of the LED specified as parameter, the second
              number represents the RGB value of the next LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="rgbList">
              a list of 24bit RGB codes, in the form 0xRRGGBB
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.rgbArrayOfs_move(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
              Sets up a smooth RGB color transition to the specified pixel-by-pixel list of RGB
              color codes.
            <para>
              The first color code represents the target RGB value of the first LED,
              the next color code represents the target value of the next LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="rgbList">
              a list of target 24bit RGB codes, in the form 0xRRGGBB
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.rgbArray_move(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
              Sets up a smooth RGB color transition to the specified pixel-by-pixel list of RGB
              color codes.
            <para>
              The first color code represents the target RGB value of the first LED,
              the next color code represents the target value of the next LED, etc.
            </para>
            </summary>
            <param name="rgbList">
              a list of target 24bit RGB codes, in the form 0xRRGGBB
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_hslColorBuffer(System.Int32,System.Byte[])">
            <summary>
              Sends a binary buffer to the LED HSL buffer, as is.
            <para>
              First three bytes are HSL components for the LED specified as parameter, the
              next three bytes for the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.set_hslColorArray(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
              Sends 24bit HSL colors (provided as a list of integers) to the LED HSL buffer, as is.
            <para>
              The first number represents the HSL value of the LED specified as parameter, the second number represents
              the HSL value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="hslList">
              a list of 24bit HSL codes, in the form 0xHHSSLL
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.hslArray_move(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
              Sets up a smooth HSL color transition to the specified pixel-by-pixel list of HSL
              color codes.
            <para>
              The first color code represents the target HSL value of the first LED,
              the second color code represents the target value of the second LED, etc.
            </para>
            </summary>
            <param name="hslList">
              a list of target 24bit HSL codes, in the form 0xHHSSLL
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.hslArrayOfs_move(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
              Sets up a smooth HSL color transition to the specified pixel-by-pixel list of HSL
              color codes.
            <para>
              The first color code represents the target HSL value of the first LED,
              the second color code represents the target value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="hslList">
              a list of target 24bit HSL codes, in the form 0xHHSSLL
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_rgbColorBuffer(System.Int32,System.Int32)">
            <summary>
              Returns a binary buffer with content from the LED RGB buffer, as is.
            <para>
              First three bytes are RGB components for the first LED in the interval,
              the next three bytes for the second LED in the interval, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a binary buffer with RGB components of selected LEDs.
            </returns>
            <para>
              On failure, throws an exception or returns an empty binary buffer.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_rgbColorArray(System.Int32,System.Int32)">
            <summary>
              Returns a list on 24bit RGB color values with the current colors displayed on
              the RGB LEDs.
            <para>
              The first number represents the RGB value of the first LED,
              the second number represents the RGB value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a list of 24bit color codes with RGB components of selected LEDs, as 0xRRGGBB.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_rgbColorArrayAtPowerOn(System.Int32,System.Int32)">
            <summary>
              Returns a list on 24bit RGB color values with the RGB LEDs startup colors.
            <para>
              The first number represents the startup RGB value of the first LED,
              the second number represents the RGB value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED  which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a list of 24bit color codes with RGB components of selected LEDs, as 0xRRGGBB.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_linkedSeqArray(System.Int32,System.Int32)">
            <summary>
              Returns a list on sequence index for each RGB LED.
            <para>
              The first number represents the
              sequence index for the the first LED, the second number represents the sequence
              index for the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a list of integers with sequence index
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_blinkSeqSignatures(System.Int32,System.Int32)">
            <summary>
              Returns a list on 32 bit signatures for specified blinking sequences.
            <para>
              Since blinking sequences cannot be read from the device, this can be used
              to detect if a specific blinking sequence is already programmed.
            </para>
            </summary>
            <param name="seqIndex">
              index of the first blinking sequence which should be returned
            </param>
            <param name="count">
              number of blinking sequences which should be returned
            </param>
            <returns>
              a list of 32 bit integer signatures
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_blinkSeqStateSpeed(System.Int32,System.Int32)">
            <summary>
              Returns a list of integers with the current speed for specified blinking sequences.
            <para>
            </para>
            </summary>
            <param name="seqIndex">
              index of the first sequence speed which should be returned
            </param>
            <param name="count">
              number of sequence speeds which should be returned
            </param>
            <returns>
              a list of integers, 0 for sequences turned off and 1 for sequences running
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_blinkSeqStateAtPowerOn(System.Int32,System.Int32)">
            <summary>
              Returns a list of integers with the "auto-start at power on" flag state for specified blinking sequences.
            <para>
            </para>
            </summary>
            <param name="seqIndex">
              index of the first blinking sequence which should be returned
            </param>
            <param name="count">
              number of blinking sequences which should be returned
            </param>
            <returns>
              a list of integers, 0 for sequences turned off and 1 for sequences running
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.get_blinkSeqState(System.Int32,System.Int32)">
            <summary>
              Returns a list of integers with the started state for specified blinking sequences.
            <para>
            </para>
            </summary>
            <param name="seqIndex">
              index of the first blinking sequence which should be returned
            </param>
            <param name="count">
              number of blinking sequences which should be returned
            </param>
            <returns>
              a list of integers, 0 for sequences turned off and 1 for sequences running
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.nextColorLedCluster">
            <summary>
              Continues the enumeration of RGB LED clusters started using <c>yFirstColorLedCluster()</c>.
            <para>
              Caution: You can't make any assumption about the returned RGB LED clusters order.
              If you want to find a specific a RGB LED cluster, use <c>ColorLedCluster.findColorLedCluster()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YColorLedCluster</c> object, corresponding to
              a RGB LED cluster currently online, or a <c>null</c> pointer
              if there are no more RGB LED clusters to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YColorLedCluster.FirstColorLedCluster">
            <summary>
              Starts the enumeration of RGB LED clusters currently accessible.
            <para>
              Use the method <c>YColorLedCluster.nextColorLedCluster()</c> to iterate on
              next RGB LED clusters.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YColorLedCluster</c> object, corresponding to
              the first RGB LED cluster currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YCompass">
            <summary>
              The <c>YCompass</c> class allows you to read and configure Yoctopuce compass functions.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YCompass.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCompass.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCompass.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCompass.get_magneticHeading">
            <summary>
              Returns the magnetic heading, regardless of the configured bearing.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the magnetic heading, regardless of the configured bearing
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCompass.MAGNETICHEADING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCompass.FindCompass(System.String)">
            <summary>
              Retrieves a compass function for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the compass function is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCompass.isOnline()</c> to test if the compass function is
              indeed online at a given time. In case of ambiguity when looking for
              a compass function by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the compass function, for instance
              <c>Y3DMK002.compass</c>.
            </param>
            <returns>
              a <c>YCompass</c> object allowing you to drive the compass function.
            </returns>
        </member>
        <member name="M:YoctoLib.YCompass.registerValueCallback(YoctoLib.YCompass.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCompass.registerTimedReportCallback(YoctoLib.YCompass.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCompass.nextCompass">
            <summary>
              Continues the enumeration of compass functions started using <c>yFirstCompass()</c>.
            <para>
              Caution: You can't make any assumption about the returned compass functions order.
              If you want to find a specific a compass function, use <c>Compass.findCompass()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCompass</c> object, corresponding to
              a compass function currently online, or a <c>null</c> pointer
              if there are no more compass functions to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YCompass.FirstCompass">
            <summary>
              Starts the enumeration of compass functions currently accessible.
            <para>
              Use the method <c>YCompass.nextCompass()</c> to iterate on
              next compass functions.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCompass</c> object, corresponding to
              the first compass function currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YCurrent">
            <summary>
              The <c>YCurrent</c> class allows you to read and configure Yoctopuce current sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YCurrent.get_enabled">
            <summary>
              Returns the activation state of this input.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YCurrent.ENABLED_FALSE</c> or <c>YCurrent.ENABLED_TRUE</c>, according to the activation
              state of this input
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrent.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCurrent.set_enabled(System.Int32)">
            <summary>
              Changes the activation state of this voltage input.
            <para>
              When AC measurements are disabled,
              the device will always assume a DC signal, and vice-versa. When both AC and DC measurements
              are active, the device switches between AC and DC mode based on the relative amplitude
              of variations compared to the average value.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YCurrent.ENABLED_FALSE</c> or <c>YCurrent.ENABLED_TRUE</c>, according to the activation
              state of this voltage input
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCurrent.FindCurrent(System.String)">
            <summary>
              Retrieves a current sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the current sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCurrent.isOnline()</c> to test if the current sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a current sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the current sensor, for instance
              <c>YAMPMK01.current1</c>.
            </param>
            <returns>
              a <c>YCurrent</c> object allowing you to drive the current sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YCurrent.registerValueCallback(YoctoLib.YCurrent.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCurrent.registerTimedReportCallback(YoctoLib.YCurrent.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCurrent.nextCurrent">
            <summary>
              Continues the enumeration of current sensors started using <c>yFirstCurrent()</c>.
            <para>
              Caution: You can't make any assumption about the returned current sensors order.
              If you want to find a specific a current sensor, use <c>Current.findCurrent()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCurrent</c> object, corresponding to
              a current sensor currently online, or a <c>null</c> pointer
              if there are no more current sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YCurrent.FirstCurrent">
            <summary>
              Starts the enumeration of current sensors currently accessible.
            <para>
              Use the method <c>YCurrent.nextCurrent()</c> to iterate on
              next current sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCurrent</c> object, corresponding to
              the first current sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YCurrentLoopOutput">
            <summary>
              The <c>YCurrentLoopOutput</c> class allows you to drive a 4-20mA output
              by regulating the current flowing through the current loop.
            <para>
              It can also provide information about the power state of the current loop.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.set_current(System.Double)">
            <summary>
              Changes the current loop, the valid range is from 3 to 21mA.
            <para>
              If the loop is
              not properly powered, the  target current is not reached and
              loopPower is set to LOWPWR.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current loop, the valid range is from 3 to 21mA
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.get_current">
            <summary>
              Returns the loop current set point in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the loop current set point in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrentLoopOutput.CURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.set_currentAtStartUp(System.Double)">
            <summary>
              Changes the loop current at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the loop current at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.get_currentAtStartUp">
            <summary>
              Returns the current in the loop at device startup, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current in the loop at device startup, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrentLoopOutput.CURRENTATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.get_loopPower">
            <summary>
              Returns the loop powerstate.
            <para>
              POWEROK: the loop
              is powered. NOPWR: the loop in not powered. LOWPWR: the loop is not
              powered enough to maintain the current required (insufficient voltage).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YCurrentLoopOutput.LOOPPOWER_NOPWR</c>, <c>YCurrentLoopOutput.LOOPPOWER_LOWPWR</c>
              and <c>YCurrentLoopOutput.LOOPPOWER_POWEROK</c> corresponding to the loop powerstate
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrentLoopOutput.LOOPPOWER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.FindCurrentLoopOutput(System.String)">
            <summary>
              Retrieves a 4-20mA output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the 4-20mA output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCurrentLoopOutput.isOnline()</c> to test if the 4-20mA output is
              indeed online at a given time. In case of ambiguity when looking for
              a 4-20mA output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the 4-20mA output, for instance
              <c>TX420MA1.currentLoopOutput</c>.
            </param>
            <returns>
              a <c>YCurrentLoopOutput</c> object allowing you to drive the 4-20mA output.
            </returns>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.registerValueCallback(YoctoLib.YCurrentLoopOutput.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.currentMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of current flowing in the loop.
            <para>
              Any current explicit
              change cancels any ongoing transition process.
            </para>
            </summary>
            <param name="mA_target">
              new current value at the end of the transition
              (floating-point number, representing the end current in mA)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.nextCurrentLoopOutput">
            <summary>
              Continues the enumeration of 4-20mA outputs started using <c>yFirstCurrentLoopOutput()</c>.
            <para>
              Caution: You can't make any assumption about the returned 4-20mA outputs order.
              If you want to find a specific a 4-20mA output, use <c>CurrentLoopOutput.findCurrentLoopOutput()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCurrentLoopOutput</c> object, corresponding to
              a 4-20mA output currently online, or a <c>null</c> pointer
              if there are no more 4-20mA outputs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YCurrentLoopOutput.FirstCurrentLoopOutput">
            <summary>
              Starts the enumeration of 4-20mA outputs currently accessible.
            <para>
              Use the method <c>YCurrentLoopOutput.nextCurrentLoopOutput()</c> to iterate on
              next 4-20mA outputs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YCurrentLoopOutput</c> object, corresponding to
              the first 4-20mA output currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YDaisyChain">
            <summary>
              The <c>YDaisyChain</c> class can be used to verify that devices that
              are daisy-chained directly from device to device, without a hub,
              are detected properly.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YDaisyChain.get_daisyState">
            <summary>
              Returns the state of the daisy-link between modules.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDaisyChain.DAISYSTATE_READY</c>, <c>YDaisyChain.DAISYSTATE_IS_CHILD</c>,
              <c>YDaisyChain.DAISYSTATE_FIRMWARE_MISMATCH</c>, <c>YDaisyChain.DAISYSTATE_CHILD_MISSING</c> and
              <c>YDaisyChain.DAISYSTATE_CHILD_LOST</c> corresponding to the state of the daisy-link between modules
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDaisyChain.DAISYSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDaisyChain.get_childCount">
            <summary>
              Returns the number of child nodes currently detected.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of child nodes currently detected
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDaisyChain.CHILDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDaisyChain.get_requiredChildCount">
            <summary>
              Returns the number of child nodes expected in normal conditions.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of child nodes expected in normal conditions
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDaisyChain.REQUIREDCHILDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDaisyChain.set_requiredChildCount(System.Int32)">
            <summary>
              Changes the number of child nodes expected in normal conditions.
            <para>
              If the value is zero, no check is performed. If it is non-zero, the number
              child nodes is checked on startup and the status will change to error if
              the count does not match. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of child nodes expected in normal conditions
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDaisyChain.FindDaisyChain(System.String)">
            <summary>
              Retrieves a module chain for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the module chain is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDaisyChain.isOnline()</c> to test if the module chain is
              indeed online at a given time. In case of ambiguity when looking for
              a module chain by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the module chain, for instance
              <c>MyDevice.daisyChain</c>.
            </param>
            <returns>
              a <c>YDaisyChain</c> object allowing you to drive the module chain.
            </returns>
        </member>
        <member name="M:YoctoLib.YDaisyChain.registerValueCallback(YoctoLib.YDaisyChain.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YDaisyChain.nextDaisyChain">
            <summary>
              Continues the enumeration of module chains started using <c>yFirstDaisyChain()</c>.
            <para>
              Caution: You can't make any assumption about the returned module chains order.
              If you want to find a specific a module chain, use <c>DaisyChain.findDaisyChain()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDaisyChain</c> object, corresponding to
              a module chain currently online, or a <c>null</c> pointer
              if there are no more module chains to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YDaisyChain.FirstDaisyChain">
            <summary>
              Starts the enumeration of module chains currently accessible.
            <para>
              Use the method <c>YDaisyChain.nextDaisyChain()</c> to iterate on
              next module chains.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDaisyChain</c> object, corresponding to
              the first module chain currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YDigitalIO">
            <summary>
              The <c>YDigitalIO</c> class allows you drive a Yoctopuce digital input/output port.
            <para>
              It can be used to setup the direction of each channel, to read the state of each channel
              and to switch the state of each channel configures as an output.
              You can work on all channels at once, or one by one. Most functions
              use a binary representation for channels where bit 0 matches channel #0 , bit 1 matches channel
              #1 and so on. If you are not familiar with numbers binary representation, you will find more
              information here: <c>https://en.wikipedia.org/wiki/Binary_number#Representation</c>. It is also possible
              to automatically generate short pulses of a determined duration. Electrical behavior
              of each I/O can be modified (open drain and reverse polarity).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_portState">
            <summary>
              Returns the digital IO port state as an integer with each bit
              representing a channel.
            <para>
              value 0 = <c>0b00000000</c> -> all channels are OFF
              value 1 = <c>0b00000001</c> -> channel #0 is ON
              value 2 = <c>0b00000010</c> -> channel #1 is ON
              value 3 = <c>0b00000011</c> -> channels #0 and #1 are ON
              value 4 = <c>0b00000100</c> -> channel #2 is ON
              and so on...
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the digital IO port state as an integer with each bit
              representing a channel
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_portState(System.Int32)">
            <summary>
              Changes the state of all digital IO port's channels at once: the parameter
              is an integer where each bit represents a channel, with bit 0 matching channel #0.
            <para>
              To set all channels to  0 -> <c>0b00000000</c> -> parameter = 0
              To set channel #0 to 1 -> <c>0b00000001</c> -> parameter =  1
              To set channel #1 to  1 -> <c>0b00000010</c> -> parameter = 2
              To set channel #0 and #1 -> <c>0b00000011</c> -> parameter =  3
              To set channel #2 to 1 -> <c>0b00000100</c> -> parameter =  4
              an so on....
              Only channels configured as outputs will be affecter, according to the value
              configured using <c>set_portDirection</c>.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the state of all digital IO port's channels at once: the parameter
              is an integer where each bit represents a channel, with bit 0 matching channel #0
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_portDirection">
            <summary>
              Returns the I/O direction of all channels of the port (bitmap): 0 makes a bit an input, 1 makes it an output.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the I/O direction of all channels of the port (bitmap): 0 makes a bit
              an input, 1 makes it an output
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTDIRECTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_portDirection(System.Int32)">
            <summary>
              Changes the I/O direction of all channels of the port (bitmap): 0 makes a bit an input, 1 makes it an output.
            <para>
              Remember to call the <c>saveToFlash()</c> method  to make sure the setting is kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the I/O direction of all channels of the port (bitmap): 0 makes a bit
              an input, 1 makes it an output
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_portOpenDrain">
            <summary>
              Returns the electrical interface for each bit of the port.
            <para>
              For each bit set to 0  the matching I/O works in the regular,
              intuitive way, for each bit set to 1, the I/O works in reverse mode.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the electrical interface for each bit of the port
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTOPENDRAIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_portOpenDrain(System.Int32)">
            <summary>
              Changes the electrical interface for each bit of the port.
            <para>
              0 makes a bit a regular input/output, 1 makes
              it an open-drain (open-collector) input/output. Remember to call the
              <c>saveToFlash()</c> method  to make sure the setting is kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the electrical interface for each bit of the port
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_portPolarity">
            <summary>
              Returns the polarity of all the bits of the port.
            <para>
              For each bit set to 0, the matching I/O works the regular,
              intuitive way; for each bit set to 1, the I/O works in reverse mode.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the polarity of all the bits of the port
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTPOLARITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_portPolarity(System.Int32)">
            <summary>
              Changes the polarity of all the bits of the port: For each bit set to 0, the matching I/O works the regular,
              intuitive way; for each bit set to 1, the I/O works in reverse mode.
            <para>
              Remember to call the <c>saveToFlash()</c> method  to make sure the setting will be kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the polarity of all the bits of the port: For each bit set to 0, the
              matching I/O works the regular,
              intuitive way; for each bit set to 1, the I/O works in reverse mode
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_portDiags">
            <summary>
              Returns the port state diagnostics (Yocto-IO and Yocto-MaxiIO-V2 only).
            <para>
              Bit 0 indicates a shortcut on
              output 0, etc. Bit 8 indicates a power failure, and bit 9 signals overheating (overcurrent).
              During normal use, all diagnostic bits should stay clear.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the port state diagnostics (Yocto-IO and Yocto-MaxiIO-V2 only)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTDIAGS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_portSize">
            <summary>
              Returns the number of bits (i.e.
            <para>
              channels)implemented in the I/O port.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of bits (i.e
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_outputVoltage">
            <summary>
              Returns the voltage source used to drive output bits.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDigitalIO.OUTPUTVOLTAGE_USB_5V</c>, <c>YDigitalIO.OUTPUTVOLTAGE_USB_3V</c> and
              <c>YDigitalIO.OUTPUTVOLTAGE_EXT_V</c> corresponding to the voltage source used to drive output bits
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.OUTPUTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_outputVoltage(System.Int32)">
            <summary>
              Changes the voltage source used to drive output bits.
            <para>
              Remember to call the <c>saveToFlash()</c> method  to make sure the setting is kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDigitalIO.OUTPUTVOLTAGE_USB_5V</c>, <c>YDigitalIO.OUTPUTVOLTAGE_USB_3V</c> and
              <c>YDigitalIO.OUTPUTVOLTAGE_EXT_V</c> corresponding to the voltage source used to drive output bits
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.FindDigitalIO(System.String)">
            <summary>
              Retrieves a digital IO port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the digital IO port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDigitalIO.isOnline()</c> to test if the digital IO port is
              indeed online at a given time. In case of ambiguity when looking for
              a digital IO port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the digital IO port, for instance
              <c>YMINIIO0.digitalIO</c>.
            </param>
            <returns>
              a <c>YDigitalIO</c> object allowing you to drive the digital IO port.
            </returns>
        </member>
        <member name="M:YoctoLib.YDigitalIO.registerValueCallback(YoctoLib.YDigitalIO.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_bitState(System.Int32,System.Int32)">
            <summary>
              Sets a single bit (i.e.
            <para>
              channel) of the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="bitstate">
              the state of the bit (1 or 0)
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_bitState(System.Int32)">
            <summary>
              Returns the state of a single bit (i.e.
            <para>
              channel)  of the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              the bit state (0 or 1)
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.toggle_bitState(System.Int32)">
            <summary>
              Reverts a single bit (i.e.
            <para>
              channel) of the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_bitDirection(System.Int32,System.Int32)">
            <summary>
              Changes  the direction of a single bit (i.e.
            <para>
              channel) from the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="bitdirection">
              direction to set, 0 makes the bit an input, 1 makes it an output.
              Remember to call the   <c>saveToFlash()</c> method to make sure the setting is kept after a reboot.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_bitDirection(System.Int32)">
            <summary>
              Returns the direction of a single bit (i.e.
            <para>
              channel) from the I/O port (0 means the bit is an input, 1  an output).
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_bitPolarity(System.Int32,System.Int32)">
            <summary>
              Changes the polarity of a single bit from the I/O port.
            <para>
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0.
            </param>
            <param name="bitpolarity">
              polarity to set, 0 makes the I/O work in regular mode, 1 makes the I/O  works in reverse mode.
              Remember to call the   <c>saveToFlash()</c> method to make sure the setting is kept after a reboot.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_bitPolarity(System.Int32)">
            <summary>
              Returns the polarity of a single bit from the I/O port (0 means the I/O works in regular mode, 1 means the I/O  works in reverse mode).
            <para>
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.set_bitOpenDrain(System.Int32,System.Int32)">
            <summary>
              Changes  the electrical interface of a single bit from the I/O port.
            <para>
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="opendrain">
              0 makes a bit a regular input/output, 1 makes
              it an open-drain (open-collector) input/output. Remember to call the
              <c>saveToFlash()</c> method to make sure the setting is kept after a reboot.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.get_bitOpenDrain(System.Int32)">
            <summary>
              Returns the type of electrical interface of a single bit from the I/O port.
            <para>
              (0 means the bit is an input, 1  an output).
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              0 means the a bit is a regular input/output, 1 means the bit is an open-drain
              (open-collector) input/output.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.pulse(System.Int32,System.Int32)">
            <summary>
              Triggers a pulse on a single bit for a specified duration.
            <para>
              The specified bit
              will be turned to 1, and then back to 0 after the given duration.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="ms_duration">
              desired pulse duration in milliseconds. Be aware that the device time
              resolution is not guaranteed up to the millisecond.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.delayedPulse(System.Int32,System.Int32,System.Int32)">
            <summary>
              Schedules a pulse on a single bit for a specified duration.
            <para>
              The specified bit
              will be turned to 1, and then back to 0 after the given duration.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="ms_delay">
              waiting time before the pulse, in milliseconds
            </param>
            <param name="ms_duration">
              desired pulse duration in milliseconds. Be aware that the device time
              resolution is not guaranteed up to the millisecond.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDigitalIO.nextDigitalIO">
            <summary>
              Continues the enumeration of digital IO ports started using <c>yFirstDigitalIO()</c>.
            <para>
              Caution: You can't make any assumption about the returned digital IO ports order.
              If you want to find a specific a digital IO port, use <c>DigitalIO.findDigitalIO()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDigitalIO</c> object, corresponding to
              a digital IO port currently online, or a <c>null</c> pointer
              if there are no more digital IO ports to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YDigitalIO.FirstDigitalIO">
            <summary>
              Starts the enumeration of digital IO ports currently accessible.
            <para>
              Use the method <c>YDigitalIO.nextDigitalIO()</c> to iterate on
              next digital IO ports.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDigitalIO</c> object, corresponding to
              the first digital IO port currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YDisplayLayer">
            <summary>
              Each <c>DisplayLayer</c> represents an image layer containing objects
              to display (bitmaps, text, etc.).
            <para>
              The content is displayed only when
              the layer is active on the screen (and not masked by other
              overlapping layers).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.reset">
            <summary>
              Reverts the layer to its initial state (fully transparent, default settings).
            <para>
              Reinitializes the drawing pointer to the upper left position,
              and selects the most visible pen color. If you only want to erase the layer
              content, use the method <c>clear()</c> instead.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.clear">
            <summary>
              Erases the whole content of the layer (makes it fully transparent).
            <para>
              This method does not change any other attribute of the layer.
              To reinitialize the layer attributes to defaults settings, use the method
              <c>reset()</c> instead.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.selectColorPen(System.Int32)">
            <summary>
              Selects the pen color for all subsequent drawing functions,
              including text drawing.
            <para>
              The pen color is provided as an RGB value.
              For grayscale or monochrome displays, the value is
              automatically converted to the proper range.
            </para>
            </summary>
            <param name="color">
              the desired pen color, as a 24-bit RGB value
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.selectGrayPen(System.Int32)">
            <summary>
              Selects the pen gray level for all subsequent drawing functions,
              including text drawing.
            <para>
              The gray level is provided as a number between
              0 (black) and 255 (white, or whichever the lightest color is).
              For monochrome displays (without gray levels), any value
              lower than 128 is rendered as black, and any value equal
              or above to 128 is non-black.
            </para>
            </summary>
            <param name="graylevel">
              the desired gray level, from 0 to 255
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.selectEraser">
            <summary>
              Selects an eraser instead of a pen for all subsequent drawing functions,
              except for bitmap copy functions.
            <para>
              Any point drawn using the eraser
              becomes transparent (as when the layer is empty), showing the other
              layers beneath it.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.setAntialiasingMode(System.Boolean)">
            <summary>
              Enables or disables anti-aliasing for drawing oblique lines and circles.
            <para>
              Anti-aliasing provides a smoother aspect when looked from far enough,
              but it can add fuzziness when the display is looked from very close.
              At the end of the day, it is your personal choice.
              Anti-aliasing is enabled by default on grayscale and color displays,
              but you can disable it if you prefer. This setting has no effect
              on monochrome displays.
            </para>
            </summary>
            <param name="mode">
              <c>true</c> to enable anti-aliasing, <c>false</c> to
              disable it.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawPixel(System.Int32,System.Int32)">
            <summary>
              Draws a single pixel at the specified position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer, in pixels
            </param>
            <param name="y">
              the distance from top of layer, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws an empty rectangle at a specified position.
            <para>
            </para>
            </summary>
            <param name="x1">
              the distance from left of layer to the left border of the rectangle, in pixels
            </param>
            <param name="y1">
              the distance from top of layer to the top border of the rectangle, in pixels
            </param>
            <param name="x2">
              the distance from left of layer to the right border of the rectangle, in pixels
            </param>
            <param name="y2">
              the distance from top of layer to the bottom border of the rectangle, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawBar(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws a filled rectangular bar at a specified position.
            <para>
            </para>
            </summary>
            <param name="x1">
              the distance from left of layer to the left border of the rectangle, in pixels
            </param>
            <param name="y1">
              the distance from top of layer to the top border of the rectangle, in pixels
            </param>
            <param name="x2">
              the distance from left of layer to the right border of the rectangle, in pixels
            </param>
            <param name="y2">
              the distance from top of layer to the bottom border of the rectangle, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawCircle(System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws an empty circle at a specified position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the center of the circle, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the center of the circle, in pixels
            </param>
            <param name="r">
              the radius of the circle, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawDisc(System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws a filled disc at a given position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the center of the disc, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the center of the disc, in pixels
            </param>
            <param name="r">
              the radius of the disc, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.selectFont(System.String)">
            <summary>
              Selects a font to use for the next text drawing functions, by providing the name of the
              font file.
            <para>
              You can use a built-in font as well as a font file that you have previously
              uploaded to the device built-in memory. If you experience problems selecting a font
              file, check the device logs for any error message such as missing font file or bad font
              file format.
            </para>
            </summary>
            <param name="fontname">
              the font file name, embedded fonts are 8x8.yfm, Small.yfm, Medium.yfm, Large.yfm (not available on
              Yocto-MiniDisplay).
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawText(System.Int32,System.Int32,YoctoLib.YDisplayLayer.ALIGN,System.String)">
            <summary>
              Draws a text string at the specified position.
            <para>
              The point of the text that is aligned
              to the specified pixel position is called the anchor point, and can be chosen among
              several options. Text is rendered from left to right, without implicit wrapping.
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the text anchor point, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the text anchor point, in pixels
            </param>
            <param name="anchor">
              the text anchor point, chosen among the <c>YDisplayLayer.ALIGN</c> enumeration:
              <c>YDisplayLayer.ALIGN.TOP_LEFT</c>,         <c>YDisplayLayer.ALIGN.CENTER_LEFT</c>,
              <c>YDisplayLayer.ALIGN.BASELINE_LEFT</c>,    <c>YDisplayLayer.ALIGN.BOTTOM_LEFT</c>,
              <c>YDisplayLayer.ALIGN.TOP_CENTER</c>,       <c>YDisplayLayer.ALIGN.CENTER</c>,
              <c>YDisplayLayer.ALIGN.BASELINE_CENTER</c>,  <c>YDisplayLayer.ALIGN.BOTTOM_CENTER</c>,
              <c>YDisplayLayer.ALIGN.TOP_DECIMAL</c>,      <c>YDisplayLayer.ALIGN.CENTER_DECIMAL</c>,
              <c>YDisplayLayer.ALIGN.BASELINE_DECIMAL</c>, <c>YDisplayLayer.ALIGN.BOTTOM_DECIMAL</c>,
              <c>YDisplayLayer.ALIGN.TOP_RIGHT</c>,        <c>YDisplayLayer.ALIGN.CENTER_RIGHT</c>,
              <c>YDisplayLayer.ALIGN.BASELINE_RIGHT</c>,   <c>YDisplayLayer.ALIGN.BOTTOM_RIGHT</c>.
            </param>
            <param name="text">
              the text string to draw
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawImage(System.Int32,System.Int32,System.String)">
            <summary>
              Draws a GIF image at the specified position.
            <para>
              The GIF image must have been previously
              uploaded to the device built-in memory. If you experience problems using an image
              file, check the device logs for any error message such as missing image file or bad
              image file format.
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the left of the image, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the top of the image, in pixels
            </param>
            <param name="imagename">
              the GIF file name
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.drawBitmap(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
              Draws a bitmap at the specified position.
            <para>
              The bitmap is provided as a binary object,
              where each pixel maps to a bit, from left to right and from top to bottom.
              The most significant bit of each byte maps to the leftmost pixel, and the least
              significant bit maps to the rightmost pixel. Bits set to 1 are drawn using the
              layer selected pen color. Bits set to 0 are drawn using the specified background
              gray level, unless -1 is specified, in which case they are not drawn at all
              (as if transparent).
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the left of the bitmap, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the top of the bitmap, in pixels
            </param>
            <param name="w">
              the width of the bitmap, in pixels
            </param>
            <param name="bitmap">
              a binary object
            </param>
            <param name="bgcol">
              the background gray level to use for zero bits (0 = black,
              255 = white), or -1 to leave the pixels unchanged
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.moveTo(System.Int32,System.Int32)">
            <summary>
              Moves the drawing pointer of this layer to the specified position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer, in pixels
            </param>
            <param name="y">
              the distance from top of layer, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.lineTo(System.Int32,System.Int32)">
            <summary>
              Draws a line from current drawing pointer position to the specified position.
            <para>
              The specified destination pixel is included in the line. The pointer position
              is then moved to the end point of the line.
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the end point of the line, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the end point of the line, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.consoleOut(System.String)">
            <summary>
              Outputs a message in the console area, and advances the console pointer accordingly.
            <para>
              The console pointer position is automatically moved to the beginning
              of the next line when a newline character is met, or when the right margin
              is hit. When the new text to display extends below the lower margin, the
              console area is automatically scrolled up.
            </para>
            </summary>
            <param name="text">
              the message to display
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.setConsoleMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets up display margins for the <c>consoleOut</c> function.
            <para>
            </para>
            </summary>
            <param name="x1">
              the distance from left of layer to the left margin, in pixels
            </param>
            <param name="y1">
              the distance from top of layer to the top margin, in pixels
            </param>
            <param name="x2">
              the distance from left of layer to the right margin, in pixels
            </param>
            <param name="y2">
              the distance from top of layer to the bottom margin, in pixels
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.setConsoleBackground(System.Int32)">
            <summary>
              Sets up the background color used by the <c>clearConsole</c> function and by
              the console scrolling feature.
            <para>
            </para>
            </summary>
            <param name="bgcol">
              the background gray level to use when scrolling (0 = black,
              255 = white), or -1 for transparent
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.setConsoleWordWrap(System.Boolean)">
            <summary>
              Sets up the wrapping behavior used by the <c>consoleOut</c> function.
            <para>
            </para>
            </summary>
            <param name="wordwrap">
              <c>true</c> to wrap only between words,
              <c>false</c> to wrap on the last column anyway.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.clearConsole">
            <summary>
              Blanks the console area within console margins, and resets the console pointer
              to the upper left corner of the console.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.setLayerPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the position of the layer relative to the display upper left corner.
            <para>
              When smooth scrolling is used, the display offset of the layer is
              automatically updated during the next milliseconds to animate the move of the layer.
            </para>
            </summary>
            <param name="x">
              the distance from left of display to the upper left corner of the layer
            </param>
            <param name="y">
              the distance from top of display to the upper left corner of the layer
            </param>
            <param name="scrollTime">
              number of milliseconds to use for smooth scrolling, or
              0 if the scrolling should be immediate.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.hide">
            <summary>
              Hides the layer.
            <para>
              The state of the layer is preserved but the layer is not displayed
              on the screen until the next call to <c>unhide()</c>. Hiding the layer can positively
              affect the drawing speed, since it postpones the rendering until all operations are
              completed (double-buffering).
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.unhide">
            <summary>
              Shows the layer.
            <para>
              Shows the layer again after a hide command.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.get_display">
            <summary>
              Gets parent YDisplay.
            <para>
              Returns the parent YDisplay object of the current YDisplayLayer.
            </para>
            </summary>
            <returns>
              an <c>YDisplay</c> object
            </returns>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.get_displayWidth">
            <summary>
              Returns the display width, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display width, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns YDisplayLayer.DISPLAYWIDTH_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.get_displayHeight">
            <summary>
              Returns the display height, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display height, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns YDisplayLayer.DISPLAYHEIGHT_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.get_layerWidth">
            <summary>
              Returns the width of the layers to draw on, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the width of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns YDisplayLayer.LAYERWIDTH_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplayLayer.get_layerHeight">
            <summary>
              Returns the height of the layers to draw on, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the height of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns YDisplayLayer.LAYERHEIGHT_INVALID.
            </para>
        </member>
        <member name="T:YoctoLib.YDisplay">
            <summary>
              The <c>YDisplay</c> class allows to drive Yoctopuce displays.
            <para>
              Yoctopuce display interface has been designed to easily
              show information and images. The device provides built-in
              multi-layer rendering. Layers can be drawn offline, individually,
              and freely moved on the display. It can also replay recorded
              sequences (animations).
            </para>
            <para>
              In order to draw on the screen, you should use the
              <c>display.get_displayLayer</c> method to retrieve the layer(s) on
              which you want to draw, and then use methods defined in
              <c>YDisplayLayer</c> to draw on the layers.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YDisplay.get_enabled">
            <summary>
              Returns true if the screen is powered, false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YDisplay.ENABLED_FALSE</c> or <c>YDisplay.ENABLED_TRUE</c>, according to true if the
              screen is powered, false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.set_enabled(System.Int32)">
            <summary>
              Changes the power state of the display.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YDisplay.ENABLED_FALSE</c> or <c>YDisplay.ENABLED_TRUE</c>, according to the power state
              of the display
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_startupSeq">
            <summary>
              Returns the name of the sequence to play when the displayed is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the sequence to play when the displayed is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.STARTUPSEQ_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.set_startupSeq(System.String)">
            <summary>
              Changes the name of the sequence to play when the displayed is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the name of the sequence to play when the displayed is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_brightness">
            <summary>
              Returns the luminosity of the  module informative LEDs (from 0 to 100).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the luminosity of the  module informative LEDs (from 0 to 100)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.BRIGHTNESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.set_brightness(System.Int32)">
            <summary>
              Changes the brightness of the display.
            <para>
              The parameter is a value between 0 and
              100. Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the brightness of the display
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_orientation">
            <summary>
              Returns the currently selected display orientation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDisplay.ORIENTATION_LEFT</c>, <c>YDisplay.ORIENTATION_UP</c>,
              <c>YDisplay.ORIENTATION_RIGHT</c> and <c>YDisplay.ORIENTATION_DOWN</c> corresponding to the
              currently selected display orientation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.ORIENTATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.set_orientation(System.Int32)">
            <summary>
              Changes the display orientation.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDisplay.ORIENTATION_LEFT</c>, <c>YDisplay.ORIENTATION_UP</c>,
              <c>YDisplay.ORIENTATION_RIGHT</c> and <c>YDisplay.ORIENTATION_DOWN</c> corresponding to the display orientation
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_displayWidth">
            <summary>
              Returns the display width, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display width, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.DISPLAYWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_displayHeight">
            <summary>
              Returns the display height, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display height, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.DISPLAYHEIGHT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_displayType">
            <summary>
              Returns the display type: monochrome, gray levels or full color.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDisplay.DISPLAYTYPE_MONO</c>, <c>YDisplay.DISPLAYTYPE_GRAY</c> and
              <c>YDisplay.DISPLAYTYPE_RGB</c> corresponding to the display type: monochrome, gray levels or full color
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.DISPLAYTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_layerWidth">
            <summary>
              Returns the width of the layers to draw on, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the width of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.LAYERWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_layerHeight">
            <summary>
              Returns the height of the layers to draw on, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the height of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.LAYERHEIGHT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_layerCount">
            <summary>
              Returns the number of available layers to draw on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of available layers to draw on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.LAYERCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.FindDisplay(System.String)">
            <summary>
              Retrieves a display for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the display is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDisplay.isOnline()</c> to test if the display is
              indeed online at a given time. In case of ambiguity when looking for
              a display by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the display, for instance
              <c>YD128X32.display</c>.
            </param>
            <returns>
              a <c>YDisplay</c> object allowing you to drive the display.
            </returns>
        </member>
        <member name="M:YoctoLib.YDisplay.registerValueCallback(YoctoLib.YDisplay.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YDisplay.resetAll">
            <summary>
              Clears the display screen and resets all display layers to their default state.
            <para>
              Using this function in a sequence will kill the sequence play-back. Don't use that
              function to reset the display at sequence start-up.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.fade(System.Int32,System.Int32)">
            <summary>
              Smoothly changes the brightness of the screen to produce a fade-in or fade-out
              effect.
            <para>
            </para>
            </summary>
            <param name="brightness">
              the new screen brightness
            </param>
            <param name="duration">
              duration of the brightness transition, in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.newSequence">
            <summary>
              Starts to record all display commands into a sequence, for later replay.
            <para>
              The name used to store the sequence is specified when calling
              <c>saveSequence()</c>, once the recording is complete.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.saveSequence(System.String)">
            <summary>
              Stops recording display commands and saves the sequence into the specified
              file on the display internal memory.
            <para>
              The sequence can be later replayed
              using <c>playSequence()</c>.
            </para>
            </summary>
            <param name="sequenceName">
              the name of the newly created sequence
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.playSequence(System.String)">
            <summary>
              Replays a display sequence previously recorded using
              <c>newSequence()</c> and <c>saveSequence()</c>.
            <para>
            </para>
            </summary>
            <param name="sequenceName">
              the name of the newly created sequence
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.pauseSequence(System.Int32)">
            <summary>
              Waits for a specified delay (in milliseconds) before playing next
              commands in current sequence.
            <para>
              This method can be used while
              recording a display sequence, to insert a timed wait in the sequence
              (without any immediate effect). It can also be used dynamically while
              playing a pre-recorded sequence, to suspend or resume the execution of
              the sequence. To cancel a delay, call the same method with a zero delay.
            </para>
            </summary>
            <param name="delay_ms">
              the duration to wait, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.stopSequence">
            <summary>
              Stops immediately any ongoing sequence replay.
            <para>
              The display is left as is.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.upload(System.String,System.Byte[])">
            <summary>
              Uploads an arbitrary file (for instance a GIF file) to the display, to the
              specified full path name.
            <para>
              If a file already exists with the same path name,
              its content is overwritten.
            </para>
            </summary>
            <param name="pathname">
              path and name of the new file to create
            </param>
            <param name="content">
              binary buffer with the content to set
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.copyLayerContent(System.Int32,System.Int32)">
            <summary>
              Copies the whole content of a layer to another layer.
            <para>
              The color and transparency
              of all the pixels from the destination layer are set to match the source pixels.
              This method only affects the displayed content, but does not change any
              property of the layer object.
              Note that layer 0 has no transparency support (it is always completely opaque).
            </para>
            </summary>
            <param name="srcLayerId">
              the identifier of the source layer (a number in range 0..layerCount-1)
            </param>
            <param name="dstLayerId">
              the identifier of the destination layer (a number in range 0..layerCount-1)
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.swapLayerContent(System.Int32,System.Int32)">
            <summary>
              Swaps the whole content of two layers.
            <para>
              The color and transparency of all the pixels from
              the two layers are swapped. This method only affects the displayed content, but does
              not change any property of the layer objects. In particular, the visibility of each
              layer stays unchanged. When used between one hidden layer and a visible layer,
              this method makes it possible to easily implement double-buffering.
              Note that layer 0 has no transparency support (it is always completely opaque).
            </para>
            </summary>
            <param name="layerIdA">
              the first layer (a number in range 0..layerCount-1)
            </param>
            <param name="layerIdB">
              the second layer (a number in range 0..layerCount-1)
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.get_displayLayer(System.Int32)">
            <summary>
              Returns a YDisplayLayer object that can be used to draw on the specified
              layer.
            <para>
              The content is displayed only when the layer is active on the
              screen (and not masked by other overlapping layers).
            </para>
            </summary>
            <param name="layerId">
              the identifier of the layer (a number in range 0..layerCount-1)
            </param>
            <returns>
              an <c>YDisplayLayer</c> object
            </returns>
            <para>
              On failure, throws an exception or returns <c>null</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDisplay.nextDisplay">
            <summary>
              Continues the enumeration of displays started using <c>yFirstDisplay()</c>.
            <para>
              Caution: You can't make any assumption about the returned displays order.
              If you want to find a specific a display, use <c>Display.findDisplay()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDisplay</c> object, corresponding to
              a display currently online, or a <c>null</c> pointer
              if there are no more displays to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YDisplay.FirstDisplay">
            <summary>
              Starts the enumeration of displays currently accessible.
            <para>
              Use the method <c>YDisplay.nextDisplay()</c> to iterate on
              next displays.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDisplay</c> object, corresponding to
              the first display currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YDualPower">
            <summary>
              The <c>YDualPower</c> class allows you to control
              the power source to use for module functions that require high current.
            <para>
              The module can also automatically disconnect the external power
              when a voltage drop is observed on the external power source
              (external battery running out of power).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YDualPower.get_powerState">
            <summary>
              Returns the current power source for module functions that require lots of current.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDualPower.POWERSTATE_OFF</c>, <c>YDualPower.POWERSTATE_FROM_USB</c> and
              <c>YDualPower.POWERSTATE_FROM_EXT</c> corresponding to the current power source for module
              functions that require lots of current
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDualPower.POWERSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDualPower.get_powerControl">
            <summary>
              Returns the selected power source for module functions that require lots of current.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDualPower.POWERCONTROL_AUTO</c>, <c>YDualPower.POWERCONTROL_FROM_USB</c>,
              <c>YDualPower.POWERCONTROL_FROM_EXT</c> and <c>YDualPower.POWERCONTROL_OFF</c> corresponding to the
              selected power source for module functions that require lots of current
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDualPower.POWERCONTROL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDualPower.set_powerControl(System.Int32)">
            <summary>
              Changes the selected power source for module functions that require lots of current.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDualPower.POWERCONTROL_AUTO</c>, <c>YDualPower.POWERCONTROL_FROM_USB</c>,
              <c>YDualPower.POWERCONTROL_FROM_EXT</c> and <c>YDualPower.POWERCONTROL_OFF</c> corresponding to the
              selected power source for module functions that require lots of current
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YDualPower.get_extVoltage">
            <summary>
              Returns the measured voltage on the external power source, in millivolts.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measured voltage on the external power source, in millivolts
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDualPower.EXTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YDualPower.FindDualPower(System.String)">
            <summary>
              Retrieves a dual power switch for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the dual power switch is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDualPower.isOnline()</c> to test if the dual power switch is
              indeed online at a given time. In case of ambiguity when looking for
              a dual power switch by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the dual power switch, for instance
              <c>SERVORC1.dualPower</c>.
            </param>
            <returns>
              a <c>YDualPower</c> object allowing you to drive the dual power switch.
            </returns>
        </member>
        <member name="M:YoctoLib.YDualPower.registerValueCallback(YoctoLib.YDualPower.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YDualPower.nextDualPower">
            <summary>
              Continues the enumeration of dual power switches started using <c>yFirstDualPower()</c>.
            <para>
              Caution: You can't make any assumption about the returned dual power switches order.
              If you want to find a specific a dual power switch, use <c>DualPower.findDualPower()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDualPower</c> object, corresponding to
              a dual power switch currently online, or a <c>null</c> pointer
              if there are no more dual power switches to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YDualPower.FirstDualPower">
            <summary>
              Starts the enumeration of dual power switches currently accessible.
            <para>
              Use the method <c>YDualPower.nextDualPower()</c> to iterate on
              next dual power switches.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YDualPower</c> object, corresponding to
              the first dual power switch currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YFileRecord">
            <c>YFileRecord</c> objects are used to describe a file that is stored on a Yoctopuce device.
            These objects are used in particular in conjunction with the <c>YFiles</c> class.
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YFileRecord.get_name">
            <summary>
              Returns the name of the file.
            <para>
            </para>
            </summary>
            <returns>
              a string with the name of the file.
            </returns>
        </member>
        <member name="M:YoctoLib.YFileRecord.get_size">
            <summary>
              Returns the size of the file in bytes.
            <para>
            </para>
            </summary>
            <returns>
              the size of the file.
            </returns>
        </member>
        <member name="M:YoctoLib.YFileRecord.get_crc">
            <summary>
              Returns the 32-bit CRC of the file content.
            <para>
            </para>
            </summary>
            <returns>
              the 32-bit CRC of the file content.
            </returns>
        </member>
        <member name="T:YoctoLib.YFiles">
            <summary>
              The YFiles class is used to access the filesystem embedded on
              some Yoctopuce devices.
            <para>
              This filesystem makes it
              possible for instance to design a custom web UI
              (for networked devices) or to add fonts (on display devices).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YFiles.get_filesCount">
            <summary>
              Returns the number of files currently loaded in the filesystem.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of files currently loaded in the filesystem
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFiles.FILESCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.get_freeSpace">
            <summary>
              Returns the free space for uploading new files to the filesystem, in bytes.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the free space for uploading new files to the filesystem, in bytes
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFiles.FREESPACE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.FindFiles(System.String)">
            <summary>
              Retrieves a filesystem for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the filesystem is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YFiles.isOnline()</c> to test if the filesystem is
              indeed online at a given time. In case of ambiguity when looking for
              a filesystem by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the filesystem, for instance
              <c>YRGBLED2.files</c>.
            </param>
            <returns>
              a <c>YFiles</c> object allowing you to drive the filesystem.
            </returns>
        </member>
        <member name="M:YoctoLib.YFiles.registerValueCallback(YoctoLib.YFiles.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YFiles.format_fs">
            <summary>
              Reinitialize the filesystem to its clean, unfragmented, empty state.
            <para>
              All files previously uploaded are permanently lost.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.get_list(System.String)">
            <summary>
              Returns a list of YFileRecord objects that describe files currently loaded
              in the filesystem.
            <para>
            </para>
            </summary>
            <param name="pattern">
              an optional filter pattern, using star and question marks
              as wild cards. When an empty pattern is provided, all file records
              are returned.
            </param>
            <returns>
              a list of <c>YFileRecord</c> objects, containing the file path
              and name, byte size and 32-bit CRC of the file content.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.fileExist(System.String)">
            <summary>
              Test if a file exist on the filesystem of the module.
            <para>
            </para>
            </summary>
            <param name="filename">
              the file name to test.
            </param>
            <returns>
              a true if the file exist, false otherwise.
            </returns>
            <para>
              On failure, throws an exception.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.download(System.String)">
            <summary>
              Downloads the requested file and returns a binary buffer with its content.
            <para>
            </para>
            </summary>
            <param name="pathname">
              path and name of the file to download
            </param>
            <returns>
              a binary buffer with the file content
            </returns>
            <para>
              On failure, throws an exception or returns an empty content.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.upload(System.String,System.Byte[])">
            <summary>
              Uploads a file to the filesystem, to the specified full path name.
            <para>
              If a file already exists with the same path name, its content is overwritten.
            </para>
            </summary>
            <param name="pathname">
              path and name of the new file to create
            </param>
            <param name="content">
              binary buffer with the content to set
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.remove(System.String)">
            <summary>
              Deletes a file, given by its full path name, from the filesystem.
            <para>
              Because of filesystem fragmentation, deleting a file may not always
              free up the whole space used by the file. However, rewriting a file
              with the same path name will always reuse any space not freed previously.
              If you need to ensure that no space is taken by previously deleted files,
              you can use <c>format_fs</c> to fully reinitialize the filesystem.
            </para>
            </summary>
            <param name="pathname">
              path and name of the file to remove.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YFiles.nextFiles">
            <summary>
              Continues the enumeration of filesystems started using <c>yFirstFiles()</c>.
            <para>
              Caution: You can't make any assumption about the returned filesystems order.
              If you want to find a specific a filesystem, use <c>Files.findFiles()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YFiles</c> object, corresponding to
              a filesystem currently online, or a <c>null</c> pointer
              if there are no more filesystems to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YFiles.FirstFiles">
            <summary>
              Starts the enumeration of filesystems currently accessible.
            <para>
              Use the method <c>YFiles.nextFiles()</c> to iterate on
              next filesystems.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YFiles</c> object, corresponding to
              the first filesystem currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YGenericSensor">
            <summary>
              The <c>YGenericSensor</c> class allows you to read and configure Yoctopuce signal
              transducers.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, to access the autonomous datalogger.
              This class adds the ability to configure the automatic conversion between the
              measured signal and the corresponding engineering unit.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YGenericSensor.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured value.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured value
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.get_signalValue">
            <summary>
              Returns the current value of the electrical signal measured by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of the electrical signal measured by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.get_signalUnit">
            <summary>
              Returns the measuring unit of the electrical signal used by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the measuring unit of the electrical signal used by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALUNIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.get_signalRange">
            <summary>
              Returns the input signal range used by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the input signal range used by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALRANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.set_signalRange(System.String)">
            <summary>
              Changes the input signal range used by the sensor.
            <para>
              When the input signal gets out of the planned range, the output value
              will be set to an arbitrary large value, whose sign indicates the direction
              of the range overrun.
            </para>
            <para>
              For a 4-20mA sensor, the default input signal range is "4...20".
              For a 0-10V sensor, the default input signal range is "0.1...10".
              For numeric communication interfaces, the default input signal range is
              "-999999.999...999999.999".
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the input signal range used by the sensor
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.get_valueRange">
            <summary>
              Returns the physical value range measured by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the physical value range measured by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.VALUERANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.set_valueRange(System.String)">
            <summary>
              Changes the output value range, corresponding to the physical value measured
              by the sensor.
            <para>
              The default output value range is the same as the input signal
              range (1:1 mapping), but you can change it so that the function automatically
              computes the physical value encoded by the input signal. Be aware that, as a
              side effect, the range modification may automatically modify the display resolution.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the output value range, corresponding to the physical value measured
              by the sensor
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.set_signalBias(System.Double)">
            <summary>
              Changes the electric signal bias for zero shift adjustment.
            <para>
              If your electric signal reads positive when it should be zero, setup
              a positive signalBias of the same value to fix the zero shift.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the electric signal bias for zero shift adjustment
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.get_signalBias">
            <summary>
              Returns the electric signal bias for zero shift adjustment.
            <para>
              A positive bias means that the signal is over-reporting the measure,
              while a negative bias means that the signal is under-reporting the measure.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the electric signal bias for zero shift adjustment
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALBIAS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.get_signalSampling">
            <summary>
              Returns the electric signal sampling method to use.
            <para>
              The <c>HIGH_RATE</c> method uses the highest sampling frequency, without any filtering.
              The <c>HIGH_RATE_FILTERED</c> method adds a windowed 7-sample median filter.
              The <c>LOW_NOISE</c> method uses a reduced acquisition frequency to reduce noise.
              The <c>LOW_NOISE_FILTERED</c> method combines a reduced frequency with the median filter
              to get measures as stable as possible when working on a noisy signal.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE_FILTERED</c>, <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE_FILTERED</c> and <c>YGenericSensor.SIGNALSAMPLING_HIGHEST_RATE</c>
              corresponding to the electric signal sampling method to use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALSAMPLING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.set_signalSampling(System.Int32)">
            <summary>
              Changes the electric signal sampling method to use.
            <para>
              The <c>HIGH_RATE</c> method uses the highest sampling frequency, without any filtering.
              The <c>HIGH_RATE_FILTERED</c> method adds a windowed 7-sample median filter.
              The <c>LOW_NOISE</c> method uses a reduced acquisition frequency to reduce noise.
              The <c>LOW_NOISE_FILTERED</c> method combines a reduced frequency with the median filter
              to get measures as stable as possible when working on a noisy signal.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE_FILTERED</c>, <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE_FILTERED</c> and <c>YGenericSensor.SIGNALSAMPLING_HIGHEST_RATE</c>
              corresponding to the electric signal sampling method to use
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.get_enabled">
            <summary>
              Returns the activation state of this input.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YGenericSensor.ENABLED_FALSE</c> or <c>YGenericSensor.ENABLED_TRUE</c>, according to the
              activation state of this input
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.set_enabled(System.Int32)">
            <summary>
              Changes the activation state of this input.
            <para>
              When an input is disabled,
              its value is no more updated. On some devices, disabling an input can
              improve the refresh rate of the other active inputs.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YGenericSensor.ENABLED_FALSE</c> or <c>YGenericSensor.ENABLED_TRUE</c>, according to the
              activation state of this input
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.FindGenericSensor(System.String)">
            <summary>
              Retrieves a generic sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the generic sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGenericSensor.isOnline()</c> to test if the generic sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a generic sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the generic sensor, for instance
              <c>RX010V01.genericSensor1</c>.
            </param>
            <returns>
              a <c>YGenericSensor</c> object allowing you to drive the generic sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YGenericSensor.registerValueCallback(YoctoLib.YGenericSensor.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGenericSensor.registerTimedReportCallback(YoctoLib.YGenericSensor.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGenericSensor.zeroAdjust">
            <summary>
              Adjusts the signal bias so that the current signal value is need
              precisely as zero.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGenericSensor.nextGenericSensor">
            <summary>
              Continues the enumeration of generic sensors started using <c>yFirstGenericSensor()</c>.
            <para>
              Caution: You can't make any assumption about the returned generic sensors order.
              If you want to find a specific a generic sensor, use <c>GenericSensor.findGenericSensor()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGenericSensor</c> object, corresponding to
              a generic sensor currently online, or a <c>null</c> pointer
              if there are no more generic sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YGenericSensor.FirstGenericSensor">
            <summary>
              Starts the enumeration of generic sensors currently accessible.
            <para>
              Use the method <c>YGenericSensor.nextGenericSensor()</c> to iterate on
              next generic sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGenericSensor</c> object, corresponding to
              the first generic sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YGps">
            <summary>
              The <c>YGps</c> class allows you to retrieve positioning
              data from a GPS/GNSS sensor.
            <para>
              This class can provides
              complete positioning information. However, if you
              wish to define callbacks on position changes or record
              the position in the datalogger, you
              should use the <c>YLatitude</c> et <c>YLongitude</c> classes.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YGps.get_isFixed">
            <summary>
              Returns TRUE if the receiver has found enough satellites to work.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YGps.ISFIXED_FALSE</c> or <c>YGps.ISFIXED_TRUE</c>, according to TRUE if the receiver has
              found enough satellites to work
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.ISFIXED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_satCount">
            <summary>
              Returns the total count of satellites used to compute GPS position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total count of satellites used to compute GPS position
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.SATCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_satPerConst">
            <summary>
              Returns the count of visible satellites per constellation encoded
              on a 32 bit integer: bits 0..
            <para>
              5: GPS satellites count,  bits 6..11 : Glonass, bits 12..17 : Galileo.
              this value is refreshed every 5 seconds only.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the count of visible satellites per constellation encoded
              on a 32 bit integer: bits 0.
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.SATPERCONST_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_gpsRefreshRate">
            <summary>
              Returns effective GPS data refresh frequency.
            <para>
              this value is refreshed every 5 seconds only.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to effective GPS data refresh frequency
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.GPSREFRESHRATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_coordSystem">
            <summary>
              Returns the representation system used for positioning data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YGps.COORDSYSTEM_GPS_DMS</c>, <c>YGps.COORDSYSTEM_GPS_DM</c> and
              <c>YGps.COORDSYSTEM_GPS_D</c> corresponding to the representation system used for positioning data
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.COORDSYSTEM_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.set_coordSystem(System.Int32)">
            <summary>
              Changes the representation system used for positioning data.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YGps.COORDSYSTEM_GPS_DMS</c>, <c>YGps.COORDSYSTEM_GPS_DM</c> and
              <c>YGps.COORDSYSTEM_GPS_D</c> corresponding to the representation system used for positioning data
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_constellation">
            <summary>
              Returns the the satellites constellation used to compute
              positioning data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YGps.CONSTELLATION_GNSS</c>, <c>YGps.CONSTELLATION_GPS</c>,
              <c>YGps.CONSTELLATION_GLONASS</c>, <c>YGps.CONSTELLATION_GALILEO</c>,
              <c>YGps.CONSTELLATION_GPS_GLONASS</c>, <c>YGps.CONSTELLATION_GPS_GALILEO</c> and
              <c>YGps.CONSTELLATION_GLONASS_GALILEO</c> corresponding to the the satellites constellation used to compute
              positioning data
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.CONSTELLATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.set_constellation(System.Int32)">
            <summary>
              Changes the satellites constellation used to compute
              positioning data.
            <para>
              Possible  constellations are GNSS ( = all supported constellations),
              GPS, Glonass, Galileo , and the 3 possible pairs. This setting has  no effect on Yocto-GPS (V1).
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YGps.CONSTELLATION_GNSS</c>, <c>YGps.CONSTELLATION_GPS</c>,
              <c>YGps.CONSTELLATION_GLONASS</c>, <c>YGps.CONSTELLATION_GALILEO</c>,
              <c>YGps.CONSTELLATION_GPS_GLONASS</c>, <c>YGps.CONSTELLATION_GPS_GALILEO</c> and
              <c>YGps.CONSTELLATION_GLONASS_GALILEO</c> corresponding to the satellites constellation used to compute
              positioning data
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_latitude">
            <summary>
              Returns the current latitude.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current latitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.LATITUDE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_longitude">
            <summary>
              Returns the current longitude.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current longitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.LONGITUDE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_dilution">
            <summary>
              Returns the current horizontal dilution of precision,
              the smaller that number is, the better .
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current horizontal dilution of precision,
              the smaller that number is, the better
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.DILUTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_altitude">
            <summary>
              Returns the current altitude.
            <para>
              Beware:  GPS technology
              is very inaccurate regarding altitude.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current altitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.ALTITUDE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_groundSpeed">
            <summary>
              Returns the current ground speed in Km/h.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current ground speed in Km/h
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.GROUNDSPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_direction">
            <summary>
              Returns the current move bearing in degrees, zero
              is the true (geographic) north.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current move bearing in degrees, zero
              is the true (geographic) north
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.DIRECTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_unixTime">
            <summary>
              Returns the current time in Unix format (number of
              seconds elapsed since Jan 1st, 1970).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current time in Unix format (number of
              seconds elapsed since Jan 1st, 1970)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.UNIXTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_dateTime">
            <summary>
              Returns the current time in the form "YYYY/MM/DD hh:mm:ss".
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current time in the form "YYYY/MM/DD hh:mm:ss"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.DATETIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.get_utcOffset">
            <summary>
              Returns the number of seconds between current time and UTC time (time zone).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.UTCOFFSET_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.set_utcOffset(System.Int32)">
            <summary>
              Changes the number of seconds between current time and UTC time (time zone).
            <para>
              The timezone is automatically rounded to the nearest multiple of 15 minutes.
              If current UTC time is known, the current time is automatically be updated according to the selected time zone.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGps.FindGps(System.String)">
            <summary>
              Retrieves a geolocalization module for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the geolocalization module is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGps.isOnline()</c> to test if the geolocalization module is
              indeed online at a given time. In case of ambiguity when looking for
              a geolocalization module by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the geolocalization module, for instance
              <c>YGNSSMK2.gps</c>.
            </param>
            <returns>
              a <c>YGps</c> object allowing you to drive the geolocalization module.
            </returns>
        </member>
        <member name="M:YoctoLib.YGps.registerValueCallback(YoctoLib.YGps.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGps.nextGps">
            <summary>
              Continues the enumeration of geolocalization modules started using <c>yFirstGps()</c>.
            <para>
              Caution: You can't make any assumption about the returned geolocalization modules order.
              If you want to find a specific a geolocalization module, use <c>Gps.findGps()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGps</c> object, corresponding to
              a geolocalization module currently online, or a <c>null</c> pointer
              if there are no more geolocalization modules to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YGps.FirstGps">
            <summary>
              Starts the enumeration of geolocalization modules currently accessible.
            <para>
              Use the method <c>YGps.nextGps()</c> to iterate on
              next geolocalization modules.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGps</c> object, corresponding to
              the first geolocalization module currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YGroundSpeed">
            <summary>
              The <c>YGroundSpeed</c> class allows you to read and configure Yoctopuce ground speed sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YGroundSpeed.FindGroundSpeed(System.String)">
            <summary>
              Retrieves a ground speed sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the ground speed sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGroundSpeed.isOnline()</c> to test if the ground speed sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a ground speed sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the ground speed sensor, for instance
              <c>YGNSSMK2.groundSpeed</c>.
            </param>
            <returns>
              a <c>YGroundSpeed</c> object allowing you to drive the ground speed sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YGroundSpeed.registerValueCallback(YoctoLib.YGroundSpeed.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGroundSpeed.registerTimedReportCallback(YoctoLib.YGroundSpeed.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGroundSpeed.nextGroundSpeed">
            <summary>
              Continues the enumeration of ground speed sensors started using <c>yFirstGroundSpeed()</c>.
            <para>
              Caution: You can't make any assumption about the returned ground speed sensors order.
              If you want to find a specific a ground speed sensor, use <c>GroundSpeed.findGroundSpeed()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGroundSpeed</c> object, corresponding to
              a ground speed sensor currently online, or a <c>null</c> pointer
              if there are no more ground speed sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YGroundSpeed.FirstGroundSpeed">
            <summary>
              Starts the enumeration of ground speed sensors currently accessible.
            <para>
              Use the method <c>YGroundSpeed.nextGroundSpeed()</c> to iterate on
              next ground speed sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGroundSpeed</c> object, corresponding to
              the first ground speed sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YQt">
            <summary>
              The <c>YQt</c> class provides direct access to the 3D attitude estimation
              provided by Yoctopuce inertial sensors.
            <para>
              The four instances of <c>YQt</c>
              provide direct access to the individual quaternion components representing the
              orientation. It is usually not needed to use the <c>YQt</c> class
              directly, as the <c>YGyro</c> class provides a more convenient higher-level
              interface.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YQt.FindQt(System.String)">
            <summary>
              Retrieves a quaternion component for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the quaternion component is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YQt.isOnline()</c> to test if the quaternion component is
              indeed online at a given time. In case of ambiguity when looking for
              a quaternion component by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the quaternion component, for instance
              <c>Y3DMK002.qt1</c>.
            </param>
            <returns>
              a <c>YQt</c> object allowing you to drive the quaternion component.
            </returns>
        </member>
        <member name="M:YoctoLib.YQt.registerValueCallback(YoctoLib.YQt.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YQt.registerTimedReportCallback(YoctoLib.YQt.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YQt.nextQt">
            <summary>
              Continues the enumeration of quaternion components started using <c>yFirstQt()</c>.
            <para>
              Caution: You can't make any assumption about the returned quaternion components order.
              If you want to find a specific a quaternion component, use <c>Qt.findQt()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YQt</c> object, corresponding to
              a quaternion component currently online, or a <c>null</c> pointer
              if there are no more quaternion components to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YQt.FirstQt">
            <summary>
              Starts the enumeration of quaternion components currently accessible.
            <para>
              Use the method <c>YQt.nextQt()</c> to iterate on
              next quaternion components.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YQt</c> object, corresponding to
              the first quaternion component currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YGyro">
            <summary>
              The <c>YGyro</c> class allows you to read and configure Yoctopuce gyroscopes.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the possibility to access x, y and z components of the rotation
              vector separately, as well as the possibility to deal with quaternion-based
              orientation estimates.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YGyro.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGyro.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YGyro.get_xValue">
            <summary>
              Returns the angular velocity around the X axis of the device, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the angular velocity around the X axis of the device, as a
              floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.XVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGyro.get_yValue">
            <summary>
              Returns the angular velocity around the Y axis of the device, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the angular velocity around the Y axis of the device, as a
              floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.YVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGyro.get_zValue">
            <summary>
              Returns the angular velocity around the Z axis of the device, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the angular velocity around the Z axis of the device, as a
              floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.ZVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YGyro.FindGyro(System.String)">
            <summary>
              Retrieves a gyroscope for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the gyroscope is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGyro.isOnline()</c> to test if the gyroscope is
              indeed online at a given time. In case of ambiguity when looking for
              a gyroscope by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the gyroscope, for instance
              <c>Y3DMK002.gyro</c>.
            </param>
            <returns>
              a <c>YGyro</c> object allowing you to drive the gyroscope.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.registerValueCallback(YoctoLib.YGyro.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGyro.registerTimedReportCallback(YoctoLib.YGyro.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGyro.get_roll">
            <summary>
              Returns the estimated roll angle, based on the integration of
              gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The axis corresponding to the roll angle can be mapped to any
              of the device X, Y or Z physical directions using methods of
              the class <c>YRefFrame</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to roll angle
              in degrees, between -180 and +180.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.get_pitch">
            <summary>
              Returns the estimated pitch angle, based on the integration of
              gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The axis corresponding to the pitch angle can be mapped to any
              of the device X, Y or Z physical directions using methods of
              the class <c>YRefFrame</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to pitch angle
              in degrees, between -90 and +90.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.get_heading">
            <summary>
              Returns the estimated heading angle, based on the integration of
              gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The axis corresponding to the heading can be mapped to any
              of the device X, Y or Z physical directions using methods of
              the class <c>YRefFrame</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to heading
              in degrees, between 0 and 360.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.get_quaternionW">
            <summary>
              Returns the <c>w</c> component (real part) of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>w</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.get_quaternionX">
            <summary>
              Returns the <c>x</c> component of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The <c>x</c> component is
              mostly correlated with rotations on the roll axis.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>x</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.get_quaternionY">
            <summary>
              Returns the <c>y</c> component of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The <c>y</c> component is
              mostly correlated with rotations on the pitch axis.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>y</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.get_quaternionZ">
            <summary>
              Returns the <c>x</c> component of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The <c>x</c> component is
              mostly correlated with changes of heading.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>z</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.registerQuaternionCallback(YoctoLib.YGyro.YQuatCallback)">
            <summary>
              Registers a callback function that will be invoked each time that the estimated
              device orientation has changed.
            <para>
              The call frequency is typically around 95Hz during a move.
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered.
              For good responsiveness, remember to call one of these two functions periodically.
              To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to invoke, or a null pointer.
              The callback function should take five arguments:
              the YGyro object of the turning device, and the floating
              point values of the four components w, x, y and z
              (as floating-point numbers).
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGyro.registerAnglesCallback(YoctoLib.YGyro.YAnglesCallback)">
            <summary>
              Registers a callback function that will be invoked each time that the estimated
              device orientation has changed.
            <para>
              The call frequency is typically around 95Hz during a move.
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered.
              For good responsiveness, remember to call one of these two functions periodically.
              To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to invoke, or a null pointer.
              The callback function should take four arguments:
              the YGyro object of the turning device, and the floating
              point values of the three angles roll, pitch and heading
              in degrees (as floating-point numbers).
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YGyro.nextGyro">
            <summary>
              Continues the enumeration of gyroscopes started using <c>yFirstGyro()</c>.
            <para>
              Caution: You can't make any assumption about the returned gyroscopes order.
              If you want to find a specific a gyroscope, use <c>Gyro.findGyro()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGyro</c> object, corresponding to
              a gyroscope currently online, or a <c>null</c> pointer
              if there are no more gyroscopes to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YGyro.FirstGyro">
            <summary>
              Starts the enumeration of gyroscopes currently accessible.
            <para>
              Use the method <c>YGyro.nextGyro()</c> to iterate on
              next gyroscopes.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YGyro</c> object, corresponding to
              the first gyro currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YHubPort">
            <summary>
              The <c>YHubPort</c> class provides control over the power supply for slave ports
              on a YoctoHub.
            <para>
              It provide information about the device connected to it.
              The logical name of a YHubPort is always automatically set to the
              unique serial number of the Yoctopuce device connected to it.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YHubPort.get_enabled">
            <summary>
              Returns true if the YoctoHub port is powered, false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YHubPort.ENABLED_FALSE</c> or <c>YHubPort.ENABLED_TRUE</c>, according to true if the
              YoctoHub port is powered, false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHubPort.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YHubPort.set_enabled(System.Int32)">
            <summary>
              Changes the activation of the YoctoHub port.
            <para>
              If the port is enabled, the
              connected module is powered. Otherwise, port power is shut down.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YHubPort.ENABLED_FALSE</c> or <c>YHubPort.ENABLED_TRUE</c>, according to the activation
              of the YoctoHub port
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YHubPort.get_portState">
            <summary>
              Returns the current state of the YoctoHub port.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YHubPort.PORTSTATE_OFF</c>, <c>YHubPort.PORTSTATE_OVRLD</c>,
              <c>YHubPort.PORTSTATE_ON</c>, <c>YHubPort.PORTSTATE_RUN</c> and <c>YHubPort.PORTSTATE_PROG</c>
              corresponding to the current state of the YoctoHub port
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHubPort.PORTSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YHubPort.get_baudRate">
            <summary>
              Returns the current baud rate used by this YoctoHub port, in kbps.
            <para>
              The default value is 1000 kbps, but a slower rate may be used if communication
              problems are encountered.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current baud rate used by this YoctoHub port, in kbps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHubPort.BAUDRATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YHubPort.FindHubPort(System.String)">
            <summary>
              Retrieves a YoctoHub slave port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the YoctoHub slave port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YHubPort.isOnline()</c> to test if the YoctoHub slave port is
              indeed online at a given time. In case of ambiguity when looking for
              a YoctoHub slave port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the YoctoHub slave port, for instance
              <c>YHUBETH1.hubPort1</c>.
            </param>
            <returns>
              a <c>YHubPort</c> object allowing you to drive the YoctoHub slave port.
            </returns>
        </member>
        <member name="M:YoctoLib.YHubPort.registerValueCallback(YoctoLib.YHubPort.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YHubPort.nextHubPort">
            <summary>
              Continues the enumeration of YoctoHub slave ports started using <c>yFirstHubPort()</c>.
            <para>
              Caution: You can't make any assumption about the returned YoctoHub slave ports order.
              If you want to find a specific a YoctoHub slave port, use <c>HubPort.findHubPort()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YHubPort</c> object, corresponding to
              a YoctoHub slave port currently online, or a <c>null</c> pointer
              if there are no more YoctoHub slave ports to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YHubPort.FirstHubPort">
            <summary>
              Starts the enumeration of YoctoHub slave ports currently accessible.
            <para>
              Use the method <c>YHubPort.nextHubPort()</c> to iterate on
              next YoctoHub slave ports.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YHubPort</c> object, corresponding to
              the first YoctoHub slave port currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YHumidity">
            <summary>
              The <c>YHumidity</c> class allows you to read and configure Yoctopuce humidity sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YHumidity.set_unit(System.String)">
            <summary>
              Changes the primary unit for measuring humidity.
            <para>
              That unit is a string.
              If that strings starts with the letter 'g', the primary measured value is the absolute
              humidity, in g/m3. Otherwise, the primary measured value will be the relative humidity
              (RH), in per cents.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification
              must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the primary unit for measuring humidity
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YHumidity.get_relHum">
            <summary>
              Returns the current relative humidity, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current relative humidity, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHumidity.RELHUM_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YHumidity.get_absHum">
            <summary>
              Returns the current absolute humidity, in grams per cubic meter of air.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current absolute humidity, in grams per cubic meter of air
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHumidity.ABSHUM_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YHumidity.FindHumidity(System.String)">
            <summary>
              Retrieves a humidity sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the humidity sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YHumidity.isOnline()</c> to test if the humidity sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a humidity sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the humidity sensor, for instance
              <c>YCO2MK02.humidity</c>.
            </param>
            <returns>
              a <c>YHumidity</c> object allowing you to drive the humidity sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YHumidity.registerValueCallback(YoctoLib.YHumidity.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YHumidity.registerTimedReportCallback(YoctoLib.YHumidity.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YHumidity.nextHumidity">
            <summary>
              Continues the enumeration of humidity sensors started using <c>yFirstHumidity()</c>.
            <para>
              Caution: You can't make any assumption about the returned humidity sensors order.
              If you want to find a specific a humidity sensor, use <c>Humidity.findHumidity()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YHumidity</c> object, corresponding to
              a humidity sensor currently online, or a <c>null</c> pointer
              if there are no more humidity sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YHumidity.FirstHumidity">
            <summary>
              Starts the enumeration of humidity sensors currently accessible.
            <para>
              Use the method <c>YHumidity.nextHumidity()</c> to iterate on
              next humidity sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YHumidity</c> object, corresponding to
              the first humidity sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cSnoopingRecord.get_time">
            <summary>
              Returns the elapsed time, in ms, since the beginning of the preceding message.
            <para>
            </para>
            </summary>
            <returns>
              the elapsed time, in ms, since the beginning of the preceding message.
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cSnoopingRecord.get_direction">
            <summary>
              Returns the message direction (RX=0, TX=1).
            <para>
            </para>
            </summary>
            <returns>
              the message direction (RX=0, TX=1).
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cSnoopingRecord.get_message">
            <summary>
              Returns the message content.
            <para>
            </para>
            </summary>
            <returns>
              the message content.
            </returns>
        </member>
        <member name="T:YoctoLib.YI2cPort">
            <summary>
              The <c>YI2cPort</c> classe allows you to fully drive a Yoctopuce I2C port.
            <para>
              It can be used to send and receive data, and to configure communication
              parameters (baud rate, etc).
              Note that Yoctopuce I2C ports are not exposed as virtual COM ports.
              They are meant to be used in the same way as all Yoctopuce devices.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_rxCount">
            <summary>
              Returns the total number of bytes received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.RXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_txCount">
            <summary>
              Returns the total number of bytes transmitted since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes transmitted since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.TXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_errCount">
            <summary>
              Returns the total number of communication errors detected since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of communication errors detected since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.ERRCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_rxMsgCount">
            <summary>
              Returns the total number of messages received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.RXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_txMsgCount">
            <summary>
              Returns the total number of messages send since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages send since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.TXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_lastMsg">
            <summary>
              Returns the latest message fully received (for Line and Frame protocols).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest message fully received (for Line and Frame protocols)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.LASTMSG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_currentJob">
            <summary>
              Returns the name of the job file currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the job file currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.CURRENTJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.set_currentJob(System.String)">
            <summary>
              Selects a job file to run immediately.
            <para>
              If an empty string is
              given as argument, stops running current job file.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_startupJob">
            <summary>
              Returns the job file to use when the device is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the job file to use when the device is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.STARTUPJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.set_startupJob(System.String)">
            <summary>
              Changes the job to use when the device is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the job to use when the device is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_jobMaxTask">
            <summary>
              Returns the maximum number of tasks in a job that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of tasks in a job that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.JOBMAXTASK_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_jobMaxSize">
            <summary>
              Returns maximum size allowed for job files.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to maximum size allowed for job files
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.JOBMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_protocol">
            <summary>
              Returns the type of protocol used to send I2C messages, as a string.
            <para>
              Possible values are
              "Line" for messages separated by LF or
              "Char" for continuous stream of codes.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used to send I2C messages, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.PROTOCOL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.set_protocol(System.String)">
            <summary>
              Changes the type of protocol used to send I2C messages.
            <para>
              Possible values are
              "Line" for messages separated by LF or
              "Char" for continuous stream of codes.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each message sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used to send I2C messages
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_i2cVoltageLevel">
            <summary>
              Returns the voltage level used on the I2C bus.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YI2cPort.I2CVOLTAGELEVEL_OFF</c>, <c>YI2cPort.I2CVOLTAGELEVEL_3V3</c> and
              <c>YI2cPort.I2CVOLTAGELEVEL_1V8</c> corresponding to the voltage level used on the I2C bus
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.I2CVOLTAGELEVEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.set_i2cVoltageLevel(System.Int32)">
            <summary>
              Changes the voltage level used on the I2C bus.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YI2cPort.I2CVOLTAGELEVEL_OFF</c>, <c>YI2cPort.I2CVOLTAGELEVEL_3V3</c> and
              <c>YI2cPort.I2CVOLTAGELEVEL_1V8</c> corresponding to the voltage level used on the I2C bus
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.get_i2cMode">
            <summary>
              Returns the I2C port communication parameters, as a string such as
              "400kbps,2000ms,NoRestart".
            <para>
              The string includes the baud rate, the
              recovery delay after communications errors, and if needed the option
              <c>NoRestart</c> to use a Stop/Start sequence instead of the
              Restart state when performing read on the I2C bus.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the I2C port communication parameters, as a string such as
              "400kbps,2000ms,NoRestart"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.I2CMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.set_i2cMode(System.String)">
            <summary>
              Changes the I2C port communication parameters, with a string such as
              "400kbps,2000ms".
            <para>
              The string includes the baud rate, the
              recovery delay after communications errors, and if needed the option
              <c>NoRestart</c> to use a Stop/Start sequence instead of the
              Restart state when performing read on the I2C bus.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the I2C port communication parameters, with a string such as
              "400kbps,2000ms"
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.FindI2cPort(System.String)">
            <summary>
              Retrieves an I2C port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the I2C port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YI2cPort.isOnline()</c> to test if the I2C port is
              indeed online at a given time. In case of ambiguity when looking for
              an I2C port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the I2C port, for instance
              <c>YI2CMK01.i2cPort</c>.
            </param>
            <returns>
              a <c>YI2cPort</c> object allowing you to drive the I2C port.
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cPort.registerValueCallback(YoctoLib.YI2cPort.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YI2cPort.readLine">
            <summary>
              Reads a single line (or message) from the receive buffer, starting at current stream position.
            <para>
              This function is intended to be used when the serial port is configured for a message protocol,
              such as 'Line' mode or frame protocols.
            </para>
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              the function returns the oldest available line and moves the stream position just after.
              If no new full line is received, the function returns an empty line.
            </para>
            </summary>
            <returns>
              a string with a single line of text
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.readMessages(System.String,System.Int32)">
            <summary>
              Searches for incoming messages in the serial port receive buffer matching a given pattern,
              starting at current position.
            <para>
              This function will only compare and return printable characters
              in the message strings. Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              The search returns all messages matching the expression provided as argument in the buffer.
              If no matching message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="pattern">
              a limited regular expression describing the expected message format,
              or an empty string if all messages should be returned (no filtering).
              When using binary protocols, the format applies to the hexadecimal
              representation of the message.
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of strings containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.read_seek(System.Int32)">
            <summary>
              Changes the current internal stream position to the specified value.
            <para>
              This function
              does not affect the device, it only changes the value stored in the API object
              for the next read operations.
            </para>
            </summary>
            <param name="absPos">
              the absolute position index for next read operations.
            </param>
            <returns>
              nothing.
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cPort.read_tell">
            <summary>
              Returns the current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the absolute position index for next read operations.
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cPort.read_avail">
            <summary>
              Returns the number of bytes available to read in the input buffer starting from the
              current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the number of bytes available to read
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cPort.queryLine(System.String,System.Int32)">
            <summary>
              Sends a text line query to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for 'Line' protocol.
            </para>
            </summary>
            <param name="query">
              the line query to send (without CR/LF)
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next text line received after sending the text query, as a string.
              Additional lines can be obtained by calling readLine or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.queryHex(System.String,System.Int32)">
            <summary>
              Sends a binary message to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for
              Frame-based protocol.
            </para>
            </summary>
            <param name="hexString">
              the message to send, coded in hexadecimal
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next frame received after sending the message, as a hex string.
              Additional frames can be obtained by calling readHex or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.uploadJob(System.String,System.String)">
            <summary>
              Saves the job definition string (JSON data) into a job file.
            <para>
              The job file can be later enabled using <c>selectJob()</c>.
            </para>
            </summary>
            <param name="jobfile">
              name of the job file to save on the device filesystem
            </param>
            <param name="jsonDef">
              a string containing a JSON definition of the job
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.selectJob(System.String)">
            <summary>
              Load and start processing the specified job file.
            <para>
              The file must have
              been previously created using the user interface or uploaded on the
              device filesystem using the <c>uploadJob()</c> function.
            </para>
            <para>
            </para>
            </summary>
            <param name="jobfile">
              name of the job file (on the device filesystem)
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.reset">
            <summary>
              Clears the serial port buffer and resets counters to zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.i2cSendBin(System.Int32,System.Byte[])">
            <summary>
              Sends a one-way message (provided as a a binary buffer) to a device on the I2C bus.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="buff">
              the binary buffer to be sent
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.i2cSendArray(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
              Sends a one-way message (provided as a list of integer) to a device on the I2C bus.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="values">
              a list of data bytes to be sent
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.i2cSendAndReceiveBin(System.Int32,System.Byte[],System.Int32)">
            <summary>
              Sends a one-way message (provided as a a binary buffer) to a device on the I2C bus,
              then read back the specified number of bytes from device.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="buff">
              the binary buffer to be sent
            </param>
            <param name="rcvCount">
              the number of bytes to receive once the data bytes are sent
            </param>
            <returns>
              a list of bytes with the data received from slave device.
            </returns>
            <para>
              On failure, throws an exception or returns an empty binary buffer.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.i2cSendAndReceiveArray(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
              Sends a one-way message (provided as a list of integer) to a device on the I2C bus,
              then read back the specified number of bytes from device.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="values">
              a list of data bytes to be sent
            </param>
            <param name="rcvCount">
              the number of bytes to receive once the data bytes are sent
            </param>
            <returns>
              a list of bytes with the data received from slave device.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.writeStr(System.String)">
            <summary>
              Sends a text-encoded I2C code stream to the I2C bus, as is.
            <para>
              An I2C code stream is a string made of hexadecimal data bytes,
              but that may also include the I2C state transitions code:
              "{S}" to emit a start condition,
              "{R}" for a repeated start condition,
              "{P}" for a stop condition,
              "xx" for receiving a data byte,
              "{A}" to ack a data byte received and
              "{N}" to nack a data byte received.
              If a newline ("\n") is included in the stream, the message
              will be terminated and a newline will also be added to the
              receive stream.
            </para>
            </summary>
            <param name="codes">
              the code stream to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.writeLine(System.String)">
            <summary>
              Sends a text-encoded I2C code stream to the I2C bus, and terminate
              the message en relâchant le bus.
            <para>
              An I2C code stream is a string made of hexadecimal data bytes,
              but that may also include the I2C state transitions code:
              "{S}" to emit a start condition,
              "{R}" for a repeated start condition,
              "{P}" for a stop condition,
              "xx" for receiving a data byte,
              "{A}" to ack a data byte received and
              "{N}" to nack a data byte received.
              At the end of the stream, a stop condition is added if missing
              and a newline is added to the receive buffer as well.
            </para>
            </summary>
            <param name="codes">
              the code stream to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.writeByte(System.Int32)">
            <summary>
              Sends a single byte to the I2C bus.
            <para>
              Depending on the I2C bus state, the byte
              will be interpreted as an address byte or a data byte.
            </para>
            </summary>
            <param name="code">
              the byte to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.writeHex(System.String)">
            <summary>
              Sends a byte sequence (provided as a hexadecimal string) to the I2C bus.
            <para>
              Depending on the I2C bus state, the first byte will be interpreted as an
              address byte or a data byte.
            </para>
            </summary>
            <param name="hexString">
              a string of hexadecimal byte codes
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.writeBin(System.Byte[])">
            <summary>
              Sends a binary buffer to the I2C bus, as is.
            <para>
              Depending on the I2C bus state, the first byte will be interpreted
              as an address byte or a data byte.
            </para>
            </summary>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.writeArray(System.Collections.Generic.List{System.Int32})">
            <summary>
              Sends a byte sequence (provided as a list of bytes) to the I2C bus.
            <para>
              Depending on the I2C bus state, the first byte will be interpreted as an
              address byte or a data byte.
            </para>
            </summary>
            <param name="byteList">
              a list of byte codes
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.snoopMessages(System.Int32)">
            <summary>
              Retrieves messages (both direction) in the I2C port buffer, starting at current position.
            <para>
            </para>
            <para>
              If no message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of <c>YI2cSnoopingRecord</c> objects containing the messages found, if any.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YI2cPort.nextI2cPort">
            <summary>
              Continues the enumeration of I2C ports started using <c>yFirstI2cPort()</c>.
            <para>
              Caution: You can't make any assumption about the returned I2C ports order.
              If you want to find a specific an I2C port, use <c>I2cPort.findI2cPort()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YI2cPort</c> object, corresponding to
              an I2C port currently online, or a <c>null</c> pointer
              if there are no more I2C ports to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YI2cPort.FirstI2cPort">
            <summary>
              Starts the enumeration of I2C ports currently accessible.
            <para>
              Use the method <c>YI2cPort.nextI2cPort()</c> to iterate on
              next I2C ports.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YI2cPort</c> object, corresponding to
              the first I2C port currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YLatitude">
            <summary>
              The <c>YLatitude</c> class allows you to read and configure Yoctopuce latitude sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YLatitude.FindLatitude(System.String)">
            <summary>
              Retrieves a latitude sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the latitude sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLatitude.isOnline()</c> to test if the latitude sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a latitude sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the latitude sensor, for instance
              <c>YGNSSMK2.latitude</c>.
            </param>
            <returns>
              a <c>YLatitude</c> object allowing you to drive the latitude sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YLatitude.registerValueCallback(YoctoLib.YLatitude.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YLatitude.registerTimedReportCallback(YoctoLib.YLatitude.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YLatitude.nextLatitude">
            <summary>
              Continues the enumeration of latitude sensors started using <c>yFirstLatitude()</c>.
            <para>
              Caution: You can't make any assumption about the returned latitude sensors order.
              If you want to find a specific a latitude sensor, use <c>Latitude.findLatitude()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLatitude</c> object, corresponding to
              a latitude sensor currently online, or a <c>null</c> pointer
              if there are no more latitude sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YLatitude.FirstLatitude">
            <summary>
              Starts the enumeration of latitude sensors currently accessible.
            <para>
              Use the method <c>YLatitude.nextLatitude()</c> to iterate on
              next latitude sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLatitude</c> object, corresponding to
              the first latitude sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YLed">
            <summary>
              The <c>YLed</c> class allows you to drive a monocolor LED.
            <para>
              You can not only to drive the intensity of the LED, but also to
              have it blink at various preset frequencies.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YLed.get_power">
            <summary>
              Returns the current LED state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YLed.POWER_OFF</c> or <c>YLed.POWER_ON</c>, according to the current LED state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLed.POWER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YLed.set_power(System.Int32)">
            <summary>
              Changes the state of the LED.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YLed.POWER_OFF</c> or <c>YLed.POWER_ON</c>, according to the state of the LED
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YLed.get_luminosity">
            <summary>
              Returns the current LED intensity (in per cent).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current LED intensity (in per cent)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLed.LUMINOSITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YLed.set_luminosity(System.Int32)">
            <summary>
              Changes the current LED intensity (in per cent).
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current LED intensity (in per cent)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YLed.get_blinking">
            <summary>
              Returns the current LED signaling mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YLed.BLINKING_STILL</c>, <c>YLed.BLINKING_RELAX</c>, <c>YLed.BLINKING_AWARE</c>,
              <c>YLed.BLINKING_RUN</c>, <c>YLed.BLINKING_CALL</c> and <c>YLed.BLINKING_PANIC</c> corresponding to
              the current LED signaling mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLed.BLINKING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YLed.set_blinking(System.Int32)">
            <summary>
              Changes the current LED signaling mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YLed.BLINKING_STILL</c>, <c>YLed.BLINKING_RELAX</c>, <c>YLed.BLINKING_AWARE</c>,
              <c>YLed.BLINKING_RUN</c>, <c>YLed.BLINKING_CALL</c> and <c>YLed.BLINKING_PANIC</c> corresponding to
              the current LED signaling mode
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YLed.FindLed(System.String)">
            <summary>
              Retrieves a monochrome LED for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the monochrome LED is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLed.isOnline()</c> to test if the monochrome LED is
              indeed online at a given time. In case of ambiguity when looking for
              a monochrome LED by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the monochrome LED, for instance
              <c>YBUZZER2.led1</c>.
            </param>
            <returns>
              a <c>YLed</c> object allowing you to drive the monochrome LED.
            </returns>
        </member>
        <member name="M:YoctoLib.YLed.registerValueCallback(YoctoLib.YLed.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YLed.nextLed">
            <summary>
              Continues the enumeration of monochrome LEDs started using <c>yFirstLed()</c>.
            <para>
              Caution: You can't make any assumption about the returned monochrome LEDs order.
              If you want to find a specific a monochrome LED, use <c>Led.findLed()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLed</c> object, corresponding to
              a monochrome LED currently online, or a <c>null</c> pointer
              if there are no more monochrome LEDs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YLed.FirstLed">
            <summary>
              Starts the enumeration of monochrome LEDs currently accessible.
            <para>
              Use the method <c>YLed.nextLed()</c> to iterate on
              next monochrome LEDs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLed</c> object, corresponding to
              the first monochrome LED currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YLightSensor">
            <summary>
              The <c>YLightSensor</c> class allows you to read and configure Yoctopuce light sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to easily perform a one-point linear calibration
              to compensate the effect of a glass or filter placed in front of the sensor.
              For some light sensors with several working modes, this class can select the
              desired working mode.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YLightSensor.calibrate(System.Double)">
            <summary>
              Changes the sensor-specific calibration parameter so that the current value
              matches a desired target (linear scaling).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="calibratedVal">
              the desired target value.
            </param>
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YLightSensor.get_measureType">
            <summary>
              Returns the type of light measure.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YLightSensor.MEASURETYPE_HUMAN_EYE</c>, <c>YLightSensor.MEASURETYPE_WIDE_SPECTRUM</c>,
              <c>YLightSensor.MEASURETYPE_INFRARED</c>, <c>YLightSensor.MEASURETYPE_HIGH_RATE</c>,
              <c>YLightSensor.MEASURETYPE_HIGH_ENERGY</c> and <c>YLightSensor.MEASURETYPE_HIGH_RESOLUTION</c>
              corresponding to the type of light measure
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLightSensor.MEASURETYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YLightSensor.set_measureType(System.Int32)">
            <summary>
              Changes the light sensor type used in the device.
            <para>
              The measure can either
              approximate the response of the human eye, focus on a specific light
              spectrum, depending on the capabilities of the light-sensitive cell.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YLightSensor.MEASURETYPE_HUMAN_EYE</c>, <c>YLightSensor.MEASURETYPE_WIDE_SPECTRUM</c>,
              <c>YLightSensor.MEASURETYPE_INFRARED</c>, <c>YLightSensor.MEASURETYPE_HIGH_RATE</c>,
              <c>YLightSensor.MEASURETYPE_HIGH_ENERGY</c> and <c>YLightSensor.MEASURETYPE_HIGH_RESOLUTION</c>
              corresponding to the light sensor type used in the device
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YLightSensor.FindLightSensor(System.String)">
            <summary>
              Retrieves a light sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the light sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLightSensor.isOnline()</c> to test if the light sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a light sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the light sensor, for instance
              <c>LIGHTMK3.lightSensor</c>.
            </param>
            <returns>
              a <c>YLightSensor</c> object allowing you to drive the light sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YLightSensor.registerValueCallback(YoctoLib.YLightSensor.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YLightSensor.registerTimedReportCallback(YoctoLib.YLightSensor.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YLightSensor.nextLightSensor">
            <summary>
              Continues the enumeration of light sensors started using <c>yFirstLightSensor()</c>.
            <para>
              Caution: You can't make any assumption about the returned light sensors order.
              If you want to find a specific a light sensor, use <c>LightSensor.findLightSensor()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLightSensor</c> object, corresponding to
              a light sensor currently online, or a <c>null</c> pointer
              if there are no more light sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YLightSensor.FirstLightSensor">
            <summary>
              Starts the enumeration of light sensors currently accessible.
            <para>
              Use the method <c>YLightSensor.nextLightSensor()</c> to iterate on
              next light sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLightSensor</c> object, corresponding to
              the first light sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YLongitude">
            <summary>
              The <c>YLongitude</c> class allows you to read and configure Yoctopuce longitude sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YLongitude.FindLongitude(System.String)">
            <summary>
              Retrieves a longitude sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the longitude sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLongitude.isOnline()</c> to test if the longitude sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a longitude sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the longitude sensor, for instance
              <c>YGNSSMK2.longitude</c>.
            </param>
            <returns>
              a <c>YLongitude</c> object allowing you to drive the longitude sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YLongitude.registerValueCallback(YoctoLib.YLongitude.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YLongitude.registerTimedReportCallback(YoctoLib.YLongitude.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YLongitude.nextLongitude">
            <summary>
              Continues the enumeration of longitude sensors started using <c>yFirstLongitude()</c>.
            <para>
              Caution: You can't make any assumption about the returned longitude sensors order.
              If you want to find a specific a longitude sensor, use <c>Longitude.findLongitude()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLongitude</c> object, corresponding to
              a longitude sensor currently online, or a <c>null</c> pointer
              if there are no more longitude sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YLongitude.FirstLongitude">
            <summary>
              Starts the enumeration of longitude sensors currently accessible.
            <para>
              Use the method <c>YLongitude.nextLongitude()</c> to iterate on
              next longitude sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YLongitude</c> object, corresponding to
              the first longitude sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YMagnetometer">
            <summary>
              The <c>YSensor</c> class is the parent class for all Yoctopuce sensor types.
            <para>
              It can be
              used to read the current value and unit of any sensor, read the min/max
              value, configure autonomous recording frequency and access recorded data.
              It also provide a function to register a callback invoked each time the
              observed value changes, or at a predefined interval. Using this class rather
              than a specific subclass makes it possible to create generic applications
              that work with any Yoctopuce sensor, even those that do not yet exist.
              Note: The <c>YAnButton</c> class is the only analog input which does not inherit
              from <c>YSensor</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMagnetometer.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMagnetometer.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMagnetometer.get_xValue">
            <summary>
              Returns the X component of the magnetic field, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the X component of the magnetic field, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.XVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMagnetometer.get_yValue">
            <summary>
              Returns the Y component of the magnetic field, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Y component of the magnetic field, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.YVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMagnetometer.get_zValue">
            <summary>
              Returns the Z component of the magnetic field, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Z component of the magnetic field, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.ZVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMagnetometer.FindMagnetometer(System.String)">
            <summary>
              Retrieves a magnetometer for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the magnetometer is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMagnetometer.isOnline()</c> to test if the magnetometer is
              indeed online at a given time. In case of ambiguity when looking for
              a magnetometer by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the magnetometer, for instance
              <c>Y3DMK002.magnetometer</c>.
            </param>
            <returns>
              a <c>YMagnetometer</c> object allowing you to drive the magnetometer.
            </returns>
        </member>
        <member name="M:YoctoLib.YMagnetometer.registerValueCallback(YoctoLib.YMagnetometer.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMagnetometer.registerTimedReportCallback(YoctoLib.YMagnetometer.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMagnetometer.nextMagnetometer">
            <summary>
              Continues the enumeration of magnetometers started using <c>yFirstMagnetometer()</c>.
            <para>
              Caution: You can't make any assumption about the returned magnetometers order.
              If you want to find a specific a magnetometer, use <c>Magnetometer.findMagnetometer()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMagnetometer</c> object, corresponding to
              a magnetometer currently online, or a <c>null</c> pointer
              if there are no more magnetometers to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YMagnetometer.FirstMagnetometer">
            <summary>
              Starts the enumeration of magnetometers currently accessible.
            <para>
              Use the method <c>YMagnetometer.nextMagnetometer()</c> to iterate on
              next magnetometers.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMagnetometer</c> object, corresponding to
              the first magnetometer currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YSms">
            <c>YSms</c> objects are used to describe an SMS message, received or to be sent.
            These objects are used in particular in conjunction with the <c>YMessageBox</c> class.
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YSms.get_textData">
            <summary>
              Returns the content of the message.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string with the content of the message.
            </returns>
        </member>
        <member name="M:YoctoLib.YSms.addText(System.String)">
            <summary>
              Add a regular text to the SMS.
            <para>
              This function support messages
              of more than 160 characters. ISO-latin accented characters
              are supported. For messages with special unicode characters such as asian
              characters and emoticons, use the  <c>addUnicodeData</c> method.
            </para>
            <para>
            </para>
            </summary>
            <param name="val">
              the text to be sent in the message
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoLib.YSms.addUnicodeData(System.Collections.Generic.List{System.Int32})">
            <summary>
              Add a unicode text to the SMS.
            <para>
              This function support messages
              of more than 160 characters, using SMS concatenation.
            </para>
            <para>
            </para>
            </summary>
            <param name="val">
              an array of special unicode characters
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoLib.YSms.send">
            <summary>
              Sends the SMS to the recipient.
            <para>
              Messages of more than 160 characters are supported
              using SMS concatenation.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoLib.YMessageBox">
            <summary>
              The <c>YMessageBox</c> class provides SMS sending and receiving capability for
              GSM-enabled Yoctopuce devices.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMessageBox.get_slotsInUse">
            <summary>
              Returns the number of message storage slots currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of message storage slots currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.SLOTSINUSE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.get_slotsCount">
            <summary>
              Returns the total number of message storage slots on the SIM card.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of message storage slots on the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.SLOTSCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.get_pduSent">
            <summary>
              Returns the number of SMS units sent so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of SMS units sent so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.PDUSENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.set_pduSent(System.Int32)">
            <summary>
              Changes the value of the outgoing SMS units counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the outgoing SMS units counter
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.get_pduReceived">
            <summary>
              Returns the number of SMS units received so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of SMS units received so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.PDURECEIVED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.set_pduReceived(System.Int32)">
            <summary>
              Changes the value of the incoming SMS units counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the incoming SMS units counter
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.FindMessageBox(System.String)">
            <summary>
              Retrieves a SMS message box interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the SMS message box interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMessageBox.isOnline()</c> to test if the SMS message box interface is
              indeed online at a given time. In case of ambiguity when looking for
              a SMS message box interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the SMS message box interface, for instance
              <c>YHUBGSM1.messageBox</c>.
            </param>
            <returns>
              a <c>YMessageBox</c> object allowing you to drive the SMS message box interface.
            </returns>
        </member>
        <member name="M:YoctoLib.YMessageBox.registerValueCallback(YoctoLib.YMessageBox.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMessageBox.clearPduCounters">
            <summary>
              Clear the SMS units counters.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.sendTextMessage(System.String,System.String)">
            <summary>
              Sends a regular text SMS, with standard parameters.
            <para>
              This function can send messages
              of more than 160 characters, using SMS concatenation. ISO-latin accented characters
              are supported. For sending messages with special unicode characters such as asian
              characters and emoticons, use <c>newMessage</c> to create a new message and define
              the content of using methods <c>addText</c> and <c>addUnicodeData</c>.
            </para>
            </summary>
            <param name="recipient">
              a text string with the recipient phone number, either as a
              national number, or in international format starting with a plus sign
            </param>
            <param name="message">
              the text to be sent in the message
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.sendFlashMessage(System.String,System.String)">
            <summary>
              Sends a Flash SMS (class 0 message).
            <para>
              Flash messages are displayed on the handset
              immediately and are usually not saved on the SIM card. This function can send messages
              of more than 160 characters, using SMS concatenation. ISO-latin accented characters
              are supported. For sending messages with special unicode characters such as asian
              characters and emoticons, use <c>newMessage</c> to create a new message and define
              the content of using methods <c>addText</c> et <c>addUnicodeData</c>.
            </para>
            </summary>
            <param name="recipient">
              a text string with the recipient phone number, either as a
              national number, or in international format starting with a plus sign
            </param>
            <param name="message">
              the text to be sent in the message
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.newMessage(System.String)">
            <summary>
              Creates a new empty SMS message, to be configured and sent later on.
            <para>
            </para>
            </summary>
            <param name="recipient">
              a text string with the recipient phone number, either as a
              national number, or in international format starting with a plus sign
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.get_messages">
            <summary>
              Returns the list of messages received and not deleted.
            <para>
              This function
              will automatically decode concatenated SMS.
            </para>
            </summary>
            <returns>
              an YSms object list.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="M:YoctoLib.YMessageBox.nextMessageBox">
            <summary>
              Continues the enumeration of SMS message box interfaces started using <c>yFirstMessageBox()</c>.
            <para>
              Caution: You can't make any assumption about the returned SMS message box interfaces order.
              If you want to find a specific a SMS message box interface, use <c>MessageBox.findMessageBox()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMessageBox</c> object, corresponding to
              a SMS message box interface currently online, or a <c>null</c> pointer
              if there are no more SMS message box interfaces to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YMessageBox.FirstMessageBox">
            <summary>
              Starts the enumeration of SMS message box interfaces currently accessible.
            <para>
              Use the method <c>YMessageBox.nextMessageBox()</c> to iterate on
              next SMS message box interfaces.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMessageBox</c> object, corresponding to
              the first SMS message box interface currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YMotor">
            <summary>
              The <c>YMotor</c> class allows you to drive a DC motor.
            <para>
              It can be used to configure the
              power sent to the motor to make it turn both ways, but also to drive accelerations
              and decelerations. The motor will then accelerate automatically: you will not
              have to monitor it. The API also allows to slow down the motor by shortening
              its terminals: the motor will then act as an electromagnetic brake.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMotor.get_motorStatus">
            <summary>
              Return the controller state.
            <para>
              Possible states are:
              IDLE   when the motor is stopped/in free wheel, ready to start;
              FORWD  when the controller is driving the motor forward;
              BACKWD when the controller is driving the motor backward;
              BRAKE  when the controller is braking;
              LOVOLT when the controller has detected a low voltage condition;
              HICURR when the controller has detected an over current condition;
              HIHEAT when the controller has detected an overheat condition;
              FAILSF when the controller switched on the failsafe security.
            </para>
            <para>
              When an error condition occurred (LOVOLT, HICURR, HIHEAT, FAILSF), the controller
              status must be explicitly reset using the <c>resetStatus</c> function.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YMotor.MOTORSTATUS_IDLE</c>, <c>YMotor.MOTORSTATUS_BRAKE</c>,
              <c>YMotor.MOTORSTATUS_FORWD</c>, <c>YMotor.MOTORSTATUS_BACKWD</c>,
              <c>YMotor.MOTORSTATUS_LOVOLT</c>, <c>YMotor.MOTORSTATUS_HICURR</c>,
              <c>YMotor.MOTORSTATUS_HIHEAT</c> and <c>YMotor.MOTORSTATUS_FAILSF</c>
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.MOTORSTATUS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.set_drivingForce(System.Double)">
            <summary>
              Changes immediately the power sent to the motor.
            <para>
              The value is a percentage between -100%
              to 100%. If you want go easy on your mechanics and avoid excessive current consumption,
              try to avoid brutal power changes. For example, immediate transition from forward full power
              to reverse full power is a very bad idea. Each time the driving power is modified, the
              braking power is set to zero.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to immediately the power sent to the motor
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.get_drivingForce">
            <summary>
              Returns the power sent to the motor, as a percentage between -100% and +100%.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the power sent to the motor, as a percentage between -100% and +100%
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.DRIVINGFORCE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.set_brakingForce(System.Double)">
            <summary>
              Changes immediately the braking force applied to the motor (in percents).
            <para>
              The value 0 corresponds to no braking (free wheel). When the braking force
              is changed, the driving power is set to zero. The value is a percentage.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to immediately the braking force applied to the motor (in percents)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.get_brakingForce">
            <summary>
              Returns the braking force applied to the motor, as a percentage.
            <para>
              The value 0 corresponds to no braking (free wheel).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the braking force applied to the motor, as a percentage
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.BRAKINGFORCE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.set_cutOffVoltage(System.Double)">
            <summary>
              Changes the threshold voltage under which the controller automatically switches to error state
              and prevents further current draw.
            <para>
              This setting prevent damage to a battery that can
              occur when drawing current from an "empty" battery.
              Note that whatever the cutoff threshold, the controller switches to undervoltage
              error state if the power supply goes under 3V, even for a very brief time.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the threshold voltage under which the controller
              automatically switches to error state
              and prevents further current draw
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.get_cutOffVoltage">
            <summary>
              Returns the threshold voltage under which the controller automatically switches to error state
              and prevents further current draw.
            <para>
              This setting prevents damage to a battery that can
              occur when drawing current from an "empty" battery.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the threshold voltage under which the controller
              automatically switches to error state
              and prevents further current draw
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.CUTOFFVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.get_overCurrentLimit">
            <summary>
              Returns the current threshold (in mA) above which the controller automatically
              switches to error state.
            <para>
              A zero value means that there is no limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current threshold (in mA) above which the controller automatically
              switches to error state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.OVERCURRENTLIMIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.set_overCurrentLimit(System.Int32)">
            <summary>
              Changes the current threshold (in mA) above which the controller automatically
              switches to error state.
            <para>
              A zero value means that there is no limit. Note that whatever the
              current limit is, the controller switches to OVERCURRENT status if the current
              goes above 32A, even for a very brief time. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current threshold (in mA) above which the controller automatically
              switches to error state
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.set_frequency(System.Double)">
            <summary>
              Changes the PWM frequency used to control the motor.
            <para>
              Low frequency is usually
              more efficient and may help the motor to start, but an audible noise might be
              generated. A higher frequency reduces the noise, but more energy is converted
              into heat. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM frequency used to control the motor
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.get_frequency">
            <summary>
              Returns the PWM frequency used to control the motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM frequency used to control the motor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.get_starterTime">
            <summary>
              Returns the duration (in ms) during which the motor is driven at low frequency to help
              it start up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the duration (in ms) during which the motor is driven at low frequency to help
              it start up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.STARTERTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.set_starterTime(System.Int32)">
            <summary>
              Changes the duration (in ms) during which the motor is driven at low frequency to help
              it start up.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the duration (in ms) during which the motor is driven at low frequency to help
              it start up
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.get_failSafeTimeout">
            <summary>
              Returns the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process.
            <para>
              When this delay has elapsed,
              the controller automatically stops the motor and switches to FAILSAFE error.
              Failsafe security is disabled when the value is zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.FAILSAFETIMEOUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.set_failSafeTimeout(System.Int32)">
            <summary>
              Changes the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process.
            <para>
              When this delay has elapsed,
              the controller automatically stops the motor and switches to FAILSAFE error.
              Failsafe security is disabled when the value is zero.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.FindMotor(System.String)">
            <summary>
              Retrieves a motor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the motor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMotor.isOnline()</c> to test if the motor is
              indeed online at a given time. In case of ambiguity when looking for
              a motor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the motor, for instance
              <c>MOTORCTL.motor</c>.
            </param>
            <returns>
              a <c>YMotor</c> object allowing you to drive the motor.
            </returns>
        </member>
        <member name="M:YoctoLib.YMotor.registerValueCallback(YoctoLib.YMotor.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMotor.keepALive">
            <summary>
              Rearms the controller failsafe timer.
            <para>
              When the motor is running and the failsafe feature
              is active, this function should be called periodically to prove that the control process
              is running properly. Otherwise, the motor is automatically stopped after the specified
              timeout. Calling a motor <i>set</i> function implicitly rearms the failsafe timer.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMotor.resetStatus">
            <summary>
              Reset the controller state to IDLE.
            <para>
              This function must be invoked explicitly
              after any error condition is signaled.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMotor.drivingForceMove(System.Double,System.Int32)">
            <summary>
              Changes progressively the power sent to the motor for a specific duration.
            <para>
            </para>
            </summary>
            <param name="targetPower">
              desired motor power, in percents (between -100% and +100%)
            </param>
            <param name="delay">
              duration (in ms) of the transition
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.brakingForceMove(System.Double,System.Int32)">
            <summary>
              Changes progressively the braking force applied to the motor for a specific duration.
            <para>
            </para>
            </summary>
            <param name="targetPower">
              desired braking force, in percents
            </param>
            <param name="delay">
              duration (in ms) of the transition
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMotor.nextMotor">
            <summary>
              Continues the enumeration of motors started using <c>yFirstMotor()</c>.
            <para>
              Caution: You can't make any assumption about the returned motors order.
              If you want to find a specific a motor, use <c>Motor.findMotor()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMotor</c> object, corresponding to
              a motor currently online, or a <c>null</c> pointer
              if there are no more motors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YMotor.FirstMotor">
            <summary>
              Starts the enumeration of motors currently accessible.
            <para>
              Use the method <c>YMotor.nextMotor()</c> to iterate on
              next motors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMotor</c> object, corresponding to
              the first motor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YMultiAxisController">
            <summary>
              The <c>YMultiAxisController</c> class allows you to drive multiple stepper motors
              synchronously.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.get_nAxis">
            <summary>
              Returns the number of synchronized controllers.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of synchronized controllers
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiAxisController.NAXIS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.set_nAxis(System.Int32)">
            <summary>
              Changes the number of synchronized controllers.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of synchronized controllers
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.get_globalState">
            <summary>
              Returns the stepper motor set overall state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YMultiAxisController.GLOBALSTATE_ABSENT</c>,
              <c>YMultiAxisController.GLOBALSTATE_ALERT</c>, <c>YMultiAxisController.GLOBALSTATE_HI_Z</c>,
              <c>YMultiAxisController.GLOBALSTATE_STOP</c>, <c>YMultiAxisController.GLOBALSTATE_RUN</c> and
              <c>YMultiAxisController.GLOBALSTATE_BATCH</c> corresponding to the stepper motor set overall state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiAxisController.GLOBALSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.FindMultiAxisController(System.String)">
            <summary>
              Retrieves a multi-axis controller for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the multi-axis controller is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMultiAxisController.isOnline()</c> to test if the multi-axis controller is
              indeed online at a given time. In case of ambiguity when looking for
              a multi-axis controller by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the multi-axis controller, for instance
              <c>MyDevice.multiAxisController</c>.
            </param>
            <returns>
              a <c>YMultiAxisController</c> object allowing you to drive the multi-axis controller.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.registerValueCallback(YoctoLib.YMultiAxisController.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.reset">
            <summary>
              Reinitialize all controllers and clear all alert flags.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.findHomePosition(System.Collections.Generic.List{System.Double})">
            <summary>
              Starts all motors backward at the specified speeds, to search for the motor home position.
            <para>
            </para>
            </summary>
            <param name="speed">
              desired speed for all axis, in steps per second.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.moveTo(System.Collections.Generic.List{System.Double})">
            <summary>
              Starts all motors synchronously to reach a given absolute position.
            <para>
              The time needed to reach the requested position will depend on the lowest
              acceleration and max speed parameters configured for all motors.
              The final position will be reached on all axis at the same time.
            </para>
            </summary>
            <param name="absPos">
              absolute position, measured in steps from each origin.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.moveRel(System.Collections.Generic.List{System.Double})">
            <summary>
              Starts all motors synchronously to reach a given relative position.
            <para>
              The time needed to reach the requested position will depend on the lowest
              acceleration and max speed parameters configured for all motors.
              The final position will be reached on all axis at the same time.
            </para>
            </summary>
            <param name="relPos">
              relative position, measured in steps from the current position.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.pause(System.Int32)">
            <summary>
              Keep the motor in the same state for the specified amount of time, before processing next command.
            <para>
            </para>
            </summary>
            <param name="waitMs">
              wait time, specified in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.emergencyStop">
            <summary>
              Stops the motor with an emergency alert, without taking any additional precaution.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.abortAndBrake">
            <summary>
              Stops the motor smoothly as soon as possible, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.abortAndHiZ">
            <summary>
              Turn the controller into Hi-Z mode immediately, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.nextMultiAxisController">
            <summary>
              Continues the enumeration of multi-axis controllers started using <c>yFirstMultiAxisController()</c>.
            <para>
              Caution: You can't make any assumption about the returned multi-axis controllers order.
              If you want to find a specific a multi-axis controller, use <c>MultiAxisController.findMultiAxisController()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMultiAxisController</c> object, corresponding to
              a multi-axis controller currently online, or a <c>null</c> pointer
              if there are no more multi-axis controllers to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiAxisController.FirstMultiAxisController">
            <summary>
              Starts the enumeration of multi-axis controllers currently accessible.
            <para>
              Use the method <c>YMultiAxisController.nextMultiAxisController()</c> to iterate on
              next multi-axis controllers.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMultiAxisController</c> object, corresponding to
              the first multi-axis controller currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YMultiCellWeighScale">
            <summary>
              The <c>YMultiCellWeighScale</c> class provides a weight measurement from a set of ratiometric
              sensors.
            <para>
              It can be used to control the bridge excitation parameters, in order to avoid
              measure shifts caused by temperature variation in the electronics, and can also
              automatically apply an additional correction factor based on temperature to
              compensate for offsets in the load cells themselves.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the weight.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the weight
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_cellCount">
            <summary>
              Returns the number of load cells in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of load cells in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.CELLCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.set_cellCount(System.Int32)">
            <summary>
              Changes the number of load cells in use.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of load cells in use
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_externalSense">
            <summary>
              Returns true if entry 4 is used as external sense for 6-wires load cells.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YMultiCellWeighScale.EXTERNALSENSE_FALSE</c> or <c>YMultiCellWeighScale.EXTERNALSENSE_TRUE</c>,
              according to true if entry 4 is used as external sense for 6-wires load cells
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.EXTERNALSENSE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.set_externalSense(System.Int32)">
            <summary>
              Changes the configuration to tell if entry 4 is used as external sense for
              6-wires load cells.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the
              module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YMultiCellWeighScale.EXTERNALSENSE_FALSE</c> or <c>YMultiCellWeighScale.EXTERNALSENSE_TRUE</c>,
              according to the configuration to tell if entry 4 is used as external sense for
              6-wires load cells
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_excitation">
            <summary>
              Returns the current load cell bridge excitation method.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YMultiCellWeighScale.EXCITATION_OFF</c>, <c>YMultiCellWeighScale.EXCITATION_DC</c>
              and <c>YMultiCellWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.EXCITATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.set_excitation(System.Int32)">
            <summary>
              Changes the current load cell bridge excitation method.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YMultiCellWeighScale.EXCITATION_OFF</c>, <c>YMultiCellWeighScale.EXCITATION_DC</c>
              and <c>YMultiCellWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.set_tempAvgAdaptRatio(System.Double)">
            <summary>
              Changes the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_tempAvgAdaptRatio">
            <summary>
              Returns the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.TEMPAVGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.set_tempChgAdaptRatio(System.Double)">
            <summary>
              Changes the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the temperature change update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_tempChgAdaptRatio">
            <summary>
              Returns the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the temperature change update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.TEMPCHGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_compTempAvg">
            <summary>
              Returns the current averaged temperature, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current averaged temperature, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.COMPTEMPAVG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_compTempChg">
            <summary>
              Returns the current temperature variation, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current temperature variation, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.COMPTEMPCHG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_compensation">
            <summary>
              Returns the current current thermal compensation value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current current thermal compensation value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.COMPENSATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.set_zeroTracking(System.Double)">
            <summary>
              Changes the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the zero tracking threshold value
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.get_zeroTracking">
            <summary>
              Returns the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the zero tracking threshold value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.ZEROTRACKING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.FindMultiCellWeighScale(System.String)">
            <summary>
              Retrieves a multi-cell weighing scale sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the multi-cell weighing scale sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMultiCellWeighScale.isOnline()</c> to test if the multi-cell weighing scale sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a multi-cell weighing scale sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the multi-cell weighing scale sensor, for instance
              <c>YWMBRDG1.multiCellWeighScale</c>.
            </param>
            <returns>
              a <c>YMultiCellWeighScale</c> object allowing you to drive the multi-cell weighing scale sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.registerValueCallback(YoctoLib.YMultiCellWeighScale.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.registerTimedReportCallback(YoctoLib.YMultiCellWeighScale.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.tare">
            <summary>
              Adapts the load cell signal bias (stored in the corresponding genericSensor)
              so that the current signal corresponds to a zero weight.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.setupSpan(System.Double,System.Double)">
            <summary>
              Configures the load cells span parameters (stored in the corresponding genericSensors)
              so that the current signal corresponds to the specified reference weight.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="currWeight">
              reference weight presently on the load cell.
            </param>
            <param name="maxWeight">
              maximum weight to be expected on the load cell.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.nextMultiCellWeighScale">
            <summary>
              Continues the enumeration of multi-cell weighing scale sensors started using <c>yFirstMultiCellWeighScale()</c>.
            <para>
              Caution: You can't make any assumption about the returned multi-cell weighing scale sensors order.
              If you want to find a specific a multi-cell weighing scale sensor, use
              <c>MultiCellWeighScale.findMultiCellWeighScale()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMultiCellWeighScale</c> object, corresponding to
              a multi-cell weighing scale sensor currently online, or a <c>null</c> pointer
              if there are no more multi-cell weighing scale sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiCellWeighScale.FirstMultiCellWeighScale">
            <summary>
              Starts the enumeration of multi-cell weighing scale sensors currently accessible.
            <para>
              Use the method <c>YMultiCellWeighScale.nextMultiCellWeighScale()</c> to iterate on
              next multi-cell weighing scale sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMultiCellWeighScale</c> object, corresponding to
              the first multi-cell weighing scale sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YMultiSensController">
            <summary>
              The <c>YMultiSensController</c> class allows you to setup a customized
              sensor chain on devices featuring that functionality.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YMultiSensController.get_nSensors">
            <summary>
              Returns the number of sensors to poll.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of sensors to poll
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiSensController.NSENSORS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiSensController.set_nSensors(System.Int32)">
            <summary>
              Changes the number of sensors to poll.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the
              modification must be kept. It is recommended to restart the
              device with  <c>module->reboot()</c> after modifying
              (and saving) this settings
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of sensors to poll
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiSensController.get_maxSensors">
            <summary>
              Returns the maximum configurable sensor count allowed on this device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum configurable sensor count allowed on this device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiSensController.MAXSENSORS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiSensController.get_maintenanceMode">
            <summary>
              Returns true when the device is in maintenance mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YMultiSensController.MAINTENANCEMODE_FALSE</c> or <c>YMultiSensController.MAINTENANCEMODE_TRUE</c>,
              according to true when the device is in maintenance mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiSensController.MAINTENANCEMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiSensController.set_maintenanceMode(System.Int32)">
            <summary>
              Changes the device mode to enable maintenance and to stop sensor polling.
            <para>
              This way, the device does not automatically restart when it cannot
              communicate with one of the sensors.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YMultiSensController.MAINTENANCEMODE_FALSE</c> or <c>YMultiSensController.MAINTENANCEMODE_TRUE</c>,
              according to the device mode to enable maintenance and to stop sensor polling
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YMultiSensController.FindMultiSensController(System.String)">
            <summary>
              Retrieves a multi-sensor controller for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the multi-sensor controller is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMultiSensController.isOnline()</c> to test if the multi-sensor controller is
              indeed online at a given time. In case of ambiguity when looking for
              a multi-sensor controller by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the multi-sensor controller, for instance
              <c>YTEMPIR1.multiSensController</c>.
            </param>
            <returns>
              a <c>YMultiSensController</c> object allowing you to drive the multi-sensor controller.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiSensController.registerValueCallback(YoctoLib.YMultiSensController.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YMultiSensController.setupAddress(System.Int32)">
            <summary>
              Configures the I2C address of the only sensor connected to the device.
            <para>
              It is recommended to put the the device in maintenance mode before
              changing sensor addresses.  This method is only intended to work with a single
              sensor connected to the device, if several sensors are connected, the result
              is unpredictable.
              Note that the device is probably expecting to find a string of sensors with specific
              addresses. Check the device documentation to find out which addresses should be used.
            </para>
            </summary>
            <param name="addr">
              new address of the connected sensor
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiSensController.nextMultiSensController">
            <summary>
              Continues the enumeration of multi-sensor controllers started using <c>yFirstMultiSensController()</c>.
            <para>
              Caution: You can't make any assumption about the returned multi-sensor controllers order.
              If you want to find a specific a multi-sensor controller, use
              <c>MultiSensController.findMultiSensController()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMultiSensController</c> object, corresponding to
              a multi-sensor controller currently online, or a <c>null</c> pointer
              if there are no more multi-sensor controllers to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YMultiSensController.FirstMultiSensController">
            <summary>
              Starts the enumeration of multi-sensor controllers currently accessible.
            <para>
              Use the method <c>YMultiSensController.nextMultiSensController()</c> to iterate on
              next multi-sensor controllers.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YMultiSensController</c> object, corresponding to
              the first multi-sensor controller currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YNetwork">
            <c>YNetwork</c> objects provide access to TCP/IP parameters of Yoctopuce
            devices that include a built-in network interface.
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_readiness">
            <summary>
              Returns the current established working mode of the network interface.
            <para>
              Level zero (DOWN_0) means that no hardware link has been detected. Either there is no signal
              on the network cable, or the selected wireless access point cannot be detected.
              Level 1 (LIVE_1) is reached when the network is detected, but is not yet connected.
              For a wireless network, this shows that the requested SSID is present.
              Level 2 (LINK_2) is reached when the hardware connection is established.
              For a wired network connection, level 2 means that the cable is attached at both ends.
              For a connection to a wireless access point, it shows that the security parameters
              are properly configured. For an ad-hoc wireless connection, it means that there is
              at least one other device connected on the ad-hoc network.
              Level 3 (DHCP_3) is reached when an IP address has been obtained using DHCP.
              Level 4 (DNS_4) is reached when the DNS server is reachable on the network.
              Level 5 (WWW_5) is reached when global connectivity is demonstrated by properly loading the
              current time from an NTP server.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YNetwork.READINESS_DOWN</c>, <c>YNetwork.READINESS_EXISTS</c>,
              <c>YNetwork.READINESS_LINKED</c>, <c>YNetwork.READINESS_LAN_OK</c> and
              <c>YNetwork.READINESS_WWW_OK</c> corresponding to the current established working mode of the network interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.READINESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_macAddress">
            <summary>
              Returns the MAC address of the network interface.
            <para>
              The MAC address is also available on a sticker
              on the module, in both numeric and barcode forms.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the MAC address of the network interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.MACADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_ipAddress">
            <summary>
              Returns the IP address currently in use by the device.
            <para>
              The address may have been configured
              statically, or provided by a DHCP server.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address currently in use by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.IPADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_subnetMask">
            <summary>
              Returns the subnet mask currently used by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the subnet mask currently used by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.SUBNETMASK_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_router">
            <summary>
              Returns the IP address of the router on the device subnet (default gateway).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the router on the device subnet (default gateway)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.ROUTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_ipConfig">
            <summary>
              Returns the IP configuration of the network interface.
            <para>
            </para>
            <para>
              If the network interface is setup to use a static IP address, the string starts with "STATIC:" and
              is followed by three
              parameters, separated by "/". The first is the device IP address, followed by the subnet mask
              length, and finally the
              router IP address (default gateway). For instance: "STATIC:192.168.1.14/16/192.168.1.1"
            </para>
            <para>
              If the network interface is configured to receive its IP from a DHCP server, the string start with
              "DHCP:" and is followed by
              three parameters separated by "/". The first is the fallback IP address, then the fallback subnet
              mask length and finally the
              fallback router IP address. These three parameters are used when no DHCP reply is received.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP configuration of the network interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.IPCONFIG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_primaryDNS">
            <summary>
              Returns the IP address of the primary name server to be used by the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the primary name server to be used by the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.PRIMARYDNS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_primaryDNS(System.String)">
            <summary>
              Changes the IP address of the primary name server to be used by the module.
            <para>
              When using DHCP, if a value is specified, it overrides the value received from the DHCP server.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the IP address of the primary name server to be used by the module
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_secondaryDNS">
            <summary>
              Returns the IP address of the secondary name server to be used by the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the secondary name server to be used by the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.SECONDARYDNS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_secondaryDNS(System.String)">
            <summary>
              Changes the IP address of the secondary name server to be used by the module.
            <para>
              When using DHCP, if a value is specified, it overrides the value received from the DHCP server.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the IP address of the secondary name server to be used by the module
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_ntpServer">
            <summary>
              Returns the IP address of the NTP server to be used by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the NTP server to be used by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.NTPSERVER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_ntpServer(System.String)">
            <summary>
              Changes the IP address of the NTP server to be used by the module.
            <para>
              Use an empty
              string to restore the factory set  address.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the IP address of the NTP server to be used by the module
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_userPassword">
            <summary>
              Returns a hash string if a password has been set for "user" user,
              or an empty string otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a hash string if a password has been set for "user" user,
              or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.USERPASSWORD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_userPassword(System.String)">
            <summary>
              Changes the password for the "user" user.
            <para>
              This password becomes instantly required
              to perform any use of the module. If the specified value is an
              empty string, a password is not required anymore.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the password for the "user" user
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_adminPassword">
            <summary>
              Returns a hash string if a password has been set for user "admin",
              or an empty string otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a hash string if a password has been set for user "admin",
              or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.ADMINPASSWORD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_adminPassword(System.String)">
            <summary>
              Changes the password for the "admin" user.
            <para>
              This password becomes instantly required
              to perform any change of the module state. If the specified value is an
              empty string, a password is not required anymore.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the password for the "admin" user
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_httpPort">
            <summary>
              Returns the TCP port used to serve the hub web UI.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the TCP port used to serve the hub web UI
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.HTTPPORT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_httpPort(System.Int32)">
            <summary>
              Changes the the TCP port used to serve the hub web UI.
            <para>
              The default value is port 80,
              which is the default for all Web servers. Regardless of the value set here,
              the hub will always reply on port 4444, which is used by default by Yoctopuce
              API library. When you change this parameter, remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the the TCP port used to serve the hub web UI
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_defaultPage">
            <summary>
              Returns the HTML page to serve for the URL "/"" of the hub.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the HTML page to serve for the URL "/"" of the hub
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.DEFAULTPAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_defaultPage(System.String)">
            <summary>
              Changes the default HTML page returned by the hub.
            <para>
              If not value are set the hub return
              "index.html" which is the web interface of the hub. It is possible to change this page
              for file that has been uploaded on the hub. The maximum filename size is 15 characters.
              When you change this parameter, remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the default HTML page returned by the hub
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_discoverable">
            <summary>
              Returns the activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YNetwork.DISCOVERABLE_FALSE</c> or <c>YNetwork.DISCOVERABLE_TRUE</c>, according to the
              activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.DISCOVERABLE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_discoverable(System.Int32)">
            <summary>
              Changes the activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol).
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YNetwork.DISCOVERABLE_FALSE</c> or <c>YNetwork.DISCOVERABLE_TRUE</c>, according to the
              activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_wwwWatchdogDelay">
            <summary>
              Returns the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity.
            <para>
              A zero value disables automated reboot
              in case of Internet connectivity loss.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.WWWWATCHDOGDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_wwwWatchdogDelay(System.Int32)">
            <summary>
              Changes the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity.
            <para>
              A zero value disables automated reboot
              in case of Internet connectivity loss. The smallest valid non-zero timeout is
              90 seconds. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackUrl">
            <summary>
              Returns the callback URL to notify of significant state changes.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the callback URL to notify of significant state changes
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKURL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackUrl(System.String)">
            <summary>
              Changes the callback URL to notify significant state changes.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the callback URL to notify significant state changes
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackMethod">
            <summary>
              Returns the HTTP method used to notify callbacks for significant state changes.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YNetwork.CALLBACKMETHOD_POST</c>, <c>YNetwork.CALLBACKMETHOD_GET</c> and
              <c>YNetwork.CALLBACKMETHOD_PUT</c> corresponding to the HTTP method used to notify callbacks for
              significant state changes
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKMETHOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackMethod(System.Int32)">
            <summary>
              Changes the HTTP method used to notify callbacks for significant state changes.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YNetwork.CALLBACKMETHOD_POST</c>, <c>YNetwork.CALLBACKMETHOD_GET</c> and
              <c>YNetwork.CALLBACKMETHOD_PUT</c> corresponding to the HTTP method used to notify callbacks for
              significant state changes
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackEncoding">
            <summary>
              Returns the encoding standard to use for representing notification values.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YNetwork.CALLBACKENCODING_FORM</c>, <c>YNetwork.CALLBACKENCODING_JSON</c>,
              <c>YNetwork.CALLBACKENCODING_JSON_ARRAY</c>, <c>YNetwork.CALLBACKENCODING_CSV</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API</c>, <c>YNetwork.CALLBACKENCODING_JSON_NUM</c>,
              <c>YNetwork.CALLBACKENCODING_EMONCMS</c>, <c>YNetwork.CALLBACKENCODING_AZURE</c>,
              <c>YNetwork.CALLBACKENCODING_INFLUXDB</c>, <c>YNetwork.CALLBACKENCODING_MQTT</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API_JZON</c>, <c>YNetwork.CALLBACKENCODING_PRTG</c> and
              <c>YNetwork.CALLBACKENCODING_INFLUXDB_V2</c> corresponding to the encoding standard to use for
              representing notification values
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKENCODING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackEncoding(System.Int32)">
            <summary>
              Changes the encoding standard to use for representing notification values.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YNetwork.CALLBACKENCODING_FORM</c>, <c>YNetwork.CALLBACKENCODING_JSON</c>,
              <c>YNetwork.CALLBACKENCODING_JSON_ARRAY</c>, <c>YNetwork.CALLBACKENCODING_CSV</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API</c>, <c>YNetwork.CALLBACKENCODING_JSON_NUM</c>,
              <c>YNetwork.CALLBACKENCODING_EMONCMS</c>, <c>YNetwork.CALLBACKENCODING_AZURE</c>,
              <c>YNetwork.CALLBACKENCODING_INFLUXDB</c>, <c>YNetwork.CALLBACKENCODING_MQTT</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API_JZON</c>, <c>YNetwork.CALLBACKENCODING_PRTG</c> and
              <c>YNetwork.CALLBACKENCODING_INFLUXDB_V2</c> corresponding to the encoding standard to use for
              representing notification values
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackCredentials">
            <summary>
              Returns a hashed version of the notification callback credentials if set,
              or an empty string otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a hashed version of the notification callback credentials if set,
              or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKCREDENTIALS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackCredentials(System.String)">
            <summary>
              Changes the credentials required to connect to the callback address.
            <para>
              The credentials
              must be provided as returned by function <c>get_callbackCredentials</c>,
              in the form <c>username:hash</c>. The method used to compute the hash varies according
              to the the authentication scheme implemented by the callback, For Basic authentication,
              the hash is the MD5 of the string <c>username:password</c>. For Digest authentication,
              the hash is the MD5 of the string <c>username:realm:password</c>. For a simpler
              way to configure callback credentials, use function <c>callbackLogin</c> instead.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the credentials required to connect to the callback address
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.callbackLogin(System.String,System.String)">
            <summary>
              Connects to the notification callback and saves the credentials required to
              log into it.
            <para>
              The password is not stored into the module, only a hashed
              copy of the credentials are saved. Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="username">
              username required to log to the callback
            </param>
            <param name="password">
              password required to log to the callback
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackInitialDelay">
            <summary>
              Returns the initial waiting time before first callback notifications, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the initial waiting time before first callback notifications, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKINITIALDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackInitialDelay(System.Int32)">
            <summary>
              Changes the initial waiting time before first callback notifications, in seconds.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the initial waiting time before first callback notifications, in seconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackSchedule">
            <summary>
              Returns the HTTP callback schedule strategy, as a text string.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the HTTP callback schedule strategy, as a text string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKSCHEDULE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackSchedule(System.String)">
            <summary>
              Changes the HTTP callback schedule strategy, as a text string.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the HTTP callback schedule strategy, as a text string
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackMinDelay">
            <summary>
              Returns the minimum waiting time between two HTTP callbacks, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimum waiting time between two HTTP callbacks, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKMINDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackMinDelay(System.Int32)">
            <summary>
              Changes the minimum waiting time between two HTTP callbacks, in seconds.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimum waiting time between two HTTP callbacks, in seconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_callbackMaxDelay">
            <summary>
              Returns the waiting time between two HTTP callbacks when there is nothing new.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the waiting time between two HTTP callbacks when there is nothing new
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKMAXDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_callbackMaxDelay(System.Int32)">
            <summary>
              Changes the waiting time between two HTTP callbacks when there is nothing new.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the waiting time between two HTTP callbacks when there is nothing new
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.get_poeCurrent">
            <summary>
              Returns the current consumed by the module from Power-over-Ethernet (PoE), in milliamps.
            <para>
              The current consumption is measured after converting PoE source to 5 Volt, and should
              never exceed 1800 mA.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current consumed by the module from Power-over-Ethernet (PoE), in milliamps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.POECURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.FindNetwork(System.String)">
            <summary>
              Retrieves a network interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the network interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YNetwork.isOnline()</c> to test if the network interface is
              indeed online at a given time. In case of ambiguity when looking for
              a network interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the network interface, for instance
              <c>YHUBETH1.network</c>.
            </param>
            <returns>
              a <c>YNetwork</c> object allowing you to drive the network interface.
            </returns>
        </member>
        <member name="M:YoctoLib.YNetwork.registerValueCallback(YoctoLib.YNetwork.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YNetwork.useDHCP(System.String,System.Int32,System.String)">
            <summary>
              Changes the configuration of the network interface to enable the use of an
              IP address received from a DHCP server.
            <para>
              Until an address is received from a DHCP
              server, the module uses the IP parameters specified to this function.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="fallbackIpAddr">
              fallback IP address, to be used when no DHCP reply is received
            </param>
            <param name="fallbackSubnetMaskLen">
              fallback subnet mask length when no DHCP reply is received, as an
              integer (e.g. 24 means 255.255.255.0)
            </param>
            <param name="fallbackRouter">
              fallback router IP address, to be used when no DHCP reply is received
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.useDHCPauto">
            <summary>
              Changes the configuration of the network interface to enable the use of an
              IP address received from a DHCP server.
            <para>
              Until an address is received from a DHCP
              server, the module uses an IP of the network 169.254.0.0/16 (APIPA).
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.useStaticIP(System.String,System.Int32,System.String)">
            <summary>
              Changes the configuration of the network interface to use a static IP address.
            <para>
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="ipAddress">
              device IP address
            </param>
            <param name="subnetMaskLen">
              subnet mask length, as an integer (e.g. 24 means 255.255.255.0)
            </param>
            <param name="router">
              router IP address (default gateway)
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.ping(System.String)">
            <summary>
              Pings host to test the network connectivity.
            <para>
              Sends four ICMP ECHO_REQUEST requests from the
              module to the target host. This method returns a string with the result of the
              4 ICMP ECHO_REQUEST requests.
            </para>
            </summary>
            <param name="host">
              the hostname or the IP address of the target
            </param>
            <para>
            </para>
            <returns>
              a string with the result of the ping.
            </returns>
        </member>
        <member name="M:YoctoLib.YNetwork.triggerCallback">
            <summary>
              Trigger an HTTP callback quickly.
            <para>
              This function can even be called within
              an HTTP callback, in which case the next callback will be triggered 5 seconds
              after the end of the current callback, regardless if the minimum time between
              callbacks configured in the device.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.set_periodicCallbackSchedule(System.String,System.Int32)">
            <summary>
              Setup periodic HTTP callbacks (simplified function).
            <para>
            </para>
            </summary>
            <param name="interval">
              a string representing the callback periodicity, expressed in
              seconds, minutes or hours, eg. "60s", "5m", "1h", "48h".
            </param>
            <param name="offset">
              an integer representing the time offset relative to the period
              when the callback should occur. For instance, if the periodicity is
              24h, an offset of 7 will make the callback occur each day at 7AM.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YNetwork.nextNetwork">
            <summary>
              Continues the enumeration of network interfaces started using <c>yFirstNetwork()</c>.
            <para>
              Caution: You can't make any assumption about the returned network interfaces order.
              If you want to find a specific a network interface, use <c>Network.findNetwork()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YNetwork</c> object, corresponding to
              a network interface currently online, or a <c>null</c> pointer
              if there are no more network interfaces to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YNetwork.FirstNetwork">
            <summary>
              Starts the enumeration of network interfaces currently accessible.
            <para>
              Use the method <c>YNetwork.nextNetwork()</c> to iterate on
              next network interfaces.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YNetwork</c> object, corresponding to
              the first network interface currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YOsControl">
            <summary>
              The <c>YOScontrol</c> class provides some control over the operating system running a VirtualHub.
            <para>
              YOsControl is available on VirtualHub software only. This feature must be activated at the VirtualHub
              start up with -o option.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YOsControl.get_shutdownCountdown">
            <summary>
              Returns the remaining number of seconds before the OS shutdown, or zero when no
              shutdown has been scheduled.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the remaining number of seconds before the OS shutdown, or zero when no
              shutdown has been scheduled
            </returns>
            <para>
              On failure, throws an exception or returns <c>YOsControl.SHUTDOWNCOUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YOsControl.FindOsControl(System.String)">
            <summary>
              Retrieves OS control for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the OS control is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YOsControl.isOnline()</c> to test if the OS control is
              indeed online at a given time. In case of ambiguity when looking for
              OS control by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the OS control, for instance
              <c>MyDevice.osControl</c>.
            </param>
            <returns>
              a <c>YOsControl</c> object allowing you to drive the OS control.
            </returns>
        </member>
        <member name="M:YoctoLib.YOsControl.registerValueCallback(YoctoLib.YOsControl.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YOsControl.shutdown(System.Int32)">
            <summary>
              Schedules an OS shutdown after a given number of seconds.
            <para>
            </para>
            </summary>
            <param name="secBeforeShutDown">
              number of seconds before shutdown
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YOsControl.nextOsControl">
            <summary>
              Continues the enumeration of OS control started using <c>yFirstOsControl()</c>.
            <para>
              Caution: You can't make any assumption about the returned OS control order.
              If you want to find a specific OS control, use <c>OsControl.findOsControl()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YOsControl</c> object, corresponding to
              OS control currently online, or a <c>null</c> pointer
              if there are no more OS control to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YOsControl.FirstOsControl">
            <summary>
              Starts the enumeration of OS control currently accessible.
            <para>
              Use the method <c>YOsControl.nextOsControl()</c> to iterate on
              next OS control.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YOsControl</c> object, corresponding to
              the first OS control currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YPower">
            <summary>
              The <c>YPower</c> class allows you to read and configure Yoctopuce electrical power sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to access the energy counter and the power factor.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YPower.get_cosPhi">
            <summary>
              Returns the power factor (the ratio between the real power consumed,
              measured in W, and the apparent power provided, measured in VA).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the power factor (the ratio between the real power consumed,
              measured in W, and the apparent power provided, measured in VA)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.COSPHI_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPower.get_meter">
            <summary>
              Returns the energy counter, maintained by the wattmeter by integrating the power consumption over time,
              but only when positive.
            <para>
              Note that this counter is reset at each start of the device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the energy counter, maintained by the wattmeter by
              integrating the power consumption over time,
              but only when positive
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.METER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPower.get_deliveredEnergyMeter">
            <summary>
              Returns the energy counter, maintained by the wattmeter by integrating the power consumption over time,
              but only when positive.
            <para>
              Note that this counter is reset at each start of the device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the energy counter, maintained by the wattmeter by
              integrating the power consumption over time,
              but only when positive
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.DELIVEREDENERGYMETER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPower.get_receivedEnergyMeter">
            <summary>
              Returns the energy counter, maintained by the wattmeter by integrating the power consumption over time,
              but only when negative.
            <para>
              Note that this counter is reset at each start of the device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the energy counter, maintained by the wattmeter by
              integrating the power consumption over time,
              but only when negative
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.RECEIVEDENERGYMETER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPower.get_meterTimer">
            <summary>
              Returns the elapsed time since last energy counter reset, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the elapsed time since last energy counter reset, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.METERTIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPower.FindPower(System.String)">
            <summary>
              Retrieves a electrical power sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the electrical power sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPower.isOnline()</c> to test if the electrical power sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a electrical power sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the electrical power sensor, for instance
              <c>YWATTMK1.power</c>.
            </param>
            <returns>
              a <c>YPower</c> object allowing you to drive the electrical power sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YPower.registerValueCallback(YoctoLib.YPower.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPower.registerTimedReportCallback(YoctoLib.YPower.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPower.reset">
            <summary>
              Resets the energy counters.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPower.nextPower">
            <summary>
              Continues the enumeration of electrical power sensors started using <c>yFirstPower()</c>.
            <para>
              Caution: You can't make any assumption about the returned electrical power sensors order.
              If you want to find a specific a electrical power sensor, use <c>Power.findPower()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPower</c> object, corresponding to
              a electrical power sensor currently online, or a <c>null</c> pointer
              if there are no more electrical power sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YPower.FirstPower">
            <summary>
              Starts the enumeration of electrical power sensors currently accessible.
            <para>
              Use the method <c>YPower.nextPower()</c> to iterate on
              next electrical power sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPower</c> object, corresponding to
              the first electrical power sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YPowerOutput">
            <summary>
              The <c>YPowerOutput</c> class allows you to control
              the power output featured on some Yoctopuce devices.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YPowerOutput.get_voltage">
            <summary>
              Returns the voltage on the power output featured by the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YPowerOutput.VOLTAGE_OFF</c>, <c>YPowerOutput.VOLTAGE_OUT3V3</c>,
              <c>YPowerOutput.VOLTAGE_OUT5V</c>, <c>YPowerOutput.VOLTAGE_OUT4V7</c> and
              <c>YPowerOutput.VOLTAGE_OUT1V8</c> corresponding to the voltage on the power output featured by the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerOutput.VOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerOutput.set_voltage(System.Int32)">
            <summary>
              Changes the voltage on the power output provided by the
              module.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YPowerOutput.VOLTAGE_OFF</c>, <c>YPowerOutput.VOLTAGE_OUT3V3</c>,
              <c>YPowerOutput.VOLTAGE_OUT5V</c>, <c>YPowerOutput.VOLTAGE_OUT4V7</c> and
              <c>YPowerOutput.VOLTAGE_OUT1V8</c> corresponding to the voltage on the power output provided by the
              module
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerOutput.FindPowerOutput(System.String)">
            <summary>
              Retrieves a power output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the power output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPowerOutput.isOnline()</c> to test if the power output is
              indeed online at a given time. In case of ambiguity when looking for
              a power output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the power output, for instance
              <c>YI2CMK01.powerOutput</c>.
            </param>
            <returns>
              a <c>YPowerOutput</c> object allowing you to drive the power output.
            </returns>
        </member>
        <member name="M:YoctoLib.YPowerOutput.registerValueCallback(YoctoLib.YPowerOutput.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPowerOutput.nextPowerOutput">
            <summary>
              Continues the enumeration of power output started using <c>yFirstPowerOutput()</c>.
            <para>
              Caution: You can't make any assumption about the returned power output order.
              If you want to find a specific a power output, use <c>PowerOutput.findPowerOutput()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPowerOutput</c> object, corresponding to
              a power output currently online, or a <c>null</c> pointer
              if there are no more power output to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YPowerOutput.FirstPowerOutput">
            <summary>
              Starts the enumeration of power output currently accessible.
            <para>
              Use the method <c>YPowerOutput.nextPowerOutput()</c> to iterate on
              next power output.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPowerOutput</c> object, corresponding to
              the first power output currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YPowerSupply">
            <summary>
              The <c>YPowerSupply</c> class allows you to drive a Yoctopuce power supply.
            <para>
              It can be use to change the voltage set point,
              the current limit and the enable/disable the output.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YPowerSupply.set_voltageSetPoint(System.Double)">
            <summary>
              Changes the voltage set point, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the voltage set point, in V
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_voltageSetPoint">
            <summary>
              Returns the voltage set point, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the voltage set point, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VOLTAGESETPOINT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.set_currentLimit(System.Double)">
            <summary>
              Changes the current limit, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current limit, in mA
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_currentLimit">
            <summary>
              Returns the current limit, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current limit, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.CURRENTLIMIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_powerOutput">
            <summary>
              Returns the power supply output switch state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPowerSupply.POWEROUTPUT_OFF</c> or <c>YPowerSupply.POWEROUTPUT_ON</c>, according to the
              power supply output switch state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.POWEROUTPUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.set_powerOutput(System.Int32)">
            <summary>
              Changes the power supply output switch state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPowerSupply.POWEROUTPUT_OFF</c> or <c>YPowerSupply.POWEROUTPUT_ON</c>, according to the
              power supply output switch state
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_voltageSense">
            <summary>
              Returns the output voltage control point.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPowerSupply.VOLTAGESENSE_INT</c> or <c>YPowerSupply.VOLTAGESENSE_EXT</c>, according to
              the output voltage control point
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VOLTAGESENSE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.set_voltageSense(System.Int32)">
            <summary>
              Changes the voltage control point.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPowerSupply.VOLTAGESENSE_INT</c> or <c>YPowerSupply.VOLTAGESENSE_EXT</c>, according to
              the voltage control point
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_measuredVoltage">
            <summary>
              Returns the measured output voltage, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the measured output voltage, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.MEASUREDVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_measuredCurrent">
            <summary>
              Returns the measured output current, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the measured output current, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.MEASUREDCURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_inputVoltage">
            <summary>
              Returns the measured input voltage, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the measured input voltage, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.INPUTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_vInt">
            <summary>
              Returns the internal voltage, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the internal voltage, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VINT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_ldoTemperature">
            <summary>
              Returns the LDO temperature, in Celsius.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the LDO temperature, in Celsius
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.LDOTEMPERATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.set_voltageAtStartUp(System.Double)">
            <summary>
              Changes the voltage set point at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the voltage set point at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_voltageAtStartUp">
            <summary>
              Returns the selected voltage set point at device startup, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the selected voltage set point at device startup, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VOLTAGEATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.set_currentAtStartUp(System.Double)">
            <summary>
              Changes the current limit at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current limit at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.get_currentAtStartUp">
            <summary>
              Returns the selected current limit at device startup, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the selected current limit at device startup, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.CURRENTATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPowerSupply.FindPowerSupply(System.String)">
            <summary>
              Retrieves a regulated power supply for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the regulated power supply is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPowerSupply.isOnline()</c> to test if the regulated power supply is
              indeed online at a given time. In case of ambiguity when looking for
              a regulated power supply by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the regulated power supply, for instance
              <c>MyDevice.powerSupply</c>.
            </param>
            <returns>
              a <c>YPowerSupply</c> object allowing you to drive the regulated power supply.
            </returns>
        </member>
        <member name="M:YoctoLib.YPowerSupply.registerValueCallback(YoctoLib.YPowerSupply.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPowerSupply.voltageMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of output voltage.
            <para>
              Any explicit voltage
              change cancels any ongoing transition process.
            </para>
            </summary>
            <param name="V_target">
              new output voltage value at the end of the transition
              (floating-point number, representing the end voltage in V)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoLib.YPowerSupply.nextPowerSupply">
            <summary>
              Continues the enumeration of regulated power supplies started using <c>yFirstPowerSupply()</c>.
            <para>
              Caution: You can't make any assumption about the returned regulated power supplies order.
              If you want to find a specific a regulated power supply, use <c>PowerSupply.findPowerSupply()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPowerSupply</c> object, corresponding to
              a regulated power supply currently online, or a <c>null</c> pointer
              if there are no more regulated power supplies to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YPowerSupply.FirstPowerSupply">
            <summary>
              Starts the enumeration of regulated power supplies currently accessible.
            <para>
              Use the method <c>YPowerSupply.nextPowerSupply()</c> to iterate on
              next regulated power supplies.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPowerSupply</c> object, corresponding to
              the first regulated power supply currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YPressure">
            <summary>
              The <c>YPressure</c> class allows you to read and configure Yoctopuce pressure sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YPressure.FindPressure(System.String)">
            <summary>
              Retrieves a pressure sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the pressure sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPressure.isOnline()</c> to test if the pressure sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a pressure sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the pressure sensor, for instance
              <c>YALTIMK2.pressure</c>.
            </param>
            <returns>
              a <c>YPressure</c> object allowing you to drive the pressure sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YPressure.registerValueCallback(YoctoLib.YPressure.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPressure.registerTimedReportCallback(YoctoLib.YPressure.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPressure.nextPressure">
            <summary>
              Continues the enumeration of pressure sensors started using <c>yFirstPressure()</c>.
            <para>
              Caution: You can't make any assumption about the returned pressure sensors order.
              If you want to find a specific a pressure sensor, use <c>Pressure.findPressure()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPressure</c> object, corresponding to
              a pressure sensor currently online, or a <c>null</c> pointer
              if there are no more pressure sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YPressure.FirstPressure">
            <summary>
              Starts the enumeration of pressure sensors currently accessible.
            <para>
              Use the method <c>YPressure.nextPressure()</c> to iterate on
              next pressure sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPressure</c> object, corresponding to
              the first pressure sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YProximity">
            <summary>
              The <c>YProximity</c> class allows you to read and configure Yoctopuce proximity sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to setup a detection threshold and to count the
              number of detected state changes.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YProximity.get_signalValue">
            <summary>
              Returns the current value of signal measured by the proximity sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of signal measured by the proximity sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.SIGNALVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_detectionThreshold">
            <summary>
              Returns the threshold used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the threshold used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.DETECTIONTHRESHOLD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.set_detectionThreshold(System.Int32)">
            <summary>
              Changes the threshold used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the threshold used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_detectionHysteresis">
            <summary>
              Returns the hysteresis used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the hysteresis used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.DETECTIONHYSTERESIS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.set_detectionHysteresis(System.Int32)">
            <summary>
              Changes the hysteresis used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the hysteresis used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_presenceMinTime">
            <summary>
              Returns the minimal detection duration before signalling a presence event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimal detection duration before signalling a presence event
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PRESENCEMINTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.set_presenceMinTime(System.Int32)">
            <summary>
              Changes the minimal detection duration before signalling a presence event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimal detection duration before signalling a presence event
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_removalMinTime">
            <summary>
              Returns the minimal detection duration before signalling a removal event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimal detection duration before signalling a removal event
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.REMOVALMINTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.set_removalMinTime(System.Int32)">
            <summary>
              Changes the minimal detection duration before signalling a removal event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimal detection duration before signalling a removal event
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_isPresent">
            <summary>
              Returns true if the input (considered as binary) is active (detection value is smaller than the specified <c>threshold</c>), and false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YProximity.ISPRESENT_FALSE</c> or <c>YProximity.ISPRESENT_TRUE</c>, according to true if
              the input (considered as binary) is active (detection value is smaller than the specified
              <c>threshold</c>), and false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.ISPRESENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_lastTimeApproached">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from absent to present).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from absent to present)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.LASTTIMEAPPROACHED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_lastTimeRemoved">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from present to absent).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from present to absent)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.LASTTIMEREMOVED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_pulseCounter">
            <summary>
              Returns the pulse counter value.
            <para>
              The value is a 32 bit integer. In case
              of overflow (>=2^32), the counter will wrap. To reset the counter, just
              call the resetCounter() method.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the pulse counter value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PULSECOUNTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_pulseTimer">
            <summary>
              Returns the timer of the pulse counter (ms).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the timer of the pulse counter (ms)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.get_proximityReportMode">
            <summary>
              Returns the parameter (sensor value, presence or pulse count) returned by the get_currentValue function and callbacks.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YProximity.PROXIMITYREPORTMODE_NUMERIC</c>,
              <c>YProximity.PROXIMITYREPORTMODE_PRESENCE</c> and <c>YProximity.PROXIMITYREPORTMODE_PULSECOUNT</c>
              corresponding to the parameter (sensor value, presence or pulse count) returned by the
              get_currentValue function and callbacks
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PROXIMITYREPORTMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.set_proximityReportMode(System.Int32)">
            <summary>
              Changes the  parameter  type (sensor value, presence or pulse count) returned by the get_currentValue function and callbacks.
            <para>
              The edge count value is limited to the 6 lowest digits. For values greater than one million, use
              get_pulseCounter().
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YProximity.PROXIMITYREPORTMODE_NUMERIC</c>,
              <c>YProximity.PROXIMITYREPORTMODE_PRESENCE</c> and <c>YProximity.PROXIMITYREPORTMODE_PULSECOUNT</c>
              corresponding to the  parameter  type (sensor value, presence or pulse count) returned by the
              get_currentValue function and callbacks
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.FindProximity(System.String)">
            <summary>
              Retrieves a proximity sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the proximity sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YProximity.isOnline()</c> to test if the proximity sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a proximity sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the proximity sensor, for instance
              <c>YPROXIM1.proximity1</c>.
            </param>
            <returns>
              a <c>YProximity</c> object allowing you to drive the proximity sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YProximity.registerValueCallback(YoctoLib.YProximity.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YProximity.registerTimedReportCallback(YoctoLib.YProximity.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YProximity.resetCounter">
            <summary>
              Resets the pulse counter value as well as its timer.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YProximity.nextProximity">
            <summary>
              Continues the enumeration of proximity sensors started using <c>yFirstProximity()</c>.
            <para>
              Caution: You can't make any assumption about the returned proximity sensors order.
              If you want to find a specific a proximity sensor, use <c>Proximity.findProximity()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YProximity</c> object, corresponding to
              a proximity sensor currently online, or a <c>null</c> pointer
              if there are no more proximity sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YProximity.FirstProximity">
            <summary>
              Starts the enumeration of proximity sensors currently accessible.
            <para>
              Use the method <c>YProximity.nextProximity()</c> to iterate on
              next proximity sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YProximity</c> object, corresponding to
              the first proximity sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YPwmInput">
            <summary>
              The <c>YPwmInput</c> class allows you to read and configure Yoctopuce PWM inputs.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to configure the signal parameter used to transmit
              information: the duty cycle, the frequency or the pulse width.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YPwmInput.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured quantity.
            <para>
              That unit
              is just a string which is automatically initialized each time
              the measurement mode is changed. But is can be set to an
              arbitrary value.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured quantity
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_dutyCycle">
            <summary>
              Returns the PWM duty cycle, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM duty cycle, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.DUTYCYCLE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_pulseDuration">
            <summary>
              Returns the PWM pulse length in milliseconds, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM pulse length in milliseconds, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PULSEDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_frequency">
            <summary>
              Returns the PWM frequency in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM frequency in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_period">
            <summary>
              Returns the PWM period in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM period in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_pulseCounter">
            <summary>
              Returns the pulse counter value.
            <para>
              Actually that
              counter is incremented twice per period. That counter is
              limited  to 1 billion.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the pulse counter value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PULSECOUNTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_pulseTimer">
            <summary>
              Returns the timer of the pulses counter (ms).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the timer of the pulses counter (ms)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_pwmReportMode">
            <summary>
              Returns the parameter (frequency/duty cycle, pulse width, edges count) returned by the get_currentValue function and callbacks.
            <para>
              Attention
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YPwmInput.PWMREPORTMODE_PWM_DUTYCYCLE</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQUENCY</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSEDURATION</c>, <c>YPwmInput.PWMREPORTMODE_PWM_EDGECOUNT</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSECOUNT</c>, <c>YPwmInput.PWMREPORTMODE_PWM_CPS</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_CPM</c>, <c>YPwmInput.PWMREPORTMODE_PWM_STATE</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPS</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPM</c> and
              <c>YPwmInput.PWMREPORTMODE_PWM_PERIODCOUNT</c> corresponding to the parameter (frequency/duty
              cycle, pulse width, edges count) returned by the get_currentValue function and callbacks
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PWMREPORTMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.set_pwmReportMode(System.Int32)">
            <summary>
              Changes the  parameter  type (frequency/duty cycle, pulse width, or edge count) returned by the get_currentValue function and callbacks.
            <para>
              The edge count value is limited to the 6 lowest digits. For values greater than one million, use
              get_pulseCounter().
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YPwmInput.PWMREPORTMODE_PWM_DUTYCYCLE</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQUENCY</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSEDURATION</c>, <c>YPwmInput.PWMREPORTMODE_PWM_EDGECOUNT</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSECOUNT</c>, <c>YPwmInput.PWMREPORTMODE_PWM_CPS</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_CPM</c>, <c>YPwmInput.PWMREPORTMODE_PWM_STATE</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPS</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPM</c> and
              <c>YPwmInput.PWMREPORTMODE_PWM_PERIODCOUNT</c> corresponding to the  parameter  type
              (frequency/duty cycle, pulse width, or edge count) returned by the get_currentValue function and callbacks
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_debouncePeriod">
            <summary>
              Returns the shortest expected pulse duration, in ms.
            <para>
              Any shorter pulse will be automatically ignored (debounce).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the shortest expected pulse duration, in ms
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.DEBOUNCEPERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.set_debouncePeriod(System.Int32)">
            <summary>
              Changes the shortest expected pulse duration, in ms.
            <para>
              Any shorter pulse will be automatically ignored (debounce).
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the shortest expected pulse duration, in ms
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_bandwidth">
            <summary>
              Returns the input signal sampling rate, in kHz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the input signal sampling rate, in kHz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.set_bandwidth(System.Int32)">
            <summary>
              Changes the input signal sampling rate, measured in kHz.
            <para>
              A lower sampling frequency can be used to hide hide-frequency bounce effects,
              for instance on electromechanical contacts, but limits the measure resolution.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the input signal sampling rate, measured in kHz
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.get_edgesPerPeriod">
            <summary>
              Returns the number of edges detected per preiod.
            <para>
              For a clean PWM signal, this should be exactly two,
              but in cas the signal is created by a mechanical contact with bounces, it can get higher.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of edges detected per preiod
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.EDGESPERPERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.FindPwmInput(System.String)">
            <summary>
              Retrieves a PWM input for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the PWM input is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPwmInput.isOnline()</c> to test if the PWM input is
              indeed online at a given time. In case of ambiguity when looking for
              a PWM input by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the PWM input, for instance
              <c>YPWMRX01.pwmInput1</c>.
            </param>
            <returns>
              a <c>YPwmInput</c> object allowing you to drive the PWM input.
            </returns>
        </member>
        <member name="M:YoctoLib.YPwmInput.registerValueCallback(YoctoLib.YPwmInput.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPwmInput.registerTimedReportCallback(YoctoLib.YPwmInput.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPwmInput.resetCounter">
            <summary>
              Returns the pulse counter value as well as its timer.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmInput.nextPwmInput">
            <summary>
              Continues the enumeration of PWM inputs started using <c>yFirstPwmInput()</c>.
            <para>
              Caution: You can't make any assumption about the returned PWM inputs order.
              If you want to find a specific a PWM input, use <c>PwmInput.findPwmInput()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPwmInput</c> object, corresponding to
              a PWM input currently online, or a <c>null</c> pointer
              if there are no more PWM inputs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YPwmInput.FirstPwmInput">
            <summary>
              Starts the enumeration of PWM inputs currently accessible.
            <para>
              Use the method <c>YPwmInput.nextPwmInput()</c> to iterate on
              next PWM inputs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPwmInput</c> object, corresponding to
              the first PWM input currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YPwmOutput">
            <summary>
              The <c>YPwmOutput</c> class allows you to drive a pulse-width modulated output (PWM).
            <para>
              You can configure the frequency as well as the duty cycle, and setup progressive
              transitions.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YPwmOutput.get_enabled">
            <summary>
              Returns the state of the PWM generators.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPwmOutput.ENABLED_FALSE</c> or <c>YPwmOutput.ENABLED_TRUE</c>, according to the state of
              the PWM generators
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.set_enabled(System.Int32)">
            <summary>
              Stops or starts the PWM.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPwmOutput.ENABLED_FALSE</c> or <c>YPwmOutput.ENABLED_TRUE</c>
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.set_frequency(System.Double)">
            <summary>
              Changes the PWM frequency.
            <para>
              The duty cycle is kept unchanged thanks to an
              automatic pulse width change, in other words, the change will not be applied
              before the end of the current period. This can significantly affect reaction
              time at low frequencies. If you call the matching module <c>saveToFlash()</c>
              method, the frequency will be kept after a device power cycle.
              To stop the PWM signal, do not set the frequency to zero, use the set_enabled()
              method instead.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM frequency
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.get_frequency">
            <summary>
              Returns the PWM frequency in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM frequency in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.set_period(System.Double)">
            <summary>
              Changes the PWM period in milliseconds.
            <para>
              Caution: in order to avoid  random truncation of
              the current pulse, the change will not be applied
              before the end of the current period. This can significantly affect reaction
              time at low frequencies. If you call the matching module <c>saveToFlash()</c>
              method, the frequency will be kept after a device power cycle.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM period in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.get_period">
            <summary>
              Returns the PWM period in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM period in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.PERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.set_dutyCycle(System.Double)">
            <summary>
              Changes the PWM duty cycle, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM duty cycle, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.get_dutyCycle">
            <summary>
              Returns the PWM duty cycle, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM duty cycle, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.DUTYCYCLE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.set_pulseDuration(System.Double)">
            <summary>
              Changes the PWM pulse length, in milliseconds.
            <para>
              A pulse length cannot be longer than period, otherwise it is truncated.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM pulse length, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.get_pulseDuration">
            <summary>
              Returns the PWM pulse length in milliseconds, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM pulse length in milliseconds, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.PULSEDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.get_enabledAtPowerOn">
            <summary>
              Returns the state of the PWM at device power on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPwmOutput.ENABLEDATPOWERON_FALSE</c> or <c>YPwmOutput.ENABLEDATPOWERON_TRUE</c>,
              according to the state of the PWM at device power on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.ENABLEDATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.set_enabledAtPowerOn(System.Int32)">
            <summary>
              Changes the state of the PWM at device power on.
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPwmOutput.ENABLEDATPOWERON_FALSE</c> or <c>YPwmOutput.ENABLEDATPOWERON_TRUE</c>,
              according to the state of the PWM at device power on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.set_dutyCycleAtPowerOn(System.Double)">
            <summary>
              Changes the PWM duty cycle at device power on.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM duty cycle at device power on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.get_dutyCycleAtPowerOn">
            <summary>
              Returns the PWM generators duty cycle at device power on as a floating point number between 0 and 100.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM generators duty cycle at device power on as a
              floating point number between 0 and 100
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.DUTYCYCLEATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.FindPwmOutput(System.String)">
            <summary>
              Retrieves a PWM generator for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the PWM generator is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPwmOutput.isOnline()</c> to test if the PWM generator is
              indeed online at a given time. In case of ambiguity when looking for
              a PWM generator by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the PWM generator, for instance
              <c>YPWMTX01.pwmOutput1</c>.
            </param>
            <returns>
              a <c>YPwmOutput</c> object allowing you to drive the PWM generator.
            </returns>
        </member>
        <member name="M:YoctoLib.YPwmOutput.registerValueCallback(YoctoLib.YPwmOutput.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPwmOutput.pulseDurationMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of the pulse duration toward a given value.
            <para>
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="ms_target">
              new pulse duration at the end of the transition
              (floating-point number, representing the pulse duration in milliseconds)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.dutyCycleMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth change of the duty cycle toward a given value.
            <para>
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="target">
              new duty cycle at the end of the transition
              (percentage, floating-point number between 0 and 100)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.frequencyMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth frequency change toward a given value.
            <para>
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="target">
              new frequency at the end of the transition (floating-point number)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.phaseMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition toward a specified value of the phase shift between this channel
              and the other channel.
            <para>
              The phase shift is executed by slightly changing the frequency
              temporarily during the specified duration. This function only makes sense when both channels
              are running, either at the same frequency, or at a multiple of the channel frequency.
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="target">
              phase shift at the end of the transition, in milliseconds (floating-point number)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.triggerPulsesByDuration(System.Double,System.Int32)">
            <summary>
              Trigger a given number of pulses of specified duration, at current frequency.
            <para>
              At the end of the pulse train, revert to the original state of the PWM generator.
            </para>
            </summary>
            <param name="ms_target">
              desired pulse duration
              (floating-point number, representing the pulse duration in milliseconds)
            </param>
            <param name="n_pulses">
              desired pulse count
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.triggerPulsesByDutyCycle(System.Double,System.Int32)">
            <summary>
              Trigger a given number of pulses of specified duration, at current frequency.
            <para>
              At the end of the pulse train, revert to the original state of the PWM generator.
            </para>
            </summary>
            <param name="target">
              desired duty cycle for the generated pulses
              (percentage, floating-point number between 0 and 100)
            </param>
            <param name="n_pulses">
              desired pulse count
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.triggerPulsesByFrequency(System.Double,System.Int32)">
            <summary>
              Trigger a given number of pulses at the specified frequency, using current duty cycle.
            <para>
              At the end of the pulse train, revert to the original state of the PWM generator.
            </para>
            </summary>
            <param name="target">
              desired frequency for the generated pulses (floating-point number)
            </param>
            <param name="n_pulses">
              desired pulse count
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmOutput.nextPwmOutput">
            <summary>
              Continues the enumeration of PWM generators started using <c>yFirstPwmOutput()</c>.
            <para>
              Caution: You can't make any assumption about the returned PWM generators order.
              If you want to find a specific a PWM generator, use <c>PwmOutput.findPwmOutput()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPwmOutput</c> object, corresponding to
              a PWM generator currently online, or a <c>null</c> pointer
              if there are no more PWM generators to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YPwmOutput.FirstPwmOutput">
            <summary>
              Starts the enumeration of PWM generators currently accessible.
            <para>
              Use the method <c>YPwmOutput.nextPwmOutput()</c> to iterate on
              next PWM generators.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPwmOutput</c> object, corresponding to
              the first PWM generator currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YPwmPowerSource">
            <summary>
              The <c>YPwmPowerSource</c> class allows you to configure
              the voltage source used by all PWM outputs on the same device.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YPwmPowerSource.get_powerMode">
            <summary>
              Returns the selected power source for the PWM on the same device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YPwmPowerSource.POWERMODE_USB_5V</c>, <c>YPwmPowerSource.POWERMODE_USB_3V</c>,
              <c>YPwmPowerSource.POWERMODE_EXT_V</c> and <c>YPwmPowerSource.POWERMODE_OPNDRN</c> corresponding to
              the selected power source for the PWM on the same device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmPowerSource.POWERMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmPowerSource.set_powerMode(System.Int32)">
            <summary>
              Changes  the PWM power source.
            <para>
              PWM can use isolated 5V from USB, isolated 3V from USB or
              voltage from an external power source. The PWM can also work in open drain  mode. In that
              mode, the PWM actively pulls the line down.
              Warning: this setting is common to all PWM on the same device. If you change that parameter,
              all PWM located on the same device are  affected.
              If you want the change to be kept after a device reboot, make sure  to call the matching
              module <c>saveToFlash()</c>.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YPwmPowerSource.POWERMODE_USB_5V</c>, <c>YPwmPowerSource.POWERMODE_USB_3V</c>,
              <c>YPwmPowerSource.POWERMODE_EXT_V</c> and <c>YPwmPowerSource.POWERMODE_OPNDRN</c> corresponding to
               the PWM power source
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YPwmPowerSource.FindPwmPowerSource(System.String)">
            <summary>
              Retrieves a PWM generator power source for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the PWM generator power source is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPwmPowerSource.isOnline()</c> to test if the PWM generator power source is
              indeed online at a given time. In case of ambiguity when looking for
              a PWM generator power source by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the PWM generator power source, for instance
              <c>YPWMTX01.pwmPowerSource</c>.
            </param>
            <returns>
              a <c>YPwmPowerSource</c> object allowing you to drive the PWM generator power source.
            </returns>
        </member>
        <member name="M:YoctoLib.YPwmPowerSource.registerValueCallback(YoctoLib.YPwmPowerSource.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YPwmPowerSource.nextPwmPowerSource">
            <summary>
              Continues the enumeration of PWM generator power sources started using <c>yFirstPwmPowerSource()</c>.
            <para>
              Caution: You can't make any assumption about the returned PWM generator power sources order.
              If you want to find a specific a PWM generator power source, use <c>PwmPowerSource.findPwmPowerSource()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPwmPowerSource</c> object, corresponding to
              a PWM generator power source currently online, or a <c>null</c> pointer
              if there are no more PWM generator power sources to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YPwmPowerSource.FirstPwmPowerSource">
            <summary>
              Starts the enumeration of PWM generator power sources currently accessible.
            <para>
              Use the method <c>YPwmPowerSource.nextPwmPowerSource()</c> to iterate on
              next PWM generator power sources.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YPwmPowerSource</c> object, corresponding to
              the first PWM generator power source currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YQuadratureDecoder">
            <summary>
              The <c>YQuadratureDecoder</c> class allows you to read and configure Yoctopuce quadrature decoders.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.set_currentValue(System.Double)">
            <summary>
              Changes the current expected position of the quadrature decoder.
            <para>
              Invoking this function implicitly activates the quadrature decoder.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current expected position of the quadrature decoder
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.get_speed">
            <summary>
              Returns the increments frequency, in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the increments frequency, in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YQuadratureDecoder.SPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.get_decoding">
            <summary>
              Returns the current activation state of the quadrature decoder.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YQuadratureDecoder.DECODING_OFF</c>, <c>YQuadratureDecoder.DECODING_ON</c>,
              <c>YQuadratureDecoder.DECODING_DIV2</c> and <c>YQuadratureDecoder.DECODING_DIV4</c> corresponding
              to the current activation state of the quadrature decoder
            </returns>
            <para>
              On failure, throws an exception or returns <c>YQuadratureDecoder.DECODING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.set_decoding(System.Int32)">
            <summary>
              Changes the activation state of the quadrature decoder.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YQuadratureDecoder.DECODING_OFF</c>, <c>YQuadratureDecoder.DECODING_ON</c>,
              <c>YQuadratureDecoder.DECODING_DIV2</c> and <c>YQuadratureDecoder.DECODING_DIV4</c> corresponding
              to the activation state of the quadrature decoder
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.FindQuadratureDecoder(System.String)">
            <summary>
              Retrieves a quadrature decoder for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the quadrature decoder is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YQuadratureDecoder.isOnline()</c> to test if the quadrature decoder is
              indeed online at a given time. In case of ambiguity when looking for
              a quadrature decoder by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the quadrature decoder, for instance
              <c>YPWMRX01.quadratureDecoder</c>.
            </param>
            <returns>
              a <c>YQuadratureDecoder</c> object allowing you to drive the quadrature decoder.
            </returns>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.registerValueCallback(YoctoLib.YQuadratureDecoder.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.registerTimedReportCallback(YoctoLib.YQuadratureDecoder.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.nextQuadratureDecoder">
            <summary>
              Continues the enumeration of quadrature decoders started using <c>yFirstQuadratureDecoder()</c>.
            <para>
              Caution: You can't make any assumption about the returned quadrature decoders order.
              If you want to find a specific a quadrature decoder, use <c>QuadratureDecoder.findQuadratureDecoder()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YQuadratureDecoder</c> object, corresponding to
              a quadrature decoder currently online, or a <c>null</c> pointer
              if there are no more quadrature decoders to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YQuadratureDecoder.FirstQuadratureDecoder">
            <summary>
              Starts the enumeration of quadrature decoders currently accessible.
            <para>
              Use the method <c>YQuadratureDecoder.nextQuadratureDecoder()</c> to iterate on
              next quadrature decoders.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YQuadratureDecoder</c> object, corresponding to
              the first quadrature decoder currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YRangeFinder">
            <summary>
              The <c>YRangeFinder</c> class allows you to read and configure Yoctopuce range finders.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to easily perform a one-point linear calibration
              to compensate the effect of a glass or filter placed in front of the sensor.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRangeFinder.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured range.
            <para>
              That unit is a string.
              String value can be <c>"</c> or <c>mm</c>. Any other value is ignored.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
              WARNING: if a specific calibration is defined for the rangeFinder function, a
              unit system change will probably break it.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured range
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRangeFinder.get_rangeFinderMode">
            <summary>
              Returns the range finder running mode.
            <para>
              The rangefinder running mode
              allows you to put priority on precision, speed or maximum range.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YRangeFinder.RANGEFINDERMODE_DEFAULT</c>, <c>YRangeFinder.RANGEFINDERMODE_LONG_RANGE</c>,
              <c>YRangeFinder.RANGEFINDERMODE_HIGH_ACCURACY</c> and <c>YRangeFinder.RANGEFINDERMODE_HIGH_SPEED</c>
              corresponding to the range finder running mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.RANGEFINDERMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRangeFinder.set_rangeFinderMode(System.Int32)">
            <summary>
              Changes the rangefinder running mode, allowing you to put priority on
              precision, speed or maximum range.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YRangeFinder.RANGEFINDERMODE_DEFAULT</c>, <c>YRangeFinder.RANGEFINDERMODE_LONG_RANGE</c>,
              <c>YRangeFinder.RANGEFINDERMODE_HIGH_ACCURACY</c> and <c>YRangeFinder.RANGEFINDERMODE_HIGH_SPEED</c>
              corresponding to the rangefinder running mode, allowing you to put priority on
              precision, speed or maximum range
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRangeFinder.get_timeFrame">
            <summary>
              Returns the time frame used to measure the distance and estimate the measure
              reliability.
            <para>
              The time frame is expressed in milliseconds.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the time frame used to measure the distance and estimate the measure
              reliability
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.TIMEFRAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRangeFinder.set_timeFrame(System.Int64)">
            <summary>
              Changes the time frame used to measure the distance and estimate the measure
              reliability.
            <para>
              The time frame is expressed in milliseconds. A larger timeframe
              improves stability and reliability, at the cost of higher latency, but prevents
              the detection of events shorter than the time frame.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the time frame used to measure the distance and estimate the measure
              reliability
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRangeFinder.get_quality">
            <summary>
              Returns a measure quality estimate, based on measured dispersion.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to a measure quality estimate, based on measured dispersion
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.QUALITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRangeFinder.get_currentTemperature">
            <summary>
              Returns the current sensor temperature, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current sensor temperature, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.CURRENTTEMPERATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRangeFinder.FindRangeFinder(System.String)">
            <summary>
              Retrieves a range finder for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the range finder is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRangeFinder.isOnline()</c> to test if the range finder is
              indeed online at a given time. In case of ambiguity when looking for
              a range finder by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the range finder, for instance
              <c>YRNGFND1.rangeFinder1</c>.
            </param>
            <returns>
              a <c>YRangeFinder</c> object allowing you to drive the range finder.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.registerValueCallback(YoctoLib.YRangeFinder.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YRangeFinder.registerTimedReportCallback(YoctoLib.YRangeFinder.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YRangeFinder.get_hardwareCalibrationTemperature">
            <summary>
              Returns the temperature at the time when the latest calibration was performed.
            <para>
              This function can be used to determine if a new calibration for ambient temperature
              is required.
            </para>
            </summary>
            <returns>
              a temperature, as a floating point number.
              On failure, throws an exception or return YAPI.INVALID_DOUBLE.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.triggerTemperatureCalibration">
            <summary>
              Triggers a sensor calibration according to the current ambient temperature.
            <para>
              That
              calibration process needs no physical interaction with the sensor. It is performed
              automatically at device startup, but it is recommended to start it again when the
              temperature delta since the latest calibration exceeds 8°C.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.triggerSpadCalibration">
            <summary>
              Triggers the photon detector hardware calibration.
            <para>
              This function is part of the calibration procedure to compensate for the the effect
              of a cover glass. Make sure to read the chapter about hardware calibration for details
              on the calibration procedure for proper results.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.triggerOffsetCalibration(System.Double)">
            <summary>
              Triggers the hardware offset calibration of the distance sensor.
            <para>
              This function is part of the calibration procedure to compensate for the the effect
              of a cover glass. Make sure to read the chapter about hardware calibration for details
              on the calibration procedure for proper results.
            </para>
            </summary>
            <param name="targetDist">
              true distance of the calibration target, in mm or inches, depending
              on the unit selected in the device
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.triggerXTalkCalibration(System.Double)">
            <summary>
              Triggers the hardware cross-talk calibration of the distance sensor.
            <para>
              This function is part of the calibration procedure to compensate for the the effect
              of a cover glass. Make sure to read the chapter about hardware calibration for details
              on the calibration procedure for proper results.
            </para>
            </summary>
            <param name="targetDist">
              true distance of the calibration target, in mm or inches, depending
              on the unit selected in the device
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.cancelCoverGlassCalibrations">
            <summary>
              Cancels the effect of previous hardware calibration procedures to compensate
              for cover glass, and restores factory settings.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.nextRangeFinder">
            <summary>
              Continues the enumeration of range finders started using <c>yFirstRangeFinder()</c>.
            <para>
              Caution: You can't make any assumption about the returned range finders order.
              If you want to find a specific a range finder, use <c>RangeFinder.findRangeFinder()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRangeFinder</c> object, corresponding to
              a range finder currently online, or a <c>null</c> pointer
              if there are no more range finders to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YRangeFinder.FirstRangeFinder">
            <summary>
              Starts the enumeration of range finders currently accessible.
            <para>
              Use the method <c>YRangeFinder.nextRangeFinder()</c> to iterate on
              next range finders.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRangeFinder</c> object, corresponding to
              the first range finder currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YRealTimeClock">
            <summary>
              The <c>YRealTimeClock</c> class provide access to the embedded real-time clock available on some Yoctopuce
              devices.
            <para>
              It can provide current date and time, even after a power outage
              lasting several days. It is the base for automated wake-up functions provided by the WakeUpScheduler.
              The current time may represent a local time as well as an UTC time, but no automatic time change
              will occur to account for daylight saving time.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.get_unixTime">
            <summary>
              Returns the current time in Unix format (number of elapsed seconds since Jan 1st, 1970).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current time in Unix format (number of elapsed seconds since Jan 1st, 1970)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.UNIXTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.set_unixTime(System.Int64)">
            <summary>
              Changes the current time.
            <para>
              Time is specifid in Unix format (number of elapsed seconds since Jan 1st, 1970).
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current time
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.get_dateTime">
            <summary>
              Returns the current time in the form "YYYY/MM/DD hh:mm:ss".
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current time in the form "YYYY/MM/DD hh:mm:ss"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.DATETIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.get_utcOffset">
            <summary>
              Returns the number of seconds between current time and UTC time (time zone).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.UTCOFFSET_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.set_utcOffset(System.Int32)">
            <summary>
              Changes the number of seconds between current time and UTC time (time zone).
            <para>
              The timezone is automatically rounded to the nearest multiple of 15 minutes.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.get_timeSet">
            <summary>
              Returns true if the clock has been set, and false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YRealTimeClock.TIMESET_FALSE</c> or <c>YRealTimeClock.TIMESET_TRUE</c>, according to true
              if the clock has been set, and false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.TIMESET_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.FindRealTimeClock(System.String)">
            <summary>
              Retrieves a real-time clock for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the real-time clock is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRealTimeClock.isOnline()</c> to test if the real-time clock is
              indeed online at a given time. In case of ambiguity when looking for
              a real-time clock by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the real-time clock, for instance
              <c>YHUBGSM3.realTimeClock</c>.
            </param>
            <returns>
              a <c>YRealTimeClock</c> object allowing you to drive the real-time clock.
            </returns>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.registerValueCallback(YoctoLib.YRealTimeClock.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.nextRealTimeClock">
            <summary>
              Continues the enumeration of real-time clocks started using <c>yFirstRealTimeClock()</c>.
            <para>
              Caution: You can't make any assumption about the returned real-time clocks order.
              If you want to find a specific a real-time clock, use <c>RealTimeClock.findRealTimeClock()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRealTimeClock</c> object, corresponding to
              a real-time clock currently online, or a <c>null</c> pointer
              if there are no more real-time clocks to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YRealTimeClock.FirstRealTimeClock">
            <summary>
              Starts the enumeration of real-time clocks currently accessible.
            <para>
              Use the method <c>YRealTimeClock.nextRealTimeClock()</c> to iterate on
              next real-time clocks.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRealTimeClock</c> object, corresponding to
              the first real-time clock currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YRefFrame">
            <summary>
              The <c>YRefFrame</c> class is used to setup the base orientation of the Yoctopuce inertial
              sensors.
            <para>
              Thanks to this, orientation functions relative to the earth surface plane
              can use the proper reference frame. For some devices, the class also implements a
              tridimensional sensor calibration process, which can compensate for local variations
              of standard gravity and improve the precision of the tilt sensors.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRefFrame.set_bearing(System.Double)">
            <summary>
              Changes the reference bearing used by the compass.
            <para>
              The relative bearing
              indicated by the compass is the difference between the measured magnetic
              heading and the reference bearing indicated here.
            </para>
            <para>
              For instance, if you setup as reference bearing the value of the earth
              magnetic declination, the compass will provide the orientation relative
              to the geographic North.
            </para>
            <para>
              Similarly, when the sensor is not mounted along the standard directions
              because it has an additional yaw angle, you can set this angle in the reference
              bearing so that the compass provides the expected natural direction.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the reference bearing used by the compass
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_bearing">
            <summary>
              Returns the reference bearing used by the compass.
            <para>
              The relative bearing
              indicated by the compass is the difference between the measured magnetic
              heading and the reference bearing indicated here.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the reference bearing used by the compass
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRefFrame.BEARING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_fusionMode">
            <summary>
              Returns the sensor fusion mode.
            <para>
              Note that available sensor fusion modes depend on the sensor type.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YRefFrame.FUSIONMODE_NDOF</c>, <c>YRefFrame.FUSIONMODE_NDOF_FMC_OFF</c>,
              <c>YRefFrame.FUSIONMODE_M4G</c>, <c>YRefFrame.FUSIONMODE_COMPASS</c>,
              <c>YRefFrame.FUSIONMODE_IMU</c>, <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_1G8</c>,
              <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_3G6</c> and <c>YRefFrame.FUSIONMODE_INCLIN_10DEG</c>
              corresponding to the sensor fusion mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRefFrame.FUSIONMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.set_fusionMode(System.Int32)">
            <summary>
              Change the sensor fusion mode.
            <para>
              Note that available sensor fusion modes depend on the sensor type.
              Remember to call the matching module <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YRefFrame.FUSIONMODE_NDOF</c>, <c>YRefFrame.FUSIONMODE_NDOF_FMC_OFF</c>,
              <c>YRefFrame.FUSIONMODE_M4G</c>, <c>YRefFrame.FUSIONMODE_COMPASS</c>,
              <c>YRefFrame.FUSIONMODE_IMU</c>, <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_1G8</c>,
              <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_3G6</c> and <c>YRefFrame.FUSIONMODE_INCLIN_10DEG</c>
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.FindRefFrame(System.String)">
            <summary>
              Retrieves a reference frame for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the reference frame is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRefFrame.isOnline()</c> to test if the reference frame is
              indeed online at a given time. In case of ambiguity when looking for
              a reference frame by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the reference frame, for instance
              <c>Y3DMK002.refFrame</c>.
            </param>
            <returns>
              a <c>YRefFrame</c> object allowing you to drive the reference frame.
            </returns>
        </member>
        <member name="M:YoctoLib.YRefFrame.registerValueCallback(YoctoLib.YRefFrame.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_mountPosition">
            <summary>
              Returns the installation position of the device, as configured
              in order to define the reference frame for the compass and the
              pitch/roll tilt sensors.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among the <c>YRefFrame.MOUNTPOSITION</c> enumeration
              (<c>YRefFrame.MOUNTPOSITION.BOTTOM</c>,  <c>YRefFrame.MOUNTPOSITION.TOP</c>,
              <c>YRefFrame.MOUNTPOSITION.FRONT</c>,    <c>YRefFrame.MOUNTPOSITION.RIGHT</c>,
              <c>YRefFrame.MOUNTPOSITION.REAR</c>,     <c>YRefFrame.MOUNTPOSITION.LEFT</c>),
              corresponding to the installation in a box, on one of the six faces.
            </returns>
            <para>
              On failure, throws an exception or returns YRefFrame.MOUNTPOSITION_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_mountOrientation">
            <summary>
              Returns the installation orientation of the device, as configured
              in order to define the reference frame for the compass and the
              pitch/roll tilt sensors.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among the enumeration <c>YRefFrame.MOUNTORIENTATION</c>
              (<c>YRefFrame.MOUNTORIENTATION.TWELVE</c>, <c>YRefFrame.MOUNTORIENTATION.THREE</c>,
              <c>YRefFrame.MOUNTORIENTATION.SIX</c>,     <c>YRefFrame.MOUNTORIENTATION.NINE</c>)
              corresponding to the orientation of the "X" arrow on the device,
              as on a clock dial seen from an observer in the center of the box.
              On the bottom face, the 12H orientation points to the front, while
              on the top face, the 12H orientation points to the rear.
            </returns>
            <para>
              On failure, throws an exception or returns YRefFrame.MOUNTORIENTATION_INVALID.
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.set_mountPosition(YoctoLib.YRefFrame.MOUNTPOSITION,YoctoLib.YRefFrame.MOUNTORIENTATION)">
            <summary>
              Changes the compass and tilt sensor frame of reference.
            <para>
              The magnetic compass
              and the tilt sensors (pitch and roll) naturally work in the plane
              parallel to the earth surface. In case the device is not installed upright
              and horizontally, you must select its reference orientation (parallel to
              the earth surface) so that the measures are made relative to this position.
            </para>
            <para>
            </para>
            </summary>
            <param name="position">
              a value among the <c>YRefFrame.MOUNTPOSITION</c> enumeration
              (<c>YRefFrame.MOUNTPOSITION.BOTTOM</c>,  <c>YRefFrame.MOUNTPOSITION.TOP</c>,
              <c>YRefFrame.MOUNTPOSITION.FRONT</c>,    <c>YRefFrame.MOUNTPOSITION.RIGHT</c>,
              <c>YRefFrame.MOUNTPOSITION.REAR</c>,     <c>YRefFrame.MOUNTPOSITION.LEFT</c>),
              corresponding to the installation in a box, on one of the six faces.
            </param>
            <param name="orientation">
              a value among the enumeration <c>YRefFrame.MOUNTORIENTATION</c>
              (<c>YRefFrame.MOUNTORIENTATION.TWELVE</c>, <c>YRefFrame.MOUNTORIENTATION.THREE</c>,
              <c>YRefFrame.MOUNTORIENTATION.SIX</c>,     <c>YRefFrame.MOUNTORIENTATION.NINE</c>)
              corresponding to the orientation of the "X" arrow on the device,
              as on a clock dial seen from an observer in the center of the box.
              On the bottom face, the 12H orientation points to the front, while
              on the top face, the 12H orientation points to the rear.
            </param>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_calibrationState">
            <summary>
              Returns the 3D sensor calibration state (Yocto-3D-V2 only).
            <para>
              This function returns
              an integer representing the calibration state of the 3 inertial sensors of
              the BNO055 chip, found in the Yocto-3D-V2. Hundredths show the calibration state
              of the accelerometer, tenths show the calibration state of the magnetometer while
              units show the calibration state of the gyroscope. For each sensor, the value 0
              means no calibration and the value 3 means full calibration.
            </para>
            </summary>
            <returns>
              an integer representing the calibration state of Yocto-3D-V2:
              333 when fully calibrated, 0 when not calibrated at all.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
              For the Yocto-3D (V1), this function always return -3 (unsupported function).
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_measureQuality">
            <summary>
              Returns estimated quality of the orientation (Yocto-3D-V2 only).
            <para>
              This function returns
              an integer between 0 and 3 representing the degree of confidence of the position
              estimate. When the value is 3, the estimation is reliable. Below 3, one should
              expect sudden corrections, in particular for heading (<c>compass</c> function).
              The most frequent causes for values below 3 are magnetic interferences, and
              accelerations or rotations beyond the sensor range.
            </para>
            </summary>
            <returns>
              an integer between 0 and 3 (3 when the measure is reliable)
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
              For the Yocto-3D (V1), this function always return -3 (unsupported function).
            </para>
        </member>
        <member name="M:YoctoLib.YRefFrame.start3DCalibration">
            <summary>
              Initiates the sensors tridimensional calibration process.
            <para>
              This calibration is used at low level for inertial position estimation
              and to enhance the precision of the tilt sensors.
            </para>
            <para>
              After calling this method, the device should be moved according to the
              instructions provided by method <c>get_3DCalibrationHint</c>,
              and <c>more3DCalibration</c> should be invoked about 5 times per second.
              The calibration procedure is completed when the method
              <c>get_3DCalibrationProgress</c> returns 100. At this point,
              the computed calibration parameters can be applied using method
              <c>save3DCalibration</c>. The calibration process can be cancelled
              at any time using method <c>cancel3DCalibration</c>.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRefFrame.more3DCalibration">
            <summary>
              Continues the sensors tridimensional calibration process previously
              initiated using method <c>start3DCalibration</c>.
            <para>
              This method should be called approximately 5 times per second, while
              positioning the device according to the instructions provided by method
              <c>get_3DCalibrationHint</c>. Note that the instructions change during
              the calibration process.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_3DCalibrationHint">
            <summary>
              Returns instructions to proceed to the tridimensional calibration initiated with
              method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              a character string.
            </returns>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_3DCalibrationProgress">
            <summary>
              Returns the global process indicator for the tridimensional calibration
              initiated with method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              an integer between 0 (not started) and 100 (stage completed).
            </returns>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_3DCalibrationStage">
            <summary>
              Returns index of the current stage of the calibration
              initiated with method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              an integer, growing each time a calibration stage is completed.
            </returns>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_3DCalibrationStageProgress">
            <summary>
              Returns the process indicator for the current stage of the calibration
              initiated with method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              an integer between 0 (not started) and 100 (stage completed).
            </returns>
        </member>
        <member name="M:YoctoLib.YRefFrame.get_3DCalibrationLogMsg">
            <summary>
              Returns the latest log message from the calibration process.
            <para>
              When no new message is available, returns an empty string.
            </para>
            </summary>
            <returns>
              a character string.
            </returns>
        </member>
        <member name="M:YoctoLib.YRefFrame.save3DCalibration">
            <summary>
              Applies the sensors tridimensional calibration parameters that have just been computed.
            <para>
              Remember to call the <c>saveToFlash()</c>  method of the module if the changes
              must be kept when the device is restarted.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRefFrame.cancel3DCalibration">
            <summary>
              Aborts the sensors tridimensional calibration process et restores normal settings.
            <para>
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRefFrame.nextRefFrame">
            <summary>
              Continues the enumeration of reference frames started using <c>yFirstRefFrame()</c>.
            <para>
              Caution: You can't make any assumption about the returned reference frames order.
              If you want to find a specific a reference frame, use <c>RefFrame.findRefFrame()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRefFrame</c> object, corresponding to
              a reference frame currently online, or a <c>null</c> pointer
              if there are no more reference frames to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YRefFrame.FirstRefFrame">
            <summary>
              Starts the enumeration of reference frames currently accessible.
            <para>
              Use the method <c>YRefFrame.nextRefFrame()</c> to iterate on
              next reference frames.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRefFrame</c> object, corresponding to
              the first reference frame currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YRelay">
            <summary>
              The <c>YRelay</c> class allows you to drive a Yoctopuce relay or optocoupled output.
            <para>
              It can be used to simply switch the output on or off, but also to automatically generate short
              pulses of determined duration.
              On devices with two output for each relay (double throw), the two outputs are named A and B,
              with output A corresponding to the idle position (normally closed) and the output B corresponding to the
              active state (normally open).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YRelay.get_state">
            <summary>
              Returns the state of the relays (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YRelay.STATE_A</c> or <c>YRelay.STATE_B</c>, according to the state of the relays (A for
              the idle position, B for the active position)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.STATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.set_state(System.Int32)">
            <summary>
              Changes the state of the relays (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YRelay.STATE_A</c> or <c>YRelay.STATE_B</c>, according to the state of the relays (A for
              the idle position, B for the active position)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.get_stateAtPowerOn">
            <summary>
              Returns the state of the relays at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YRelay.STATEATPOWERON_UNCHANGED</c>, <c>YRelay.STATEATPOWERON_A</c> and
              <c>YRelay.STATEATPOWERON_B</c> corresponding to the state of the relays at device startup (A for
              the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.STATEATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.set_stateAtPowerOn(System.Int32)">
            <summary>
              Changes the state of the relays at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YRelay.STATEATPOWERON_UNCHANGED</c>, <c>YRelay.STATEATPOWERON_A</c> and
              <c>YRelay.STATEATPOWERON_B</c> corresponding to the state of the relays at device startup (A for
              the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.get_maxTimeOnStateA">
            <summary>
              Returns the maximum time (ms) allowed for the relay to stay in state
              A before automatically switching back in to B state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum time (ms) allowed for the relay to stay in state
              A before automatically switching back in to B state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.MAXTIMEONSTATEA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.set_maxTimeOnStateA(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the relay to stay in state A
              before automatically switching back in to B state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the relay to stay in state A
              before automatically switching back in to B state
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.get_maxTimeOnStateB">
            <summary>
              Retourne the maximum time (ms) allowed for the relay to stay in state B
              before automatically switching back in to A state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.MAXTIMEONSTATEB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.set_maxTimeOnStateB(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the relay to stay in state B before
              automatically switching back in to A state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the relay to stay in state B before
              automatically switching back in to A state
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.get_output">
            <summary>
              Returns the output state of the relays, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YRelay.OUTPUT_OFF</c> or <c>YRelay.OUTPUT_ON</c>, according to the output state of the
              relays, when used as a simple switch (single throw)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.OUTPUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.set_output(System.Int32)">
            <summary>
              Changes the output state of the relays, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YRelay.OUTPUT_OFF</c> or <c>YRelay.OUTPUT_ON</c>, according to the output state of the
              relays, when used as a simple switch (single throw)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.get_pulseTimer">
            <summary>
              Returns the number of milliseconds remaining before the relays is returned to idle position
              (state A), during a measured pulse generation.
            <para>
              When there is no ongoing pulse, returns zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before the relays is returned to idle position
              (state A), during a measured pulse generation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.pulse(System.Int32)">
            <summary>
              Sets the relay to output B (active) for a specified duration, then brings it
              automatically back to output A (idle state).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.delayedPulse(System.Int32,System.Int32)">
            <summary>
              Schedules a pulse.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_delay">
              waiting time before the pulse, in milliseconds
            </param>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.get_countdown">
            <summary>
              Returns the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.COUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.FindRelay(System.String)">
            <summary>
              Retrieves a relay for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the relay is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRelay.isOnline()</c> to test if the relay is
              indeed online at a given time. In case of ambiguity when looking for
              a relay by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the relay, for instance
              <c>YLTCHRL1.relay1</c>.
            </param>
            <returns>
              a <c>YRelay</c> object allowing you to drive the relay.
            </returns>
        </member>
        <member name="M:YoctoLib.YRelay.registerValueCallback(YoctoLib.YRelay.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YRelay.toggle">
            <summary>
              Switch the relay to the opposite state.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YRelay.nextRelay">
            <summary>
              Continues the enumeration of relays started using <c>yFirstRelay()</c>.
            <para>
              Caution: You can't make any assumption about the returned relays order.
              If you want to find a specific a relay, use <c>Relay.findRelay()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRelay</c> object, corresponding to
              a relay currently online, or a <c>null</c> pointer
              if there are no more relays to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YRelay.FirstRelay">
            <summary>
              Starts the enumeration of relays currently accessible.
            <para>
              Use the method <c>YRelay.nextRelay()</c> to iterate on
              next relays.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YRelay</c> object, corresponding to
              the first relay currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YSegmentedDisplay">
            <summary>
              The <c>SegmentedDisplay</c> class allows you to drive segmented displays.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YSegmentedDisplay.get_displayedText">
            <summary>
              Returns the text currently displayed on the screen.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the text currently displayed on the screen
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSegmentedDisplay.DISPLAYEDTEXT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSegmentedDisplay.set_displayedText(System.String)">
            <summary>
              Changes the text currently displayed on the screen.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the text currently displayed on the screen
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSegmentedDisplay.FindSegmentedDisplay(System.String)">
            <summary>
              Retrieves a segmented display for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the segmented display is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSegmentedDisplay.isOnline()</c> to test if the segmented display is
              indeed online at a given time. In case of ambiguity when looking for
              a segmented display by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the segmented display, for instance
              <c>MyDevice.segmentedDisplay</c>.
            </param>
            <returns>
              a <c>YSegmentedDisplay</c> object allowing you to drive the segmented display.
            </returns>
        </member>
        <member name="M:YoctoLib.YSegmentedDisplay.registerValueCallback(YoctoLib.YSegmentedDisplay.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YSegmentedDisplay.nextSegmentedDisplay">
            <summary>
              Continues the enumeration of segmented displays started using <c>yFirstSegmentedDisplay()</c>.
            <para>
              Caution: You can't make any assumption about the returned segmented displays order.
              If you want to find a specific a segmented display, use <c>SegmentedDisplay.findSegmentedDisplay()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSegmentedDisplay</c> object, corresponding to
              a segmented display currently online, or a <c>null</c> pointer
              if there are no more segmented displays to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YSegmentedDisplay.FirstSegmentedDisplay">
            <summary>
              Starts the enumeration of segmented displays currently accessible.
            <para>
              Use the method <c>YSegmentedDisplay.nextSegmentedDisplay()</c> to iterate on
              next segmented displays.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSegmentedDisplay</c> object, corresponding to
              the first segmented display currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="M:YoctoLib.YSnoopingRecord.get_time">
            <summary>
              Returns the elapsed time, in ms, since the beginning of the preceding message.
            <para>
            </para>
            </summary>
            <returns>
              the elapsed time, in ms, since the beginning of the preceding message.
            </returns>
        </member>
        <member name="M:YoctoLib.YSnoopingRecord.get_direction">
            <summary>
              Returns the message direction (RX=0, TX=1).
            <para>
            </para>
            </summary>
            <returns>
              the message direction (RX=0, TX=1).
            </returns>
        </member>
        <member name="M:YoctoLib.YSnoopingRecord.get_message">
            <summary>
              Returns the message content.
            <para>
            </para>
            </summary>
            <returns>
              the message content.
            </returns>
        </member>
        <member name="T:YoctoLib.YSerialPort">
            <summary>
              The <c>YSerialPort</c> class allows you to fully drive a Yoctopuce serial port.
            <para>
              It can be used to send and receive data, and to configure communication
              parameters (baud rate, bit count, parity, flow control and protocol).
              Note that Yoctopuce serial ports are not exposed as virtual COM ports.
              They are meant to be used in the same way as all Yoctopuce devices.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_rxCount">
            <summary>
              Returns the total number of bytes received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.RXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_txCount">
            <summary>
              Returns the total number of bytes transmitted since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes transmitted since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.TXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_errCount">
            <summary>
              Returns the total number of communication errors detected since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of communication errors detected since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.ERRCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_rxMsgCount">
            <summary>
              Returns the total number of messages received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.RXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_txMsgCount">
            <summary>
              Returns the total number of messages send since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages send since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.TXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_lastMsg">
            <summary>
              Returns the latest message fully received (for Line, Frame and Modbus protocols).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest message fully received (for Line, Frame and Modbus protocols)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.LASTMSG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_currentJob">
            <summary>
              Returns the name of the job file currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the job file currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.CURRENTJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.set_currentJob(System.String)">
            <summary>
              Selects a job file to run immediately.
            <para>
              If an empty string is
              given as argument, stops running current job file.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_startupJob">
            <summary>
              Returns the job file to use when the device is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the job file to use when the device is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.STARTUPJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.set_startupJob(System.String)">
            <summary>
              Changes the job to use when the device is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the job to use when the device is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_jobMaxTask">
            <summary>
              Returns the maximum number of tasks in a job that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of tasks in a job that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.JOBMAXTASK_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_jobMaxSize">
            <summary>
              Returns maximum size allowed for job files.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to maximum size allowed for job files
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.JOBMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_protocol">
            <summary>
              Returns the type of protocol used over the serial line, as a string.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "StxEtx" for ASCII messages delimited by STX/ETX codes,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Modbus-ASCII" for MODBUS messages in ASCII mode,
              "Modbus-RTU" for MODBUS messages in RTU mode,
              "Wiegand-ASCII" for Wiegand messages in ASCII mode,
              "Wiegand-26","Wiegand-34", etc for Wiegand messages in byte mode,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used over the serial line, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.PROTOCOL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.set_protocol(System.String)">
            <summary>
              Changes the type of protocol used over the serial line.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "StxEtx" for ASCII messages delimited by STX/ETX codes,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Modbus-ASCII" for MODBUS messages in ASCII mode,
              "Modbus-RTU" for MODBUS messages in RTU mode,
              "Wiegand-ASCII" for Wiegand messages in ASCII mode,
              "Wiegand-26","Wiegand-34", etc for Wiegand messages in byte mode,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each bytes sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used over the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_voltageLevel">
            <summary>
              Returns the voltage level used on the serial line.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YSerialPort.VOLTAGELEVEL_OFF</c>, <c>YSerialPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSerialPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSerialPort.VOLTAGELEVEL_RS232</c>,
              <c>YSerialPort.VOLTAGELEVEL_RS485</c> and <c>YSerialPort.VOLTAGELEVEL_TTL1V8</c> corresponding to
              the voltage level used on the serial line
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.VOLTAGELEVEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.set_voltageLevel(System.Int32)">
            <summary>
              Changes the voltage type used on the serial line.
            <para>
              Valid
              values  will depend on the Yoctopuce device model featuring
              the serial port feature.  Check your device documentation
              to find out which values are valid for that specific model.
              Trying to set an invalid value will have no effect.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YSerialPort.VOLTAGELEVEL_OFF</c>, <c>YSerialPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSerialPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSerialPort.VOLTAGELEVEL_RS232</c>,
              <c>YSerialPort.VOLTAGELEVEL_RS485</c> and <c>YSerialPort.VOLTAGELEVEL_TTL1V8</c> corresponding to
              the voltage type used on the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_serialMode">
            <summary>
              Returns the serial port communication parameters, as a string such as
              "9600,8N1".
            <para>
              The string includes the baud rate, the number of data bits,
              the parity, and the number of stop bits. An optional suffix is included
              if flow control is active: "CtsRts" for hardware handshake, "XOnXOff"
              for logical flow control and "Simplex" for acquiring a shared bus using
              the RTS line (as used by some RS485 adapters for instance).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the serial port communication parameters, as a string such as
              "9600,8N1"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.SERIALMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.set_serialMode(System.String)">
            <summary>
              Changes the serial port communication parameters, with a string such as
              "9600,8N1".
            <para>
              The string includes the baud rate, the number of data bits,
              the parity, and the number of stop bits. An optional suffix can be added
              to enable flow control: "CtsRts" for hardware handshake, "XOnXOff"
              for logical flow control and "Simplex" for acquiring a shared bus using
              the RTS line (as used by some RS485 adapters for instance).
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the serial port communication parameters, with a string such as
              "9600,8N1"
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.FindSerialPort(System.String)">
            <summary>
              Retrieves a serial port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the serial port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSerialPort.isOnline()</c> to test if the serial port is
              indeed online at a given time. In case of ambiguity when looking for
              a serial port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the serial port, for instance
              <c>RS232MK1.serialPort</c>.
            </param>
            <returns>
              a <c>YSerialPort</c> object allowing you to drive the serial port.
            </returns>
        </member>
        <member name="M:YoctoLib.YSerialPort.registerValueCallback(YoctoLib.YSerialPort.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YSerialPort.readLine">
            <summary>
              Reads a single line (or message) from the receive buffer, starting at current stream position.
            <para>
              This function is intended to be used when the serial port is configured for a message protocol,
              such as 'Line' mode or frame protocols.
            </para>
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              the function returns the oldest available line and moves the stream position just after.
              If no new full line is received, the function returns an empty line.
            </para>
            </summary>
            <returns>
              a string with a single line of text
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.readMessages(System.String,System.Int32)">
            <summary>
              Searches for incoming messages in the serial port receive buffer matching a given pattern,
              starting at current position.
            <para>
              This function will only compare and return printable characters
              in the message strings. Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              The search returns all messages matching the expression provided as argument in the buffer.
              If no matching message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="pattern">
              a limited regular expression describing the expected message format,
              or an empty string if all messages should be returned (no filtering).
              When using binary protocols, the format applies to the hexadecimal
              representation of the message.
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of strings containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.read_seek(System.Int32)">
            <summary>
              Changes the current internal stream position to the specified value.
            <para>
              This function
              does not affect the device, it only changes the value stored in the API object
              for the next read operations.
            </para>
            </summary>
            <param name="absPos">
              the absolute position index for next read operations.
            </param>
            <returns>
              nothing.
            </returns>
        </member>
        <member name="M:YoctoLib.YSerialPort.read_tell">
            <summary>
              Returns the current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the absolute position index for next read operations.
            </returns>
        </member>
        <member name="M:YoctoLib.YSerialPort.read_avail">
            <summary>
              Returns the number of bytes available to read in the input buffer starting from the
              current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the number of bytes available to read
            </returns>
        </member>
        <member name="M:YoctoLib.YSerialPort.queryLine(System.String,System.Int32)">
            <summary>
              Sends a text line query to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for 'Line' protocol.
            </para>
            </summary>
            <param name="query">
              the line query to send (without CR/LF)
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next text line received after sending the text query, as a string.
              Additional lines can be obtained by calling readLine or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.queryHex(System.String,System.Int32)">
            <summary>
              Sends a binary message to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for
              Frame-based protocol.
            </para>
            </summary>
            <param name="hexString">
              the message to send, coded in hexadecimal
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next frame received after sending the message, as a hex string.
              Additional frames can be obtained by calling readHex or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.uploadJob(System.String,System.String)">
            <summary>
              Saves the job definition string (JSON data) into a job file.
            <para>
              The job file can be later enabled using <c>selectJob()</c>.
            </para>
            </summary>
            <param name="jobfile">
              name of the job file to save on the device filesystem
            </param>
            <param name="jsonDef">
              a string containing a JSON definition of the job
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.selectJob(System.String)">
            <summary>
              Load and start processing the specified job file.
            <para>
              The file must have
              been previously created using the user interface or uploaded on the
              device filesystem using the <c>uploadJob()</c> function.
            </para>
            <para>
            </para>
            </summary>
            <param name="jobfile">
              name of the job file (on the device filesystem)
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.reset">
            <summary>
              Clears the serial port buffer and resets counters to zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeByte(System.Int32)">
            <summary>
              Sends a single byte to the serial port.
            <para>
            </para>
            </summary>
            <param name="code">
              the byte to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeStr(System.String)">
            <summary>
              Sends an ASCII string to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeBin(System.Byte[])">
            <summary>
              Sends a binary buffer to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeArray(System.Collections.Generic.List{System.Int32})">
            <summary>
              Sends a byte sequence (provided as a list of bytes) to the serial port.
            <para>
            </para>
            </summary>
            <param name="byteList">
              a list of byte codes
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeHex(System.String)">
            <summary>
              Sends a byte sequence (provided as a hexadecimal string) to the serial port.
            <para>
            </para>
            </summary>
            <param name="hexString">
              a string of hexadecimal byte codes
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeLine(System.String)">
            <summary>
              Sends an ASCII string to the serial port, followed by a line break (CR LF).
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.readByte">
            <summary>
              Reads one byte from the receive buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              or if there is no data available yet, the function returns YAPI.NO_MORE_DATA.
            </para>
            </summary>
            <returns>
              the next byte
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.readStr(System.Int32)">
            <summary>
              Reads data from the receive buffer as a string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of characters to read
            </param>
            <returns>
              a string with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.readBin(System.Int32)">
            <summary>
              Reads data from the receive buffer as a binary buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a binary object with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.readArray(System.Int32)">
            <summary>
              Reads data from the receive buffer as a list of bytes, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a sequence of bytes with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.readHex(System.Int32)">
            <summary>
              Reads data from the receive buffer as a hexadecimal string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nBytes">
              the maximum number of bytes to read
            </param>
            <returns>
              a string with receive buffer contents, encoded in hexadecimal
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.set_RTS(System.Int32)">
            <summary>
              Manually sets the state of the RTS line.
            <para>
              This function has no effect when
              hardware handshake is enabled, as the RTS line is driven automatically.
            </para>
            <para>
            </para>
            </summary>
            <param name="val">
              1 to turn RTS on, 0 to turn RTS off
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.get_CTS">
            <summary>
              Reads the level of the CTS line.
            <para>
              The CTS line is usually driven by
              the RTS signal of the connected serial device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              1 if the CTS line is high, 0 if the CTS line is low.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.snoopMessages(System.Int32)">
            <summary>
              Retrieves messages (both direction) in the serial port buffer, starting at current position.
            <para>
              This function will only compare and return printable characters in the message strings.
              Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              If no message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of <c>YSnoopingRecord</c> objects containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeStxEtx(System.String)">
            <summary>
              Sends an ASCII string to the serial port, preceeded with an STX code and
              followed by an ETX code.
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.writeMODBUS(System.String)">
            <summary>
              Sends a MODBUS message (provided as a hexadecimal string) to the serial port.
            <para>
              The message must start with the slave address. The MODBUS CRC/LRC is
              automatically added by the function. This function does not wait for a reply.
            </para>
            </summary>
            <param name="hexString">
              a hexadecimal message string, including device address but no CRC/LRC
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.queryMODBUS(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
              Sends a message to a specified MODBUS slave connected to the serial port, and reads the
              reply, if any.
            <para>
              The message is the PDU, provided as a vector of bytes.
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduBytes">
              the message to send (PDU), as a vector of bytes. The first byte of the
              PDU is the MODBUS function code.
            </param>
            <returns>
              the received reply, as a vector of bytes.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array (or a MODBUS error reply).
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusReadBits(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous internal bits (or coil status) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x01 (Read Coils).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first bit/coil to read (zero-based)
            </param>
            <param name="nBits">
              the number of bits/coils to read
            </param>
            <returns>
              a vector of integers, each corresponding to one bit.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusReadInputBits(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous input bits (or discrete inputs) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x02 (Read Discrete Inputs).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first bit/input to read (zero-based)
            </param>
            <param name="nBits">
              the number of bits/inputs to read
            </param>
            <returns>
              a vector of integers, each corresponding to one bit.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusReadRegisters(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous internal registers (holding registers) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x03 (Read Holding Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first holding register to read (zero-based)
            </param>
            <param name="nWords">
              the number of holding registers to read
            </param>
            <returns>
              a vector of integers, each corresponding to one 16-bit register value.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusReadInputRegisters(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous input registers (read-only registers) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x04 (Read Input Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first input register to read (zero-based)
            </param>
            <param name="nWords">
              the number of input registers to read
            </param>
            <returns>
              a vector of integers, each corresponding to one 16-bit input value.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusWriteBit(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets a single internal bit (or coil) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x05 (Write Single Coil).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the bit/coil to set (zero-based)
            </param>
            <param name="value">
              the value to set (0 for OFF state, non-zero for ON state)
            </param>
            <returns>
              the number of bits/coils affected on the device (1)
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusWriteBits(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
              Sets several contiguous internal bits (or coils) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x0f (Write Multiple Coils).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the first bit/coil to set (zero-based)
            </param>
            <param name="bits">
              the vector of bits to be set (one integer per bit)
            </param>
            <returns>
              the number of bits/coils affected on the device
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusWriteRegister(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets a single internal register (or holding register) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x06 (Write Single Register).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the register to set (zero-based)
            </param>
            <param name="value">
              the 16 bit value to set
            </param>
            <returns>
              the number of registers affected on the device (1)
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusWriteRegisters(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
              Sets several contiguous internal registers (or holding registers) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x10 (Write Multiple Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the first internal register to set (zero-based)
            </param>
            <param name="values">
              the vector of 16 bit values to set
            </param>
            <returns>
              the number of registers affected on the device
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.modbusWriteAndReadRegisters(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
              Sets several contiguous internal registers (holding registers) on a MODBUS serial device,
              then performs a contiguous read of a set of (possibly different) internal registers.
            <para>
              This method uses the MODBUS function code 0x17 (Read/Write Multiple Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduWriteAddr">
              the relative address of the first internal register to set (zero-based)
            </param>
            <param name="values">
              the vector of 16 bit values to set
            </param>
            <param name="pduReadAddr">
              the relative address of the first internal register to read (zero-based)
            </param>
            <param name="nReadWords">
              the number of 16 bit values to read
            </param>
            <returns>
              a vector of integers, each corresponding to one 16-bit register value read.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSerialPort.nextSerialPort">
            <summary>
              Continues the enumeration of serial ports started using <c>yFirstSerialPort()</c>.
            <para>
              Caution: You can't make any assumption about the returned serial ports order.
              If you want to find a specific a serial port, use <c>SerialPort.findSerialPort()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSerialPort</c> object, corresponding to
              a serial port currently online, or a <c>null</c> pointer
              if there are no more serial ports to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YSerialPort.FirstSerialPort">
            <summary>
              Starts the enumeration of serial ports currently accessible.
            <para>
              Use the method <c>YSerialPort.nextSerialPort()</c> to iterate on
              next serial ports.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSerialPort</c> object, corresponding to
              the first serial port currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YServo">
            <summary>
              The <c>YServo</c> class is designed to drive remote-control servo motors
              outputs.
            <para>
              This class allows you not only to move
              a servo to a given position, but also to specify the time interval
              in which the move should be performed. This makes it possible to
              synchronize two servos involved in a same move.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YServo.get_position">
            <summary>
              Returns the current servo position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current servo position
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.POSITION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.set_position(System.Int32)">
            <summary>
              Changes immediately the servo driving position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to immediately the servo driving position
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.get_enabled">
            <summary>
              Returns the state of the RC servo motors.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YServo.ENABLED_FALSE</c> or <c>YServo.ENABLED_TRUE</c>, according to the state of the RC servo motors
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.set_enabled(System.Int32)">
            <summary>
              Stops or starts the RC servo motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YServo.ENABLED_FALSE</c> or <c>YServo.ENABLED_TRUE</c>
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.get_range">
            <summary>
              Returns the current range of use of the servo.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current range of use of the servo
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.RANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.set_range(System.Int32)">
            <summary>
              Changes the range of use of the servo, specified in per cents.
            <para>
              A range of 100% corresponds to a standard control signal, that varies
              from 1 [ms] to 2 [ms], When using a servo that supports a double range,
              from 0.5 [ms] to 2.5 [ms], you can select a range of 200%.
              Be aware that using a range higher than what is supported by the servo
              is likely to damage the servo. Remember to call the matching module
              <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the range of use of the servo, specified in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.get_neutral">
            <summary>
              Returns the duration in microseconds of a neutral pulse for the servo.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the duration in microseconds of a neutral pulse for the servo
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.NEUTRAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.set_neutral(System.Int32)">
            <summary>
              Changes the duration of the pulse corresponding to the neutral position of the servo.
            <para>
              The duration is specified in microseconds, and the standard value is 1500 [us].
              This setting makes it possible to shift the range of use of the servo.
              Be aware that using a range higher than what is supported by the servo is
              likely to damage the servo. Remember to call the matching module
              <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the duration of the pulse corresponding to the neutral position of the servo
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.move(System.Int32,System.Int32)">
            <summary>
              Performs a smooth move at constant speed toward a given position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="target">
              new position at the end of the move
            </param>
            <param name="ms_duration">
              total duration of the move, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.get_positionAtPowerOn">
            <summary>
              Returns the servo position at device power up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the servo position at device power up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.POSITIONATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.set_positionAtPowerOn(System.Int32)">
            <summary>
              Configure the servo position at device power up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.get_enabledAtPowerOn">
            <summary>
              Returns the servo signal generator state at power up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YServo.ENABLEDATPOWERON_FALSE</c> or <c>YServo.ENABLEDATPOWERON_TRUE</c>, according to
              the servo signal generator state at power up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.ENABLEDATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.set_enabledAtPowerOn(System.Int32)">
            <summary>
              Configure the servo signal generator state at power up.
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YServo.ENABLEDATPOWERON_FALSE</c> or <c>YServo.ENABLEDATPOWERON_TRUE</c>
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YServo.FindServo(System.String)">
            <summary>
              Retrieves a RC servo motor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the RC servo motor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YServo.isOnline()</c> to test if the RC servo motor is
              indeed online at a given time. In case of ambiguity when looking for
              a RC servo motor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the RC servo motor, for instance
              <c>SERVORC1.servo1</c>.
            </param>
            <returns>
              a <c>YServo</c> object allowing you to drive the RC servo motor.
            </returns>
        </member>
        <member name="M:YoctoLib.YServo.registerValueCallback(YoctoLib.YServo.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YServo.nextServo">
            <summary>
              Continues the enumeration of RC servo motors started using <c>yFirstServo()</c>.
            <para>
              Caution: You can't make any assumption about the returned RC servo motors order.
              If you want to find a specific a RC servo motor, use <c>Servo.findServo()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YServo</c> object, corresponding to
              a RC servo motor currently online, or a <c>null</c> pointer
              if there are no more RC servo motors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YServo.FirstServo">
            <summary>
              Starts the enumeration of RC servo motors currently accessible.
            <para>
              Use the method <c>YServo.nextServo()</c> to iterate on
              next RC servo motors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YServo</c> object, corresponding to
              the first RC servo motor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiSnoopingRecord.get_time">
            <summary>
              Returns the elapsed time, in ms, since the beginning of the preceding message.
            <para>
            </para>
            </summary>
            <returns>
              the elapsed time, in ms, since the beginning of the preceding message.
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiSnoopingRecord.get_direction">
            <summary>
              Returns the message direction (RX=0, TX=1).
            <para>
            </para>
            </summary>
            <returns>
              the message direction (RX=0, TX=1).
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiSnoopingRecord.get_message">
            <summary>
              Returns the message content.
            <para>
            </para>
            </summary>
            <returns>
              the message content.
            </returns>
        </member>
        <member name="T:YoctoLib.YSpiPort">
            <summary>
              The <c>YSpiPort</c> class allows you to fully drive a Yoctopuce SPI port.
            <para>
              It can be used to send and receive data, and to configure communication
              parameters (baud rate, bit count, parity, flow control and protocol).
              Note that Yoctopuce SPI ports are not exposed as virtual COM ports.
              They are meant to be used in the same way as all Yoctopuce devices.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_rxCount">
            <summary>
              Returns the total number of bytes received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.RXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_txCount">
            <summary>
              Returns the total number of bytes transmitted since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes transmitted since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.TXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_errCount">
            <summary>
              Returns the total number of communication errors detected since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of communication errors detected since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.ERRCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_rxMsgCount">
            <summary>
              Returns the total number of messages received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.RXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_txMsgCount">
            <summary>
              Returns the total number of messages send since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages send since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.TXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_lastMsg">
            <summary>
              Returns the latest message fully received (for Line and Frame protocols).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest message fully received (for Line and Frame protocols)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.LASTMSG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_currentJob">
            <summary>
              Returns the name of the job file currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the job file currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.CURRENTJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_currentJob(System.String)">
            <summary>
              Selects a job file to run immediately.
            <para>
              If an empty string is
              given as argument, stops running current job file.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_startupJob">
            <summary>
              Returns the job file to use when the device is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the job file to use when the device is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.STARTUPJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_startupJob(System.String)">
            <summary>
              Changes the job to use when the device is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the job to use when the device is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_jobMaxTask">
            <summary>
              Returns the maximum number of tasks in a job that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of tasks in a job that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.JOBMAXTASK_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_jobMaxSize">
            <summary>
              Returns maximum size allowed for job files.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to maximum size allowed for job files
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.JOBMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_protocol">
            <summary>
              Returns the type of protocol used over the serial line, as a string.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used over the serial line, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.PROTOCOL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_protocol(System.String)">
            <summary>
              Changes the type of protocol used over the serial line.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each bytes sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used over the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_voltageLevel">
            <summary>
              Returns the voltage level used on the serial line.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YSpiPort.VOLTAGELEVEL_OFF</c>, <c>YSpiPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSpiPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSpiPort.VOLTAGELEVEL_RS232</c>,
              <c>YSpiPort.VOLTAGELEVEL_RS485</c> and <c>YSpiPort.VOLTAGELEVEL_TTL1V8</c> corresponding to the
              voltage level used on the serial line
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.VOLTAGELEVEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_voltageLevel(System.Int32)">
            <summary>
              Changes the voltage type used on the serial line.
            <para>
              Valid
              values  will depend on the Yoctopuce device model featuring
              the serial port feature.  Check your device documentation
              to find out which values are valid for that specific model.
              Trying to set an invalid value will have no effect.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YSpiPort.VOLTAGELEVEL_OFF</c>, <c>YSpiPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSpiPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSpiPort.VOLTAGELEVEL_RS232</c>,
              <c>YSpiPort.VOLTAGELEVEL_RS485</c> and <c>YSpiPort.VOLTAGELEVEL_TTL1V8</c> corresponding to the
              voltage type used on the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_spiMode">
            <summary>
              Returns the SPI port communication parameters, as a string such as
              "125000,0,msb".
            <para>
              The string includes the baud rate, the SPI mode (between
              0 and 3) and the bit order.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the SPI port communication parameters, as a string such as
              "125000,0,msb"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.SPIMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_spiMode(System.String)">
            <summary>
              Changes the SPI port communication parameters, with a string such as
              "125000,0,msb".
            <para>
              The string includes the baud rate, the SPI mode (between
              0 and 3) and the bit order.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the SPI port communication parameters, with a string such as
              "125000,0,msb"
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_ssPolarity">
            <summary>
              Returns the SS line polarity.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YSpiPort.SSPOLARITY_ACTIVE_LOW</c> or <c>YSpiPort.SSPOLARITY_ACTIVE_HIGH</c>, according
              to the SS line polarity
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.SSPOLARITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_ssPolarity(System.Int32)">
            <summary>
              Changes the SS line polarity.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YSpiPort.SSPOLARITY_ACTIVE_LOW</c> or <c>YSpiPort.SSPOLARITY_ACTIVE_HIGH</c>, according
              to the SS line polarity
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.get_shiftSampling">
            <summary>
              Returns true when the SDI line phase is shifted with regards to the SDO line.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YSpiPort.SHIFTSAMPLING_OFF</c> or <c>YSpiPort.SHIFTSAMPLING_ON</c>, according to true
              when the SDI line phase is shifted with regards to the SDO line
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.SHIFTSAMPLING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_shiftSampling(System.Int32)">
            <summary>
              Changes the SDI line sampling shift.
            <para>
              When disabled, SDI line is
              sampled in the middle of data output time. When enabled, SDI line is
              samples at the end of data output time.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YSpiPort.SHIFTSAMPLING_OFF</c> or <c>YSpiPort.SHIFTSAMPLING_ON</c>, according to the SDI
              line sampling shift
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.FindSpiPort(System.String)">
            <summary>
              Retrieves a SPI port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the SPI port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSpiPort.isOnline()</c> to test if the SPI port is
              indeed online at a given time. In case of ambiguity when looking for
              a SPI port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the SPI port, for instance
              <c>YSPIMK01.spiPort</c>.
            </param>
            <returns>
              a <c>YSpiPort</c> object allowing you to drive the SPI port.
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiPort.registerValueCallback(YoctoLib.YSpiPort.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YSpiPort.readLine">
            <summary>
              Reads a single line (or message) from the receive buffer, starting at current stream position.
            <para>
              This function is intended to be used when the serial port is configured for a message protocol,
              such as 'Line' mode or frame protocols.
            </para>
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              the function returns the oldest available line and moves the stream position just after.
              If no new full line is received, the function returns an empty line.
            </para>
            </summary>
            <returns>
              a string with a single line of text
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.readMessages(System.String,System.Int32)">
            <summary>
              Searches for incoming messages in the serial port receive buffer matching a given pattern,
              starting at current position.
            <para>
              This function will only compare and return printable characters
              in the message strings. Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              The search returns all messages matching the expression provided as argument in the buffer.
              If no matching message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="pattern">
              a limited regular expression describing the expected message format,
              or an empty string if all messages should be returned (no filtering).
              When using binary protocols, the format applies to the hexadecimal
              representation of the message.
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of strings containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.read_seek(System.Int32)">
            <summary>
              Changes the current internal stream position to the specified value.
            <para>
              This function
              does not affect the device, it only changes the value stored in the API object
              for the next read operations.
            </para>
            </summary>
            <param name="absPos">
              the absolute position index for next read operations.
            </param>
            <returns>
              nothing.
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiPort.read_tell">
            <summary>
              Returns the current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the absolute position index for next read operations.
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiPort.read_avail">
            <summary>
              Returns the number of bytes available to read in the input buffer starting from the
              current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the number of bytes available to read
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiPort.queryLine(System.String,System.Int32)">
            <summary>
              Sends a text line query to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for 'Line' protocol.
            </para>
            </summary>
            <param name="query">
              the line query to send (without CR/LF)
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next text line received after sending the text query, as a string.
              Additional lines can be obtained by calling readLine or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.queryHex(System.String,System.Int32)">
            <summary>
              Sends a binary message to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for
              Frame-based protocol.
            </para>
            </summary>
            <param name="hexString">
              the message to send, coded in hexadecimal
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next frame received after sending the message, as a hex string.
              Additional frames can be obtained by calling readHex or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.uploadJob(System.String,System.String)">
            <summary>
              Saves the job definition string (JSON data) into a job file.
            <para>
              The job file can be later enabled using <c>selectJob()</c>.
            </para>
            </summary>
            <param name="jobfile">
              name of the job file to save on the device filesystem
            </param>
            <param name="jsonDef">
              a string containing a JSON definition of the job
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.selectJob(System.String)">
            <summary>
              Load and start processing the specified job file.
            <para>
              The file must have
              been previously created using the user interface or uploaded on the
              device filesystem using the <c>uploadJob()</c> function.
            </para>
            <para>
            </para>
            </summary>
            <param name="jobfile">
              name of the job file (on the device filesystem)
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.reset">
            <summary>
              Clears the serial port buffer and resets counters to zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.writeByte(System.Int32)">
            <summary>
              Sends a single byte to the serial port.
            <para>
            </para>
            </summary>
            <param name="code">
              the byte to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.writeStr(System.String)">
            <summary>
              Sends an ASCII string to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.writeBin(System.Byte[])">
            <summary>
              Sends a binary buffer to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.writeArray(System.Collections.Generic.List{System.Int32})">
            <summary>
              Sends a byte sequence (provided as a list of bytes) to the serial port.
            <para>
            </para>
            </summary>
            <param name="byteList">
              a list of byte codes
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.writeHex(System.String)">
            <summary>
              Sends a byte sequence (provided as a hexadecimal string) to the serial port.
            <para>
            </para>
            </summary>
            <param name="hexString">
              a string of hexadecimal byte codes
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.writeLine(System.String)">
            <summary>
              Sends an ASCII string to the serial port, followed by a line break (CR LF).
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.readByte">
            <summary>
              Reads one byte from the receive buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              or if there is no data available yet, the function returns YAPI.NO_MORE_DATA.
            </para>
            </summary>
            <returns>
              the next byte
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.readStr(System.Int32)">
            <summary>
              Reads data from the receive buffer as a string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of characters to read
            </param>
            <returns>
              a string with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.readBin(System.Int32)">
            <summary>
              Reads data from the receive buffer as a binary buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a binary object with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.readArray(System.Int32)">
            <summary>
              Reads data from the receive buffer as a list of bytes, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a sequence of bytes with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.readHex(System.Int32)">
            <summary>
              Reads data from the receive buffer as a hexadecimal string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nBytes">
              the maximum number of bytes to read
            </param>
            <returns>
              a string with receive buffer contents, encoded in hexadecimal
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.set_SS(System.Int32)">
            <summary>
              Manually sets the state of the SS line.
            <para>
              This function has no effect when
              the SS line is handled automatically.
            </para>
            </summary>
            <param name="val">
              1 to turn SS active, 0 to release SS.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.snoopMessages(System.Int32)">
            <summary>
              Retrieves messages (both direction) in the SPI port buffer, starting at current position.
            <para>
            </para>
            <para>
              If no message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of <c>YSpiSnoopingRecord</c> objects containing the messages found, if any.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoLib.YSpiPort.nextSpiPort">
            <summary>
              Continues the enumeration of SPI ports started using <c>yFirstSpiPort()</c>.
            <para>
              Caution: You can't make any assumption about the returned SPI ports order.
              If you want to find a specific a SPI port, use <c>SpiPort.findSpiPort()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSpiPort</c> object, corresponding to
              a SPI port currently online, or a <c>null</c> pointer
              if there are no more SPI ports to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YSpiPort.FirstSpiPort">
            <summary>
              Starts the enumeration of SPI ports currently accessible.
            <para>
              Use the method <c>YSpiPort.nextSpiPort()</c> to iterate on
              next SPI ports.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YSpiPort</c> object, corresponding to
              the first SPI port currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YStepperMotor">
            <summary>
              The <c>YStepperMotor</c> class allows you to drive a stepper motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_motorState">
            <summary>
              Returns the motor working state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YStepperMotor.MOTORSTATE_ABSENT</c>, <c>YStepperMotor.MOTORSTATE_ALERT</c>,
              <c>YStepperMotor.MOTORSTATE_HI_Z</c>, <c>YStepperMotor.MOTORSTATE_STOP</c>,
              <c>YStepperMotor.MOTORSTATE_RUN</c> and <c>YStepperMotor.MOTORSTATE_BATCH</c> corresponding to the
              motor working state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.MOTORSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_diags">
            <summary>
              Returns the stepper motor controller diagnostics, as a bitmap.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the stepper motor controller diagnostics, as a bitmap
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.DIAGS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_stepPos(System.Double)">
            <summary>
              Changes the current logical motor position, measured in steps.
            <para>
              This command does not cause any motor move, as its purpose is only to setup
              the origin of the position counter. The fractional part of the position,
              that corresponds to the physical position of the rotor, is not changed.
              To trigger a motor move, use methods <c>moveTo()</c> or <c>moveRel()</c>
              instead.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current logical motor position, measured in steps
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_stepPos">
            <summary>
              Returns the current logical motor position, measured in steps.
            <para>
              The value may include a fractional part when micro-stepping is in use.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current logical motor position, measured in steps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.STEPPOS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_speed">
            <summary>
              Returns current motor speed, measured in steps per second.
            <para>
              To change speed, use method <c>changeSpeed()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to current motor speed, measured in steps per second
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.SPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_pullinSpeed(System.Double)">
            <summary>
              Changes the motor speed immediately reachable from stop state, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the motor speed immediately reachable from stop state,
              measured in steps per second
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_pullinSpeed">
            <summary>
              Returns the motor speed immediately reachable from stop state, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the motor speed immediately reachable from stop state,
              measured in steps per second
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.PULLINSPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_maxAccel(System.Double)">
            <summary>
              Changes the maximal motor acceleration, measured in steps per second^2.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the maximal motor acceleration, measured in steps per second^2
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_maxAccel">
            <summary>
              Returns the maximal motor acceleration, measured in steps per second^2.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the maximal motor acceleration, measured in steps per second^2
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.MAXACCEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_maxSpeed(System.Double)">
            <summary>
              Changes the maximal motor speed, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the maximal motor speed, measured in steps per second
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_maxSpeed">
            <summary>
              Returns the maximal motor speed, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the maximal motor speed, measured in steps per second
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.MAXSPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_stepping">
            <summary>
              Returns the stepping mode used to drive the motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YStepperMotor.STEPPING_MICROSTEP16</c>, <c>YStepperMotor.STEPPING_MICROSTEP8</c>,
              <c>YStepperMotor.STEPPING_MICROSTEP4</c>, <c>YStepperMotor.STEPPING_HALFSTEP</c> and
              <c>YStepperMotor.STEPPING_FULLSTEP</c> corresponding to the stepping mode used to drive the motor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.STEPPING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_stepping(System.Int32)">
            <summary>
              Changes the stepping mode used to drive the motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YStepperMotor.STEPPING_MICROSTEP16</c>, <c>YStepperMotor.STEPPING_MICROSTEP8</c>,
              <c>YStepperMotor.STEPPING_MICROSTEP4</c>, <c>YStepperMotor.STEPPING_HALFSTEP</c> and
              <c>YStepperMotor.STEPPING_FULLSTEP</c> corresponding to the stepping mode used to drive the motor
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_overcurrent">
            <summary>
              Returns the overcurrent alert and emergency stop threshold, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the overcurrent alert and emergency stop threshold, measured in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.OVERCURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_overcurrent(System.Int32)">
            <summary>
              Changes the overcurrent alert and emergency stop threshold, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the overcurrent alert and emergency stop threshold, measured in mA
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_tCurrStop">
            <summary>
              Returns the torque regulation current when the motor is stopped, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the torque regulation current when the motor is stopped, measured in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.TCURRSTOP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_tCurrStop(System.Int32)">
            <summary>
              Changes the torque regulation current when the motor is stopped, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the torque regulation current when the motor is stopped, measured in mA
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_tCurrRun">
            <summary>
              Returns the torque regulation current when the motor is running, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the torque regulation current when the motor is running, measured in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.TCURRRUN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_tCurrRun(System.Int32)">
            <summary>
              Changes the torque regulation current when the motor is running, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the torque regulation current when the motor is running, measured in mA
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.get_auxSignal">
            <summary>
              Returns the current value of the signal generated on the auxiliary output.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current value of the signal generated on the auxiliary output
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.AUXSIGNAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.set_auxSignal(System.Int32)">
            <summary>
              Changes the value of the signal generated on the auxiliary output.
            <para>
              Acceptable values depend on the auxiliary output signal type configured.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the signal generated on the auxiliary output
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YStepperMotor.FindStepperMotor(System.String)">
            <summary>
              Retrieves a stepper motor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the stepper motor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YStepperMotor.isOnline()</c> to test if the stepper motor is
              indeed online at a given time. In case of ambiguity when looking for
              a stepper motor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the stepper motor, for instance
              <c>MyDevice.stepperMotor1</c>.
            </param>
            <returns>
              a <c>YStepperMotor</c> object allowing you to drive the stepper motor.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.registerValueCallback(YoctoLib.YStepperMotor.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YStepperMotor.reset">
            <summary>
              Reinitialize the controller and clear all alert flags.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.findHomePosition(System.Double)">
            <summary>
              Starts the motor backward at the specified speed, to search for the motor home position.
            <para>
            </para>
            </summary>
            <param name="speed">
              desired speed, in steps per second.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.changeSpeed(System.Double)">
            <summary>
              Starts the motor at a given speed.
            <para>
              The time needed to reach the requested speed
              will depend on the acceleration parameters configured for the motor.
            </para>
            </summary>
            <param name="speed">
              desired speed, in steps per second. The minimal non-zero speed
              is 0.001 pulse per second.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.moveTo(System.Double)">
            <summary>
              Starts the motor to reach a given absolute position.
            <para>
              The time needed to reach the requested
              position will depend on the acceleration and max speed parameters configured for
              the motor.
            </para>
            </summary>
            <param name="absPos">
              absolute position, measured in steps from the origin.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.moveRel(System.Double)">
            <summary>
              Starts the motor to reach a given relative position.
            <para>
              The time needed to reach the requested
              position will depend on the acceleration and max speed parameters configured for
              the motor.
            </para>
            </summary>
            <param name="relPos">
              relative position, measured in steps from the current position.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.moveRelSlow(System.Double,System.Double)">
            <summary>
              Starts the motor to reach a given relative position, keeping the speed under the
              specified limit.
            <para>
              The time needed to reach the requested position will depend on
              the acceleration parameters configured for the motor.
            </para>
            </summary>
            <param name="relPos">
              relative position, measured in steps from the current position.
            </param>
            <param name="maxSpeed">
              limit speed, in steps per second.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.pause(System.Int32)">
            <summary>
              Keep the motor in the same state for the specified amount of time, before processing next command.
            <para>
            </para>
            </summary>
            <param name="waitMs">
              wait time, specified in milliseconds.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.emergencyStop">
            <summary>
              Stops the motor with an emergency alert, without taking any additional precaution.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.alertStepOut">
            <summary>
              Move one step in the direction opposite the direction set when the most recent alert was raised.
            <para>
              The move occurs even if the system is still in alert mode (end switch depressed). Caution.
              use this function with great care as it may cause mechanical damages !
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.alertStepDir(System.Int32)">
            <summary>
              Move one single step in the selected direction without regards to end switches.
            <para>
              The move occurs even if the system is still in alert mode (end switch depressed). Caution.
              use this function with great care as it may cause mechanical damages !
            </para>
            </summary>
            <param name="dir">
              Value +1 or -1, according to the desired direction of the move
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.abortAndBrake">
            <summary>
              Stops the motor smoothly as soon as possible, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.abortAndHiZ">
            <summary>
              Turn the controller into Hi-Z mode immediately, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.nextStepperMotor">
            <summary>
              Continues the enumeration of stepper motors started using <c>yFirstStepperMotor()</c>.
            <para>
              Caution: You can't make any assumption about the returned stepper motors order.
              If you want to find a specific a stepper motor, use <c>StepperMotor.findStepperMotor()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YStepperMotor</c> object, corresponding to
              a stepper motor currently online, or a <c>null</c> pointer
              if there are no more stepper motors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YStepperMotor.FirstStepperMotor">
            <summary>
              Starts the enumeration of stepper motors currently accessible.
            <para>
              Use the method <c>YStepperMotor.nextStepperMotor()</c> to iterate on
              next stepper motors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YStepperMotor</c> object, corresponding to
              the first stepper motor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YTemperature">
            <summary>
              The <c>YTemperature</c> class allows you to read and configure Yoctopuce temperature sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to configure some specific parameters
              for some sensors (connection type, temperature mapping table).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YTemperature.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured temperature.
            <para>
              That unit is a string.
              If that strings end with the letter F all temperatures values will returned in
              Fahrenheit degrees. If that String ends with the letter K all values will be
              returned in Kelvin degrees. If that string ends with the letter C all values will be
              returned in Celsius degrees.  If the string ends with any other character the
              change will be ignored. Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
              WARNING: if a specific calibration is defined for the temperature function, a
              unit system change will probably break it.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured temperature
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.get_sensorType">
            <summary>
              Returns the temperature sensor type.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YTemperature.SENSORTYPE_DIGITAL</c>, <c>YTemperature.SENSORTYPE_TYPE_K</c>,
              <c>YTemperature.SENSORTYPE_TYPE_E</c>, <c>YTemperature.SENSORTYPE_TYPE_J</c>,
              <c>YTemperature.SENSORTYPE_TYPE_N</c>, <c>YTemperature.SENSORTYPE_TYPE_R</c>,
              <c>YTemperature.SENSORTYPE_TYPE_S</c>, <c>YTemperature.SENSORTYPE_TYPE_T</c>,
              <c>YTemperature.SENSORTYPE_PT100_4WIRES</c>, <c>YTemperature.SENSORTYPE_PT100_3WIRES</c>,
              <c>YTemperature.SENSORTYPE_PT100_2WIRES</c>, <c>YTemperature.SENSORTYPE_RES_OHM</c>,
              <c>YTemperature.SENSORTYPE_RES_NTC</c>, <c>YTemperature.SENSORTYPE_RES_LINEAR</c>,
              <c>YTemperature.SENSORTYPE_RES_INTERNAL</c>, <c>YTemperature.SENSORTYPE_IR</c>,
              <c>YTemperature.SENSORTYPE_RES_PT1000</c> and <c>YTemperature.SENSORTYPE_CHANNEL_OFF</c>
              corresponding to the temperature sensor type
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTemperature.SENSORTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.set_sensorType(System.Int32)">
            <summary>
              Changes the temperature sensor type.
            <para>
              This function is used
              to define the type of thermocouple (K,E...) used with the device.
              It has no effect if module is using a digital sensor or a thermistor.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YTemperature.SENSORTYPE_DIGITAL</c>, <c>YTemperature.SENSORTYPE_TYPE_K</c>,
              <c>YTemperature.SENSORTYPE_TYPE_E</c>, <c>YTemperature.SENSORTYPE_TYPE_J</c>,
              <c>YTemperature.SENSORTYPE_TYPE_N</c>, <c>YTemperature.SENSORTYPE_TYPE_R</c>,
              <c>YTemperature.SENSORTYPE_TYPE_S</c>, <c>YTemperature.SENSORTYPE_TYPE_T</c>,
              <c>YTemperature.SENSORTYPE_PT100_4WIRES</c>, <c>YTemperature.SENSORTYPE_PT100_3WIRES</c>,
              <c>YTemperature.SENSORTYPE_PT100_2WIRES</c>, <c>YTemperature.SENSORTYPE_RES_OHM</c>,
              <c>YTemperature.SENSORTYPE_RES_NTC</c>, <c>YTemperature.SENSORTYPE_RES_LINEAR</c>,
              <c>YTemperature.SENSORTYPE_RES_INTERNAL</c>, <c>YTemperature.SENSORTYPE_IR</c>,
              <c>YTemperature.SENSORTYPE_RES_PT1000</c> and <c>YTemperature.SENSORTYPE_CHANNEL_OFF</c>
              corresponding to the temperature sensor type
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.get_signalValue">
            <summary>
              Returns the current value of the electrical signal measured by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of the electrical signal measured by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTemperature.SIGNALVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.get_signalUnit">
            <summary>
              Returns the measuring unit of the electrical signal used by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the measuring unit of the electrical signal used by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTemperature.SIGNALUNIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.FindTemperature(System.String)">
            <summary>
              Retrieves a temperature sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the temperature sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YTemperature.isOnline()</c> to test if the temperature sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a temperature sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the temperature sensor, for instance
              <c>METEOMK2.temperature</c>.
            </param>
            <returns>
              a <c>YTemperature</c> object allowing you to drive the temperature sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YTemperature.registerValueCallback(YoctoLib.YTemperature.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YTemperature.registerTimedReportCallback(YoctoLib.YTemperature.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YTemperature.set_ntcParameters(System.Double,System.Double)">
            <summary>
              Configures NTC thermistor parameters in order to properly compute the temperature from
              the measured resistance.
            <para>
              For increased precision, you can enter a complete mapping
              table using set_thermistorResponseTable. This function can only be used with a
              temperature sensor based on thermistors.
            </para>
            <para>
            </para>
            </summary>
            <param name="res25">
              thermistor resistance at 25 degrees Celsius
            </param>
            <param name="beta">
              Beta value
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.set_thermistorResponseTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Records a thermistor response table, in order to interpolate the temperature from
              the measured resistance.
            <para>
              This function can only be used with a temperature
              sensor based on thermistors.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all
              temperatures (in degrees Celsius) for which the resistance of the
              thermistor is specified.
            </param>
            <param name="resValues">
              array of floating point numbers, corresponding to the resistance
              values (in Ohms) for each of the temperature included in the first
              argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.loadThermistorResponseTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Retrieves the thermistor response table previously configured using the
              <c>set_thermistorResponseTable</c> function.
            <para>
              This function can only be used with a
              temperature sensor based on thermistors.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, that is filled by the function
              with all temperatures (in degrees Celsius) for which the resistance
              of the thermistor is specified.
            </param>
            <param name="resValues">
              array of floating point numbers, that is filled by the function
              with the value (in Ohms) for each of the temperature included in the
              first argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTemperature.nextTemperature">
            <summary>
              Continues the enumeration of temperature sensors started using <c>yFirstTemperature()</c>.
            <para>
              Caution: You can't make any assumption about the returned temperature sensors order.
              If you want to find a specific a temperature sensor, use <c>Temperature.findTemperature()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YTemperature</c> object, corresponding to
              a temperature sensor currently online, or a <c>null</c> pointer
              if there are no more temperature sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YTemperature.FirstTemperature">
            <summary>
              Starts the enumeration of temperature sensors currently accessible.
            <para>
              Use the method <c>YTemperature.nextTemperature()</c> to iterate on
              next temperature sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YTemperature</c> object, corresponding to
              the first temperature sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YTilt">
            <summary>
              The <c>YSensor</c> class is the parent class for all Yoctopuce sensor types.
            <para>
              It can be
              used to read the current value and unit of any sensor, read the min/max
              value, configure autonomous recording frequency and access recorded data.
              It also provide a function to register a callback invoked each time the
              observed value changes, or at a predefined interval. Using this class rather
              than a specific subclass makes it possible to create generic applications
              that work with any Yoctopuce sensor, even those that do not yet exist.
              Note: The <c>YAnButton</c> class is the only analog input which does not inherit
              from <c>YSensor</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YTilt.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTilt.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YTilt.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTilt.FindTilt(System.String)">
            <summary>
              Retrieves a tilt sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the tilt sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YTilt.isOnline()</c> to test if the tilt sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a tilt sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the tilt sensor, for instance
              <c>Y3DMK002.tilt1</c>.
            </param>
            <returns>
              a <c>YTilt</c> object allowing you to drive the tilt sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YTilt.registerValueCallback(YoctoLib.YTilt.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YTilt.registerTimedReportCallback(YoctoLib.YTilt.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YTilt.calibrateToZero">
            <summary>
              Performs a zero calibration for the tilt measurement (Yocto-Inclinometer only).
            <para>
              When this method is invoked, a simple shift (translation)
              is applied so that the current position is reported as a zero angle.
              Be aware that this shift will also affect the measurement boundaries.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTilt.restoreZeroCalibration">
            <summary>
              Cancels any previous zero calibration for the tilt measurement (Yocto-Inclinometer only).
            <para>
              This function restores the factory zero calibration.
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YTilt.nextTilt">
            <summary>
              Continues the enumeration of tilt sensors started using <c>yFirstTilt()</c>.
            <para>
              Caution: You can't make any assumption about the returned tilt sensors order.
              If you want to find a specific a tilt sensor, use <c>Tilt.findTilt()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YTilt</c> object, corresponding to
              a tilt sensor currently online, or a <c>null</c> pointer
              if there are no more tilt sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YTilt.FirstTilt">
            <summary>
              Starts the enumeration of tilt sensors currently accessible.
            <para>
              Use the method <c>YTilt.nextTilt()</c> to iterate on
              next tilt sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YTilt</c> object, corresponding to
              the first tilt sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YTvoc">
            <summary>
              The <c>YTvoc</c> class allows you to read and configure Yoctopuce Total Volatile Organic Compound sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YTvoc.FindTvoc(System.String)">
            <summary>
              Retrieves a Total  Volatile Organic Compound sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the Total  Volatile Organic Compound sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YTvoc.isOnline()</c> to test if the Total  Volatile Organic Compound sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a Total  Volatile Organic Compound sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the Total  Volatile Organic Compound sensor, for instance
              <c>YVOCMK03.tvoc</c>.
            </param>
            <returns>
              a <c>YTvoc</c> object allowing you to drive the Total  Volatile Organic Compound sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YTvoc.registerValueCallback(YoctoLib.YTvoc.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YTvoc.registerTimedReportCallback(YoctoLib.YTvoc.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YTvoc.nextTvoc">
            <summary>
              Continues the enumeration of Total Volatile Organic Compound sensors started using <c>yFirstTvoc()</c>.
            <para>
              Caution: You can't make any assumption about the returned Total Volatile Organic Compound sensors order.
              If you want to find a specific a Total  Volatile Organic Compound sensor, use <c>Tvoc.findTvoc()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YTvoc</c> object, corresponding to
              a Total  Volatile Organic Compound sensor currently online, or a <c>null</c> pointer
              if there are no more Total Volatile Organic Compound sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YTvoc.FirstTvoc">
            <summary>
              Starts the enumeration of Total Volatile Organic Compound sensors currently accessible.
            <para>
              Use the method <c>YTvoc.nextTvoc()</c> to iterate on
              next Total Volatile Organic Compound sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YTvoc</c> object, corresponding to
              the first Total Volatile Organic Compound sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YVoc">
            <summary>
              The <c>YVoc</c> class allows you to read and configure Yoctopuce Volatile Organic Compound sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YVoc.FindVoc(System.String)">
            <summary>
              Retrieves a Volatile Organic Compound sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the Volatile Organic Compound sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YVoc.isOnline()</c> to test if the Volatile Organic Compound sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a Volatile Organic Compound sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the Volatile Organic Compound sensor, for instance
              <c>YVOCMK03.voc</c>.
            </param>
            <returns>
              a <c>YVoc</c> object allowing you to drive the Volatile Organic Compound sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YVoc.registerValueCallback(YoctoLib.YVoc.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YVoc.registerTimedReportCallback(YoctoLib.YVoc.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YVoc.nextVoc">
            <summary>
              Continues the enumeration of Volatile Organic Compound sensors started using <c>yFirstVoc()</c>.
            <para>
              Caution: You can't make any assumption about the returned Volatile Organic Compound sensors order.
              If you want to find a specific a Volatile Organic Compound sensor, use <c>Voc.findVoc()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YVoc</c> object, corresponding to
              a Volatile Organic Compound sensor currently online, or a <c>null</c> pointer
              if there are no more Volatile Organic Compound sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YVoc.FirstVoc">
            <summary>
              Starts the enumeration of Volatile Organic Compound sensors currently accessible.
            <para>
              Use the method <c>YVoc.nextVoc()</c> to iterate on
              next Volatile Organic Compound sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YVoc</c> object, corresponding to
              the first Volatile Organic Compound sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YVoltage">
            <summary>
              The <c>YVoltage</c> class allows you to read and configure Yoctopuce voltage sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YVoltage.get_enabled">
            <summary>
              Returns the activation state of this input.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YVoltage.ENABLED_FALSE</c> or <c>YVoltage.ENABLED_TRUE</c>, according to the activation
              state of this input
            </returns>
            <para>
              On failure, throws an exception or returns <c>YVoltage.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YVoltage.set_enabled(System.Int32)">
            <summary>
              Changes the activation state of this voltage input.
            <para>
              When AC measurements are disabled,
              the device will always assume a DC signal, and vice-versa. When both AC and DC measurements
              are active, the device switches between AC and DC mode based on the relative amplitude
              of variations compared to the average value.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YVoltage.ENABLED_FALSE</c> or <c>YVoltage.ENABLED_TRUE</c>, according to the activation
              state of this voltage input
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YVoltage.FindVoltage(System.String)">
            <summary>
              Retrieves a voltage sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the voltage sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YVoltage.isOnline()</c> to test if the voltage sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a voltage sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the voltage sensor, for instance
              <c>MOTORCTL.voltage</c>.
            </param>
            <returns>
              a <c>YVoltage</c> object allowing you to drive the voltage sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YVoltage.registerValueCallback(YoctoLib.YVoltage.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YVoltage.registerTimedReportCallback(YoctoLib.YVoltage.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YVoltage.nextVoltage">
            <summary>
              Continues the enumeration of voltage sensors started using <c>yFirstVoltage()</c>.
            <para>
              Caution: You can't make any assumption about the returned voltage sensors order.
              If you want to find a specific a voltage sensor, use <c>Voltage.findVoltage()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YVoltage</c> object, corresponding to
              a voltage sensor currently online, or a <c>null</c> pointer
              if there are no more voltage sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YVoltage.FirstVoltage">
            <summary>
              Starts the enumeration of voltage sensors currently accessible.
            <para>
              Use the method <c>YVoltage.nextVoltage()</c> to iterate on
              next voltage sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YVoltage</c> object, corresponding to
              the first voltage sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YVoltageOutput">
            <summary>
              The <c>YVoltageOutput</c> class allows you to drive a voltage output.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.set_currentVoltage(System.Double)">
            <summary>
              Changes the output voltage, in V.
            <para>
              Valid range is from 0 to 10V.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the output voltage, in V
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.get_currentVoltage">
            <summary>
              Returns the output voltage set point, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the output voltage set point, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YVoltageOutput.CURRENTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.set_voltageAtStartUp(System.Double)">
            <summary>
              Changes the output voltage at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the output voltage at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.get_voltageAtStartUp">
            <summary>
              Returns the selected voltage output at device startup, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the selected voltage output at device startup, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YVoltageOutput.VOLTAGEATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.FindVoltageOutput(System.String)">
            <summary>
              Retrieves a voltage output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the voltage output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YVoltageOutput.isOnline()</c> to test if the voltage output is
              indeed online at a given time. In case of ambiguity when looking for
              a voltage output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the voltage output, for instance
              <c>TX010V01.voltageOutput1</c>.
            </param>
            <returns>
              a <c>YVoltageOutput</c> object allowing you to drive the voltage output.
            </returns>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.registerValueCallback(YoctoLib.YVoltageOutput.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.voltageMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of output voltage.
            <para>
              Any explicit voltage
              change cancels any ongoing transition process.
            </para>
            </summary>
            <param name="V_target">
              new output voltage value at the end of the transition
              (floating-point number, representing the end voltage in V)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.nextVoltageOutput">
            <summary>
              Continues the enumeration of voltage outputs started using <c>yFirstVoltageOutput()</c>.
            <para>
              Caution: You can't make any assumption about the returned voltage outputs order.
              If you want to find a specific a voltage output, use <c>VoltageOutput.findVoltageOutput()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YVoltageOutput</c> object, corresponding to
              a voltage output currently online, or a <c>null</c> pointer
              if there are no more voltage outputs to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YVoltageOutput.FirstVoltageOutput">
            <summary>
              Starts the enumeration of voltage outputs currently accessible.
            <para>
              Use the method <c>YVoltageOutput.nextVoltageOutput()</c> to iterate on
              next voltage outputs.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YVoltageOutput</c> object, corresponding to
              the first voltage output currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YWakeUpMonitor">
            <summary>
              The <c>YWakeUpMonitor</c> class handles globally all wake-up sources, as well
              as automated sleep mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.get_powerDuration">
            <summary>
              Returns the maximal wake up time (in seconds) before automatically going to sleep.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximal wake up time (in seconds) before automatically going to sleep
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.POWERDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.set_powerDuration(System.Int32)">
            <summary>
              Changes the maximal wake up time (seconds) before automatically going to sleep.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximal wake up time (seconds) before automatically going to sleep
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.get_sleepCountdown">
            <summary>
              Returns the delay before the  next sleep period.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the delay before the  next sleep period
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.SLEEPCOUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.set_sleepCountdown(System.Int32)">
            <summary>
              Changes the delay before the next sleep period.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the delay before the next sleep period
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.get_nextWakeUp">
            <summary>
              Returns the next scheduled wake up date/time (UNIX format).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the next scheduled wake up date/time (UNIX format)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.NEXTWAKEUP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.set_nextWakeUp(System.Int64)">
            <summary>
              Changes the days of the week when a wake up must take place.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the days of the week when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.get_wakeUpReason">
            <summary>
              Returns the latest wake up reason.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWakeUpMonitor.WAKEUPREASON_USBPOWER</c>, <c>YWakeUpMonitor.WAKEUPREASON_EXTPOWER</c>,
              <c>YWakeUpMonitor.WAKEUPREASON_ENDOFSLEEP</c>, <c>YWakeUpMonitor.WAKEUPREASON_EXTSIG1</c>,
              <c>YWakeUpMonitor.WAKEUPREASON_SCHEDULE1</c> and <c>YWakeUpMonitor.WAKEUPREASON_SCHEDULE2</c>
              corresponding to the latest wake up reason
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.WAKEUPREASON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.get_wakeUpState">
            <summary>
              Returns  the current state of the monitor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWakeUpMonitor.WAKEUPSTATE_SLEEPING</c> or <c>YWakeUpMonitor.WAKEUPSTATE_AWAKE</c>,
              according to  the current state of the monitor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.WAKEUPSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.FindWakeUpMonitor(System.String)">
            <summary>
              Retrieves a wake-up monitor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the wake-up monitor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWakeUpMonitor.isOnline()</c> to test if the wake-up monitor is
              indeed online at a given time. In case of ambiguity when looking for
              a wake-up monitor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the wake-up monitor, for instance
              <c>YHUBGSM3.wakeUpMonitor</c>.
            </param>
            <returns>
              a <c>YWakeUpMonitor</c> object allowing you to drive the wake-up monitor.
            </returns>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.registerValueCallback(YoctoLib.YWakeUpMonitor.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.wakeUp">
            <summary>
              Forces a wake up.
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.sleep(System.Int32)">
            <summary>
              Goes to sleep until the next wake up condition is met,  the
              RTC time must have been set before calling this function.
            <para>
            </para>
            </summary>
            <param name="secBeforeSleep">
              number of seconds before going into sleep mode,
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.sleepFor(System.Int32,System.Int32)">
            <summary>
              Goes to sleep for a specific duration or until the next wake up condition is met, the
              RTC time must have been set before calling this function.
            <para>
              The count down before sleep
              can be canceled with resetSleepCountDown.
            </para>
            </summary>
            <param name="secUntilWakeUp">
              number of seconds before next wake up
            </param>
            <param name="secBeforeSleep">
              number of seconds before going into sleep mode
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.sleepUntil(System.Int32,System.Int32)">
            <summary>
              Go to sleep until a specific date is reached or until the next wake up condition is met, the
              RTC time must have been set before calling this function.
            <para>
              The count down before sleep
              can be canceled with resetSleepCountDown.
            </para>
            </summary>
            <param name="wakeUpTime">
              wake-up datetime (UNIX format)
            </param>
            <param name="secBeforeSleep">
              number of seconds before going into sleep mode
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.resetSleepCountDown">
            <summary>
              Resets the sleep countdown.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.nextWakeUpMonitor">
            <summary>
              Continues the enumeration of wake-up monitors started using <c>yFirstWakeUpMonitor()</c>.
            <para>
              Caution: You can't make any assumption about the returned wake-up monitors order.
              If you want to find a specific a wake-up monitor, use <c>WakeUpMonitor.findWakeUpMonitor()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWakeUpMonitor</c> object, corresponding to
              a wake-up monitor currently online, or a <c>null</c> pointer
              if there are no more wake-up monitors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YWakeUpMonitor.FirstWakeUpMonitor">
            <summary>
              Starts the enumeration of wake-up monitors currently accessible.
            <para>
              Use the method <c>YWakeUpMonitor.nextWakeUpMonitor()</c> to iterate on
              next wake-up monitors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWakeUpMonitor</c> object, corresponding to
              the first wake-up monitor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YWakeUpSchedule">
            <summary>
              The <c>YWakeUpSchedule</c> class implements a wake up condition.
            <para>
              The wake up time is
              specified as a set of months and/or days and/or hours and/or minutes when the
              wake up should happen.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_minutesA">
            <summary>
              Returns the minutes in the 00-29 interval of each hour scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minutes in the 00-29 interval of each hour scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MINUTESA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.set_minutesA(System.Int32)">
            <summary>
              Changes the minutes in the 00-29 interval when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minutes in the 00-29 interval when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_minutesB">
            <summary>
              Returns the minutes in the 30-59 interval of each hour scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minutes in the 30-59 interval of each hour scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MINUTESB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.set_minutesB(System.Int32)">
            <summary>
              Changes the minutes in the 30-59 interval when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minutes in the 30-59 interval when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_hours">
            <summary>
              Returns the hours scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the hours scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.HOURS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.set_hours(System.Int32)">
            <summary>
              Changes the hours when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the hours when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_weekDays">
            <summary>
              Returns the days of the week scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the days of the week scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.WEEKDAYS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.set_weekDays(System.Int32)">
            <summary>
              Changes the days of the week when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the days of the week when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_monthDays">
            <summary>
              Returns the days of the month scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the days of the month scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MONTHDAYS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.set_monthDays(System.Int32)">
            <summary>
              Changes the days of the month when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the days of the month when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_months">
            <summary>
              Returns the months scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the months scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MONTHS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.set_months(System.Int32)">
            <summary>
              Changes the months when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the months when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_nextOccurence">
            <summary>
              Returns the date/time (seconds) of the next wake up occurrence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the date/time (seconds) of the next wake up occurrence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.NEXTOCCURENCE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.FindWakeUpSchedule(System.String)">
            <summary>
              Retrieves a wake up schedule for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the wake up schedule is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWakeUpSchedule.isOnline()</c> to test if the wake up schedule is
              indeed online at a given time. In case of ambiguity when looking for
              a wake up schedule by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the wake up schedule, for instance
              <c>YHUBGSM3.wakeUpSchedule1</c>.
            </param>
            <returns>
              a <c>YWakeUpSchedule</c> object allowing you to drive the wake up schedule.
            </returns>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.registerValueCallback(YoctoLib.YWakeUpSchedule.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.get_minutes">
            <summary>
              Returns all the minutes of each hour that are scheduled for wake up.
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.set_minutes(System.Int64)">
            <summary>
              Changes all the minutes where a wake up must take place.
            <para>
            </para>
            </summary>
            <param name="bitmap">
              Minutes 00-59 of each hour scheduled for wake up.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.nextWakeUpSchedule">
            <summary>
              Continues the enumeration of wake up schedules started using <c>yFirstWakeUpSchedule()</c>.
            <para>
              Caution: You can't make any assumption about the returned wake up schedules order.
              If you want to find a specific a wake up schedule, use <c>WakeUpSchedule.findWakeUpSchedule()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWakeUpSchedule</c> object, corresponding to
              a wake up schedule currently online, or a <c>null</c> pointer
              if there are no more wake up schedules to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YWakeUpSchedule.FirstWakeUpSchedule">
            <summary>
              Starts the enumeration of wake up schedules currently accessible.
            <para>
              Use the method <c>YWakeUpSchedule.nextWakeUpSchedule()</c> to iterate on
              next wake up schedules.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWakeUpSchedule</c> object, corresponding to
              the first wake up schedule currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YWatchdog">
            <summary>
              The <c>YWatchdog</c> class allows you to drive a Yoctopuce watchdog.
            <para>
              A watchdog works like a relay, with an extra timer that can automatically
              trigger a brief power cycle to an appliance after a preset delay, to force this
              appliance to reset if a problem occurs. During normal use, the watchdog timer
              is reset periodically by the application to prevent the automated power cycle.
              Whenever the application dies, the watchdog will automatically trigger the power cycle.
              The watchdog can also be driven directly with <c>pulse</c> and <c>delayedPulse</c>
              methods to switch off an appliance for a given duration.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_state">
            <summary>
              Returns the state of the watchdog (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.STATE_A</c> or <c>YWatchdog.STATE_B</c>, according to the state of the watchdog
              (A for the idle position, B for the active position)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.STATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_state(System.Int32)">
            <summary>
              Changes the state of the watchdog (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.STATE_A</c> or <c>YWatchdog.STATE_B</c>, according to the state of the watchdog
              (A for the idle position, B for the active position)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_stateAtPowerOn">
            <summary>
              Returns the state of the watchdog at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWatchdog.STATEATPOWERON_UNCHANGED</c>, <c>YWatchdog.STATEATPOWERON_A</c> and
              <c>YWatchdog.STATEATPOWERON_B</c> corresponding to the state of the watchdog at device startup (A
              for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.STATEATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_stateAtPowerOn(System.Int32)">
            <summary>
              Changes the state of the watchdog at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YWatchdog.STATEATPOWERON_UNCHANGED</c>, <c>YWatchdog.STATEATPOWERON_A</c> and
              <c>YWatchdog.STATEATPOWERON_B</c> corresponding to the state of the watchdog at device startup (A
              for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_maxTimeOnStateA">
            <summary>
              Returns the maximum time (ms) allowed for the watchdog to stay in state
              A before automatically switching back in to B state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum time (ms) allowed for the watchdog to stay in state
              A before automatically switching back in to B state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.MAXTIMEONSTATEA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_maxTimeOnStateA(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the watchdog to stay in state A
              before automatically switching back in to B state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the watchdog to stay in state A
              before automatically switching back in to B state
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_maxTimeOnStateB">
            <summary>
              Retourne the maximum time (ms) allowed for the watchdog to stay in state B
              before automatically switching back in to A state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.MAXTIMEONSTATEB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_maxTimeOnStateB(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the watchdog to stay in state B before
              automatically switching back in to A state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the watchdog to stay in state B before
              automatically switching back in to A state
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_output">
            <summary>
              Returns the output state of the watchdog, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.OUTPUT_OFF</c> or <c>YWatchdog.OUTPUT_ON</c>, according to the output state of
              the watchdog, when used as a simple switch (single throw)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.OUTPUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_output(System.Int32)">
            <summary>
              Changes the output state of the watchdog, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.OUTPUT_OFF</c> or <c>YWatchdog.OUTPUT_ON</c>, according to the output state of
              the watchdog, when used as a simple switch (single throw)
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_pulseTimer">
            <summary>
              Returns the number of milliseconds remaining before the watchdog is returned to idle position
              (state A), during a measured pulse generation.
            <para>
              When there is no ongoing pulse, returns zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before the watchdog is returned to
              idle position
              (state A), during a measured pulse generation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.pulse(System.Int32)">
            <summary>
              Sets the relay to output B (active) for a specified duration, then brings it
              automatically back to output A (idle state).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.delayedPulse(System.Int32,System.Int32)">
            <summary>
              Schedules a pulse.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_delay">
              waiting time before the pulse, in milliseconds
            </param>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_countdown">
            <summary>
              Returns the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.COUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_autoStart">
            <summary>
              Returns the watchdog running state at module power on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.AUTOSTART_OFF</c> or <c>YWatchdog.AUTOSTART_ON</c>, according to the watchdog
              running state at module power on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.AUTOSTART_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_autoStart(System.Int32)">
            <summary>
              Changes the watchdog running state at module power on.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.AUTOSTART_OFF</c> or <c>YWatchdog.AUTOSTART_ON</c>, according to the watchdog
              running state at module power on
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_running">
            <summary>
              Returns the watchdog running state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.RUNNING_OFF</c> or <c>YWatchdog.RUNNING_ON</c>, according to the watchdog running state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.RUNNING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_running(System.Int32)">
            <summary>
              Changes the running state of the watchdog.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.RUNNING_OFF</c> or <c>YWatchdog.RUNNING_ON</c>, according to the running state
              of the watchdog
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.resetWatchdog">
            <summary>
              Resets the watchdog.
            <para>
              When the watchdog is running, this function
              must be called on a regular basis to prevent the watchdog to
              trigger
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_triggerDelay">
            <summary>
              Returns  the waiting duration before a reset is automatically triggered by the watchdog, in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to  the waiting duration before a reset is automatically triggered by the
              watchdog, in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.TRIGGERDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_triggerDelay(System.Int64)">
            <summary>
              Changes the waiting delay before a reset is triggered by the watchdog,
              in milliseconds.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the waiting delay before a reset is triggered by the watchdog,
              in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.get_triggerDuration">
            <summary>
              Returns the duration of resets caused by the watchdog, in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the duration of resets caused by the watchdog, in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.TRIGGERDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.set_triggerDuration(System.Int64)">
            <summary>
              Changes the duration of resets caused by the watchdog, in milliseconds.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the duration of resets caused by the watchdog, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.FindWatchdog(System.String)">
            <summary>
              Retrieves a watchdog for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the watchdog is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWatchdog.isOnline()</c> to test if the watchdog is
              indeed online at a given time. In case of ambiguity when looking for
              a watchdog by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the watchdog, for instance
              <c>WDOGDC01.watchdog1</c>.
            </param>
            <returns>
              a <c>YWatchdog</c> object allowing you to drive the watchdog.
            </returns>
        </member>
        <member name="M:YoctoLib.YWatchdog.registerValueCallback(YoctoLib.YWatchdog.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YWatchdog.toggle">
            <summary>
              Switch the relay to the opposite state.
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWatchdog.nextWatchdog">
            <summary>
              Continues the enumeration of watchdog started using <c>yFirstWatchdog()</c>.
            <para>
              Caution: You can't make any assumption about the returned watchdog order.
              If you want to find a specific a watchdog, use <c>Watchdog.findWatchdog()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWatchdog</c> object, corresponding to
              a watchdog currently online, or a <c>null</c> pointer
              if there are no more watchdog to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YWatchdog.FirstWatchdog">
            <summary>
              Starts the enumeration of watchdog currently accessible.
            <para>
              Use the method <c>YWatchdog.nextWatchdog()</c> to iterate on
              next watchdog.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWatchdog</c> object, corresponding to
              the first watchdog currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YWeighScale">
            <summary>
              The <c>YWeighScale</c> class provides a weight measurement from a ratiometric sensor.
            <para>
              It can be used to control the bridge excitation parameters, in order to avoid
              measure shifts caused by temperature variation in the electronics, and can also
              automatically apply an additional correction factor based on temperature to
              compensate for offsets in the load cell itself.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the weight.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the weight
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.get_excitation">
            <summary>
              Returns the current load cell bridge excitation method.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWeighScale.EXCITATION_OFF</c>, <c>YWeighScale.EXCITATION_DC</c> and
              <c>YWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.EXCITATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_excitation(System.Int32)">
            <summary>
              Changes the current load cell bridge excitation method.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YWeighScale.EXCITATION_OFF</c>, <c>YWeighScale.EXCITATION_DC</c> and
              <c>YWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_tempAvgAdaptRatio(System.Double)">
            <summary>
              Changes the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.get_tempAvgAdaptRatio">
            <summary>
              Returns the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.TEMPAVGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_tempChgAdaptRatio(System.Double)">
            <summary>
              Changes the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the temperature change update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.get_tempChgAdaptRatio">
            <summary>
              Returns the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the temperature change update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.TEMPCHGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.get_compTempAvg">
            <summary>
              Returns the current averaged temperature, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current averaged temperature, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.COMPTEMPAVG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.get_compTempChg">
            <summary>
              Returns the current temperature variation, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current temperature variation, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.COMPTEMPCHG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.get_compensation">
            <summary>
              Returns the current current thermal compensation value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current current thermal compensation value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.COMPENSATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_zeroTracking(System.Double)">
            <summary>
              Changes the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the zero tracking threshold value
            </param>
            <para>
            </para>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.get_zeroTracking">
            <summary>
              Returns the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the zero tracking threshold value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.ZEROTRACKING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.FindWeighScale(System.String)">
            <summary>
              Retrieves a weighing scale sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the weighing scale sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWeighScale.isOnline()</c> to test if the weighing scale sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a weighing scale sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the weighing scale sensor, for instance
              <c>YWBRIDG1.weighScale1</c>.
            </param>
            <returns>
              a <c>YWeighScale</c> object allowing you to drive the weighing scale sensor.
            </returns>
        </member>
        <member name="M:YoctoLib.YWeighScale.registerValueCallback(YoctoLib.YWeighScale.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YWeighScale.registerTimedReportCallback(YoctoLib.YWeighScale.TimedReportCallback)">
            <summary>
              Registers the callback function that is invoked on every periodic timed notification.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and an <c>YMeasure</c> object describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YWeighScale.tare">
            <summary>
              Adapts the load cell signal bias (stored in the corresponding genericSensor)
              so that the current signal corresponds to a zero weight.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.setupSpan(System.Double,System.Double)">
            <summary>
              Configures the load cell span parameters (stored in the corresponding genericSensor)
              so that the current signal corresponds to the specified reference weight.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="currWeight">
              reference weight presently on the load cell.
            </param>
            <param name="maxWeight">
              maximum weight to be expected on the load cell.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_offsetAvgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Records a weight offset thermal compensation table, in order to automatically correct the
              measured weight based on the averaged compensation temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all averaged
              temperatures for which an offset correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the offset correction
              to apply for each of the temperature included in the first
              argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.loadOffsetAvgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Retrieves the weight offset thermal compensation table previously configured using the
              <c>set_offsetAvgCompensationTable</c> function.
            <para>
              The weight correction is applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, that is filled by the function
              with all averaged temperatures for which an offset correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, that is filled by the function
              with the offset correction applied for each of the temperature
              included in the first argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_offsetChgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Records a weight offset thermal compensation table, in order to automatically correct the
              measured weight based on the variation of temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to temperature
              variations for which an offset correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the offset correction
              to apply for each of the temperature variation included in the first
              argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.loadOffsetChgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Retrieves the weight offset thermal compensation table previously configured using the
              <c>set_offsetChgCompensationTable</c> function.
            <para>
              The weight correction is applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, that is filled by the function
              with all temperature variations for which an offset correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, that is filled by the function
              with the offset correction applied for each of the temperature
              variation included in the first argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_spanAvgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Records a weight span thermal compensation table, in order to automatically correct the
              measured weight based on the compensation temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all averaged
              temperatures for which a span correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the span correction
              (in percents) to apply for each of the temperature included in the first
              argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.loadSpanAvgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Retrieves the weight span thermal compensation table previously configured using the
              <c>set_spanAvgCompensationTable</c> function.
            <para>
              The weight correction is applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, that is filled by the function
              with all averaged temperatures for which an span correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, that is filled by the function
              with the span correction applied for each of the temperature
              included in the first argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.set_spanChgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Records a weight span thermal compensation table, in order to automatically correct the
              measured weight based on the variation of temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all variations of
              temperatures for which a span correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the span correction
              (in percents) to apply for each of the temperature variation included
              in the first argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.loadSpanChgCompensationTable(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
              Retrieves the weight span thermal compensation table previously configured using the
              <c>set_spanChgCompensationTable</c> function.
            <para>
              The weight correction is applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, that is filled by the function
              with all variation of temperature for which an span correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, that is filled by the function
              with the span correction applied for each of variation of temperature
              included in the first argument, index by index.
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWeighScale.nextWeighScale">
            <summary>
              Continues the enumeration of weighing scale sensors started using <c>yFirstWeighScale()</c>.
            <para>
              Caution: You can't make any assumption about the returned weighing scale sensors order.
              If you want to find a specific a weighing scale sensor, use <c>WeighScale.findWeighScale()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWeighScale</c> object, corresponding to
              a weighing scale sensor currently online, or a <c>null</c> pointer
              if there are no more weighing scale sensors to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YWeighScale.FirstWeighScale">
            <summary>
              Starts the enumeration of weighing scale sensors currently accessible.
            <para>
              Use the method <c>YWeighScale.nextWeighScale()</c> to iterate on
              next weighing scale sensors.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWeighScale</c> object, corresponding to
              the first weighing scale sensor currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="T:YoctoLib.YWlanRecord">
            <c>YWlanRecord</c> objects are used to describe a wireless network.
            These objects are  used in particular in conjunction with the
            <c>YWireless</c> class.
            <para>
            </para>
        </member>
        <member name="M:YoctoLib.YWlanRecord.get_ssid">
            <summary>
              Returns the name of the wireless network (SSID).
            <para>
            </para>
            </summary>
            <returns>
              a string with the name of the wireless network (SSID).
            </returns>
        </member>
        <member name="M:YoctoLib.YWlanRecord.get_channel">
            <summary>
              Returns the 802.11 b/g/n channel number used by this network.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the channel.
            </returns>
        </member>
        <member name="M:YoctoLib.YWlanRecord.get_security">
            <summary>
              Returns the security algorithm used by the wireless network.
            <para>
              If the network implements to security, the value is <c>"OPEN"</c>.
            </para>
            </summary>
            <returns>
              a string with the security algorithm.
            </returns>
        </member>
        <member name="M:YoctoLib.YWlanRecord.get_linkQuality">
            <summary>
              Returns the quality of the wireless network link, in per cents.
            <para>
            </para>
            </summary>
            <returns>
              an integer between 0 and 100 corresponding to the signal quality.
            </returns>
        </member>
        <member name="T:YoctoLib.YWireless">
            <summary>
              The YWireless class provides control over wireless network parameters
              and status for devices that are wireless-enabled.
            <para>
              Note that TCP/IP parameters are configured separately, using class <c>YNetwork</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWireless.get_linkQuality">
            <summary>
              Returns the link quality, expressed in percent.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the link quality, expressed in percent
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.LINKQUALITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.get_ssid">
            <summary>
              Returns the wireless network name (SSID).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the wireless network name (SSID)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.SSID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.get_channel">
            <summary>
              Returns the 802.11 channel currently used, or 0 when the selected network has not been found.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the 802.11 channel currently used, or 0 when the selected network has not been found
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.CHANNEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.get_security">
            <summary>
              Returns the security algorithm used by the selected wireless network.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWireless.SECURITY_UNKNOWN</c>, <c>YWireless.SECURITY_OPEN</c>,
              <c>YWireless.SECURITY_WEP</c>, <c>YWireless.SECURITY_WPA</c> and <c>YWireless.SECURITY_WPA2</c>
              corresponding to the security algorithm used by the selected wireless network
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.SECURITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.get_message">
            <summary>
              Returns the latest status message from the wireless interface.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest status message from the wireless interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.MESSAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.get_wlanState">
            <summary>
              Returns the current state of the wireless interface.
            <para>
              The state <c>YWireless.WLANSTATE_DOWN</c> means that the network interface is
              not connected to a network. The state <c>YWireless.WLANSTATE_SCANNING</c> means that the network
              interface is scanning available
              frequencies. During this stage, the device is not reachable, and the network settings are not yet
              applied. The state
              <c>YWireless.WLANSTATE_CONNECTED</c> means that the network settings have been successfully applied
              ant that the device is reachable
              from the wireless network. If the device is configured to use ad-hoc or Soft AP mode, it means that
              the wireless network
              is up and that other devices can join the network. The state <c>YWireless.WLANSTATE_REJECTED</c>
              means that the network interface has
              not been able to join the requested network. The description of the error can be obtain with the
              <c>get_message()</c> method.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWireless.WLANSTATE_DOWN</c>, <c>YWireless.WLANSTATE_SCANNING</c>,
              <c>YWireless.WLANSTATE_CONNECTED</c> and <c>YWireless.WLANSTATE_REJECTED</c> corresponding to the
              current state of the wireless interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.WLANSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.FindWireless(System.String)">
            <summary>
              Retrieves a wireless LAN interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the wireless LAN interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWireless.isOnline()</c> to test if the wireless LAN interface is
              indeed online at a given time. In case of ambiguity when looking for
              a wireless LAN interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the wireless LAN interface, for instance
              <c>YHUBWLN1.wireless</c>.
            </param>
            <returns>
              a <c>YWireless</c> object allowing you to drive the wireless LAN interface.
            </returns>
        </member>
        <member name="M:YoctoLib.YWireless.registerValueCallback(YoctoLib.YWireless.ValueCallback)">
            <summary>
              Registers the callback function that is invoked on every change of advertised value.
            <para>
              The callback is invoked only during the execution of <c>ySleep</c> or <c>yHandleEvents</c>.
              This provides control over the time when the callback is triggered. For good responsiveness, remember to call
              one of these two functions periodically. To unregister a callback, pass a null pointer as argument.
            </para>
            <para>
            </para>
            </summary>
            <param name="callback">
              the callback function to call, or a null pointer. The callback function should take two
              arguments: the function object of which the value has changed, and the character string describing
              the new advertised value.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoLib.YWireless.startWlanScan">
            <summary>
              Triggers a scan of the wireless frequency and builds the list of available networks.
            <para>
              The scan forces a disconnection from the current network. At then end of the process, the
              the network interface attempts to reconnect to the previous network. During the scan, the <c>wlanState</c>
              switches to <c>YWireless.WLANSTATE_DOWN</c>, then to <c>YWireless.WLANSTATE_SCANNING</c>. When the
              scan is completed,
              <c>get_wlanState()</c> returns either <c>YWireless.WLANSTATE_DOWN</c> or
              <c>YWireless.WLANSTATE_SCANNING</c>. At this
              point, the list of detected network can be retrieved with the <c>get_detectedWlans()</c> method.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoLib.YWireless.joinNetwork(System.String,System.String)">
            <summary>
              Changes the configuration of the wireless lan interface to connect to an existing
              access point (infrastructure mode).
            <para>
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="ssid">
              the name of the network to connect to
            </param>
            <param name="securityKey">
              the network key, as a character string
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.adhocNetwork(System.String,System.String)">
            <summary>
              Changes the configuration of the wireless lan interface to create an ad-hoc
              wireless network, without using an access point.
            <para>
              On the YoctoHub-Wireless-g
              and YoctoHub-Wireless-n,
              you should use <c>softAPNetwork()</c> instead, which emulates an access point
              (Soft AP) which is more efficient and more widely supported than ad-hoc networks.
            </para>
            <para>
              When a security key is specified for an ad-hoc network, the network is protected
              by a WEP40 key (5 characters or 10 hexadecimal digits) or WEP128 key (13 characters
              or 26 hexadecimal digits). It is recommended to use a well-randomized WEP128 key
              using 26 hexadecimal digits to maximize security.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module
              to apply this setting.
            </para>
            </summary>
            <param name="ssid">
              the name of the network to connect to
            </param>
            <param name="securityKey">
              the network key, as a character string
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.softAPNetwork(System.String,System.String)">
            <summary>
              Changes the configuration of the wireless lan interface to create a new wireless
              network by emulating a WiFi access point (Soft AP).
            <para>
              This function can only be
              used with the YoctoHub-Wireless-g and the YoctoHub-Wireless-n.
            </para>
            <para>
              On the YoctoHub-Wireless-g, when a security key is specified for a SoftAP network,
              the network is protected by a WEP40 key (5 characters or 10 hexadecimal digits) or
              WEP128 key (13 characters or 26 hexadecimal digits). It is recommended to use a
              well-randomized WEP128 key using 26 hexadecimal digits to maximize security.
            </para>
            <para>
              On the YoctoHub-Wireless-n, when a security key is specified for a SoftAP network,
              the network will be protected by WPA2.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="ssid">
              the name of the network to connect to
            </param>
            <param name="securityKey">
              the network key, as a character string
            </param>
            <returns>
              <c>YAPI.SUCCESS</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.get_detectedWlans">
            <summary>
              Returns a list of <c>YWlanRecord</c> objects that describe detected Wireless networks.
            <para>
              This list is not updated when the module is already connected to an access point (infrastructure mode).
              To force an update of this list, <c>startWlanScan()</c> must be called.
              Note that an languages without garbage collections, the returned list must be freed by the caller.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a list of <c>YWlanRecord</c> objects, containing the SSID, channel,
              link quality and the type of security of the wireless network.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="M:YoctoLib.YWireless.nextWireless">
            <summary>
              Continues the enumeration of wireless LAN interfaces started using <c>yFirstWireless()</c>.
            <para>
              Caution: You can't make any assumption about the returned wireless LAN interfaces order.
              If you want to find a specific a wireless LAN interface, use <c>Wireless.findWireless()</c>
              and a hardwareID or a logical name.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWireless</c> object, corresponding to
              a wireless LAN interface currently online, or a <c>null</c> pointer
              if there are no more wireless LAN interfaces to enumerate.
            </returns>
        </member>
        <member name="M:YoctoLib.YWireless.FirstWireless">
            <summary>
              Starts the enumeration of wireless LAN interfaces currently accessible.
            <para>
              Use the method <c>YWireless.nextWireless()</c> to iterate on
              next wireless LAN interfaces.
            </para>
            </summary>
            <returns>
              a pointer to a <c>YWireless</c> object, corresponding to
              the first wireless LAN interface currently online, or a <c>null</c> pointer
              if there are none.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.GetAPIVersion">
            <summary>
              Returns the version identifier for the Yoctopuce library in use.
            <para>
              The version is a string in the form <c>"Major.Minor.Build"</c>,
              for instance <c>"1.01.5535"</c>. For languages using an external
              DLL (for instance C#, VisualBasic or Delphi), the character string
              includes as well the DLL version, for instance
              <c>"1.01.5535 (1.01.5439)"</c>.
            </para>
            <para>
              If you want to verify in your code that the library version is
              compatible with the version that you have used during development,
              verify that the major number is strictly equal and that the minor
              number is greater or equal. The build number is not relevant
              with respect to the library compatibility.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a character string describing the library version.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.GetDllPath">
            <summary>
              Returns the paths of the DLLs for the Yoctopuce library in use.
            <para>
              For architectures that require multiple DLLs, in particular when using
              a .NET assembly DLL, the returned string takes the form
              <c>"DotNetProxy=/...; yapi=/...;"</c>,
              where the first path corresponds to the .NET assembly DLL and the
              second path corresponds to the low-level communication library.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a character string describing the DLL path.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.GetDllArchitecture">
            <summary>
              Returns the system architecture for the Yoctopuce communication library in use.
            <para>
              On Windows, the architecture can be <c>"Win32"</c> or <c>"Win64"</c>.
              On ARM machines, the architecture is <c>"Armhf32"</c> or <c>"Aarch64"</c>.
              On other Linux machines, the architecture is <c>"Linux32"</c> or <c>"Linux64"</c>.
              On MacOS, the architecture is <c>"MacOs32"</c> or <c>"MacOs64"</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a character string describing the system architecture of the
              low-level communication library.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.RegisterHub(System.String)">
            <summary>
              Setup the Yoctopuce library to use modules connected on a given machine.
            <para>
              The
              parameter will determine how the API will work. Use the following values:
            </para>
            <para>
              <b>usb</b>: When the <c>usb</c> keyword is used, the API will work with
              devices connected directly to the USB bus. Some programming languages such a JavaScript,
              PHP, and Java don't provide direct access to USB hardware, so <c>usb</c> will
              not work with these. In this case, use a VirtualHub or a networked YoctoHub (see below).
            </para>
            <para>
              <b><i>x.x.x.x</i></b> or <b><i>hostname</i></b>: The API will use the devices connected to the
              host with the given IP address or hostname. That host can be a regular computer
              running a VirtualHub, or a networked YoctoHub such as YoctoHub-Ethernet or
              YoctoHub-Wireless. If you want to use the VirtualHub running on you local
              computer, use the IP address 127.0.0.1.
            </para>
            <para>
              <b>callback</b>: that keyword make the API run in "<i>HTTP Callback</i>" mode.
              This a special mode allowing to take control of Yoctopuce devices
              through a NAT filter when using a VirtualHub or a networked YoctoHub. You only
              need to configure your hub to call your server script on a regular basis.
              This mode is currently available for PHP and Node.JS only.
            </para>
            <para>
              Be aware that only one application can use direct USB access at a
              given time on a machine. Multiple access would cause conflicts
              while trying to access the USB modules. In particular, this means
              that you must stop the VirtualHub software before starting
              an application that uses direct USB access. The workaround
              for this limitation is to setup the library to use the VirtualHub
              rather than direct USB access.
            </para>
            <para>
              If access control has been activated on the hub, virtual or not, you want to
              reach, the URL parameter should look like:
            </para>
            <para>
              <c>http://username:password@address:port</c>
            </para>
            <para>
              You can call <i>RegisterHub</i> several times to connect to several machines.
            </para>
            <para>
            </para>
            </summary>
            <param name="url">
              a string containing either <c>"usb"</c>,<c>"callback"</c> or the
              root URL of the hub to monitor
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.PreregisterHub(System.String)">
            <summary>
              Fault-tolerant alternative to <c>yRegisterHub()</c>.
            <para>
              This function has the same
              purpose and same arguments as <c>yRegisterHub()</c>, but does not trigger
              an error when the selected hub is not available at the time of the function call.
              This makes it possible to register a network hub independently of the current
              connectivity, and to try to contact it only when a device is actively needed.
            </para>
            <para>
            </para>
            </summary>
            <param name="url">
              a string containing either <c>"usb"</c>,<c>"callback"</c> or the
              root URL of the hub to monitor
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.GetLog(System.String)">
            <summary>
              Retrieves Yoctopuce low-level library diagnostic logs.
            <para>
              This method allows to progessively retrieve API logs. The interface is line-based:
              it must called it within a loop until the returned value is an empty string.
              Make sure to exit the loop when an empty string is returned, as feeding an empty
              string into the <c>lastLogLine</c> parameter for the next call would restart
              enumerating logs from the oldest message available.
            </para>
            </summary>
            <param name="lastLogLine">
              On first call, provide an empty string.
              On subsequent calls, provide the last log line returned by <c>GetLog()</c>.
            </param>
            <returns>
              a string with the log line immediately following the one given in argument,
              if such line exist. Returns an empty string otherwise, when completed.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.TestHub(System.String,System.Int32)">
            <summary>
              Test if the hub is reachable.
            <para>
              This method do not register the hub, it only test if the
              hub is usable. The url parameter follow the same convention as the <c>yRegisterHub</c>
              method. This method is useful to verify the authentication parameters for a hub. It
              is possible to force this method to return after mstimeout milliseconds.
            </para>
            <para>
            </para>
            </summary>
            <param name="url">
              a string containing either <c>"usb"</c>,<c>"callback"</c> or the
              root URL of the hub to monitor
            </param>
            <param name="mstimeout">
              the number of millisecond available to test the connection.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.FreeAPI">
            <summary>
              Waits for all pending communications with Yoctopuce devices to be
              completed then frees dynamically allocated resources used by
              the Yoctopuce library.
            <para>
            </para>
            <para>
              From an operating system standpoint, it is generally not required to call
              this function since the OS will automatically free allocated resources
              once your program is completed. However there are two situations when
              you may really want to use that function:
            </para>
            <para>
              - Free all dynamically allocated memory blocks in order to
              track a memory leak.
            </para>
            <para>
              - Send commands to devices right before the end
              of the program. Since commands are sent in an asynchronous way
              the program could exit before all commands are effectively sent.
            </para>
            <para>
              You should not call any other library function after calling
              <c>yFreeAPI()</c>, or your program will crash.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.SetNetworkTimeout(System.Int32)">
            <summary>
              Modifies the network connection delay for <c>yRegisterHub()</c> and <c>yUpdateDeviceList()</c>.
            <para>
              This delay impacts only the YoctoHubs and VirtualHub
              which are accessible through the network. By default, this delay is of 20000 milliseconds,
              but depending or you network you may want to change this delay,
              gor example if your network infrastructure is based on a GSM connection.
            </para>
            <para>
            </para>
            </summary>
            <param name="networkMsTimeout">
              the network connection delay in milliseconds.
            @noreturn
            </param>
        </member>
        <member name="M:YoctoProxyAPI.YAPIProxy.GetNetworkTimeout">
            <summary>
              Returns the network connection delay for <c>yRegisterHub()</c> and <c>yUpdateDeviceList()</c>.
            <para>
              This delay impacts only the YoctoHubs and VirtualHub
              which are accessible through the network. By default, this delay is of 20000 milliseconds,
              but depending or you network you may want to change this delay,
              for example if your network infrastructure is based on a GSM connection.
            </para>
            </summary>
            <returns>
              the network connection delay in milliseconds.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YModuleProxy">
            <summary>
              The <c>YModule</c> class can be used with all Yoctopuce USB devices.
            <para>
              It can be used to control the module global parameters, and
              to enumerate the functions provided by each module.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.FindModule(System.String)">
            <summary>
              Allows you to find a module from its serial number or from its logical name.
            <para>
            </para>
            <para>
              This function does not require that the module is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YModule.isOnline()</c> to test if the module is
              indeed online at a given time. In case of ambiguity when looking for
              a module by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string containing either the serial number or
              the logical name of the desired module
            </param>
            <returns>
              a <c>YModule</c> object allowing you to drive the module
              or get additional information on the module.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.GetSimilarFunctions">
            <summary>
              Enumère toutes les fonctions de type Module.
            <para>
              Returns an array of strings representing hardware identifiers for all Module functions presently connected.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_productName">
            <summary>
              Returns the commercial name of the module, as set by the factory.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the commercial name of the module, as set by the factory
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PRODUCTNAME_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YModuleProxy.ProductName">
            <value>Commercial name of the module, as set by the factory.</value>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_productId">
            <summary>
              Returns the USB device identifier of the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the USB device identifier of the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PRODUCTID_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YModuleProxy.ProductId">
            <value>USB device identifier of the module.</value>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_productRelease">
            <summary>
              Returns the release number of the module hardware, preprogrammed at the factory.
            <para>
              The original hardware release returns value 1, revision B returns value 2, etc.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the release number of the module hardware, preprogrammed at the factory
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PRODUCTRELEASE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YModuleProxy.ProductRelease">
            <value>Release number of the module hardware, preprogrammed at the factory.</value>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_firmwareRelease">
            <summary>
              Returns the version of the firmware embedded in the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the version of the firmware embedded in the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.FIRMWARERELEASE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YModuleProxy.FirmwareRelease">
            <value>Version of the firmware embedded in the module.</value>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_persistentSettings">
            <summary>
              Returns the current state of persistent module settings.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YModule.PERSISTENTSETTINGS_LOADED</c>, <c>YModule.PERSISTENTSETTINGS_SAVED</c> and
              <c>YModule.PERSISTENTSETTINGS_MODIFIED</c> corresponding to the current state of persistent module settings
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.PERSISTENTSETTINGS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_luminosity">
            <summary>
              Returns the luminosity of the  module informative LEDs (from 0 to 100).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the luminosity of the  module informative LEDs (from 0 to 100)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.LUMINOSITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.set_luminosity(System.Int32)">
            <summary>
              Changes the luminosity of the module informative leds.
            <para>
              The parameter is a
              value between 0 and 100.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the luminosity of the module informative leds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YModuleProxy.Luminosity">
            <value>Luminosity of the  module informative LEDs (from 0 to 100).</value>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_beacon">
            <summary>
              Returns the state of the localization beacon.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YModule.BEACON_OFF</c> or <c>YModule.BEACON_ON</c>, according to the state of the localization beacon
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.BEACON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.set_beacon(System.Int32)">
            <summary>
              Turns on or off the module localization beacon.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YModule.BEACON_OFF</c> or <c>YModule.BEACON_ON</c>
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_upTime">
            <summary>
              Returns the number of milliseconds spent since the module was powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds spent since the module was powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.UPTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_usbCurrent">
            <summary>
              Returns the current consumed by the module on the USB bus, in milli-amps.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current consumed by the module on the USB bus, in milli-amps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.USBCURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_rebootCountdown">
            <summary>
              Returns the remaining number of seconds before the module restarts, or zero when no
              reboot has been scheduled.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the remaining number of seconds before the module restarts, or zero when no
              reboot has been scheduled
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.REBOOTCOUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_userVar">
            <summary>
              Returns the value previously stored in this attribute.
            <para>
              On startup and after a device reboot, the value is always reset to zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the value previously stored in this attribute
            </returns>
            <para>
              On failure, throws an exception or returns <c>YModule.USERVAR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.set_userVar(System.Int32)">
            <summary>
              Stores a 32 bit value in the device RAM.
            <para>
              This attribute is at programmer disposal,
              should he need to store a state variable.
              On startup and after a device reboot, the value is always reset to zero.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.saveToFlash">
            <summary>
              Saves current settings in the nonvolatile memory of the module.
            <para>
              Warning: the number of allowed save operations during a module life is
              limited (about 100000 cycles). Do not call this function within a loop.
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.revertFromFlash">
            <summary>
              Reloads the settings stored in the nonvolatile memory, as
              when the module is powered on.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.reboot(System.Int32)">
            <summary>
              Schedules a simple module reboot after the given number of seconds.
            <para>
            </para>
            </summary>
            <param name="secBeforeReboot">
              number of seconds before rebooting
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.triggerFirmwareUpdate(System.Int32)">
            <summary>
              Schedules a module reboot into special firmware update mode.
            <para>
            </para>
            </summary>
            <param name="secBeforeReboot">
              number of seconds before rebooting
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.triggerConfigChangeCallback">
            <summary>
              Triggers a configuration change callback, to check if they are supported or not.
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.checkFirmware(System.String,System.Boolean)">
            <summary>
              Tests whether the byn file is valid for this module.
            <para>
              This method is useful to test if the module needs to be updated.
              It is possible to pass a directory as argument instead of a file. In this case, this method returns
              the path of the most recent
              appropriate <c>.byn</c> file. If the parameter <c>onlynew</c> is true, the function discards
              firmwares that are older or
              equal to the installed firmware.
            </para>
            <para>
            </para>
            </summary>
            <param name="path">
              the path of a byn file or a directory that contains byn files
            </param>
            <param name="onlynew">
              returns only files that are strictly newer
            </param>
            <para>
            </para>
            <returns>
              the path of the byn file to use or a empty string if no byn files matches the requirement
            </returns>
            <para>
              On failure, throws an exception or returns a string that start with "error:".
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.updateFirmwareEx(System.String,System.Boolean)">
            <summary>
              Prepares a firmware update of the module.
            <para>
              This method returns a <c>YFirmwareUpdate</c> object which
              handles the firmware update process.
            </para>
            <para>
            </para>
            </summary>
            <param name="path">
              the path of the <c>.byn</c> file to use.
            </param>
            <param name="force">
              true to force the firmware update even if some prerequisites appear not to be met
            </param>
            <returns>
              a <c>YFirmwareUpdate</c> object or NULL on error.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.updateFirmware(System.String)">
            <summary>
              Prepares a firmware update of the module.
            <para>
              This method returns a <c>YFirmwareUpdate</c> object which
              handles the firmware update process.
            </para>
            <para>
            </para>
            </summary>
            <param name="path">
              the path of the <c>.byn</c> file to use.
            </param>
            <returns>
              a <c>YFirmwareUpdate</c> object or NULL on error.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_allSettings">
            <summary>
              Returns all the settings and uploaded files of the module.
            <para>
              Useful to backup all the
              logical names, calibrations parameters, and uploaded files of a device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a binary buffer with all the settings.
            </returns>
            <para>
              On failure, throws an exception or returns an binary object of size 0.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.set_allSettingsAndFiles(System.Byte[])">
            <summary>
              Restores all the settings and uploaded files to the module.
            <para>
              This method is useful to restore all the logical names and calibrations parameters,
              uploaded files etc. of a device from a backup.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modifications must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="settings">
              a binary buffer with all the settings.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.hasFunction(System.String)">
            <summary>
              Tests if the device includes a specific function.
            <para>
              This method takes a function identifier
              and returns a boolean.
            </para>
            <para>
            </para>
            </summary>
            <param name="funcId">
              the requested function identifier
            </param>
            <returns>
              true if the device has the function identifier
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_functionIds(System.String)">
            <summary>
              Retrieve all hardware identifier that match the type passed in argument.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="funType">
              The type of function (Relay, LightSensor, Voltage,...)
            </param>
            <returns>
              an array of strings.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.set_allSettings(System.Byte[])">
            <summary>
              Restores all the settings of the device.
            <para>
              Useful to restore all the logical names and calibrations parameters
              of a module from a backup.Remember to call the <c>saveToFlash()</c> method of the module if the
              modifications must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="settings">
              a binary buffer with all the settings.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_hardwareId">
            <summary>
              Returns the unique hardware identifier of the module.
            <para>
              The unique hardware identifier is made of the device serial
              number followed by string ".module".
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the module
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.download(System.String)">
            <summary>
              Downloads the specified built-in file and returns a binary buffer with its content.
            <para>
            </para>
            </summary>
            <param name="pathname">
              name of the new file to load
            </param>
            <returns>
              a binary buffer with the file content
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YAPI.INVALID_STRING</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_icon2d">
            <summary>
              Returns the icon of the module.
            <para>
              The icon is a PNG image and does not
              exceeds 1536 bytes.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a binary buffer with module icon, in png format.
              On failure, throws an exception or returns  <c>YAPI.INVALID_STRING</c>.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_lastLogs">
            <summary>
              Returns a string with last logs of the module.
            <para>
              This method return only
              logs that are still in the module.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string with last logs of the module.
              On failure, throws an exception or returns  <c>YAPI.INVALID_STRING</c>.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.log(System.String)">
            <summary>
              Adds a text message to the device logs.
            <para>
              This function is useful in
              particular to trace the execution of HTTP callbacks. If a newline
              is desired after the message, it must be included in the string.
            </para>
            </summary>
            <param name="text">
              the string to append to the logs.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_subDevices">
            <summary>
              Returns a list of all the modules that are plugged into the current module.
            <para>
              This method only makes sense when called for a YoctoHub/VirtualHub.
              Otherwise, an empty array will be returned.
            </para>
            </summary>
            <returns>
              an array of strings containing the sub modules.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_parentHub">
            <summary>
              Returns the serial number of the YoctoHub on which this module is connected.
            <para>
              If the module is connected by USB, or if the module is the root YoctoHub, an
              empty string is returned.
            </para>
            </summary>
            <returns>
              a string with the serial number of the YoctoHub or an empty string
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YModuleProxy.get_url">
            <summary>
              Returns the URL used to access the module.
            <para>
              If the module is connected by USB, the
              string 'usb' is returned.
            </para>
            </summary>
            <returns>
              a string with the URL of the module.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YSensorProxy">
            <summary>
              The <c>YSensor</c> class is the parent class for all Yoctopuce sensor types.
            <para>
              It can be
              used to read the current value and unit of any sensor, read the min/max
              value, configure autonomous recording frequency and access recorded data.
              It also provide a function to register a callback invoked each time the
              observed value changes, or at a predefined interval. Using this class rather
              than a specific subclass makes it possible to create generic applications
              that work with any Yoctopuce sensor, even those that do not yet exist.
              Note: The <c>YAnButton</c> class is the only analog input which does not inherit
              from <c>YSensor</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.FindSensor(System.String)">
            <summary>
              Retrieves a sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSensor.isOnline()</c> to test if the sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the sensor, for instance
              <c>MyDevice.</c>.
            </param>
            <returns>
              a <c>YSensor</c> object allowing you to drive the sensor.
            </returns>
        </member>
        <member name="P:YoctoProxyAPI.YSensorProxy.CurrentValue">
            <value>Last measurement reported by the sensor, according to the update policy specified by UpdateFrequency</value>
        </member>
        <member name="P:YoctoProxyAPI.YSensorProxy.Unit">
            <value>Measuring unit for the sensor</value>
        </member>
        <member name="P:YoctoProxyAPI.YSensorProxy.UpdateFrequency">
            <value>Update policy for the sensor: "auto" for an update at every change, "x/s" for an update x time per second with the instant value, "x/m" or "x/h" for an update x times per minute (resp. hour) with the average value over the latest period.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Sensor available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YSensor.FindSensor</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_unit">
            <summary>
              Returns the measuring unit for the measure.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the measuring unit for the measure
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.UNIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_currentValue">
            <summary>
              Returns the current value of the measure, in the specified unit, as a floating point number.
            <para>
              Note that a get_currentValue() call will *not* start a measure in the device, it
              will just return the last measure that occurred in the device. Indeed, internally, each Yoctopuce
              devices is continuously making measurements at a hardware specific frequency.
            </para>
            <para>
              If continuously calling  get_currentValue() leads you to performances issues, then
              you might consider to switch to callback programming model. Check the "advanced
              programming" chapter in in your device user manual for more information.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of the measure, in the specified unit,
              as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.CURRENTVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.set_lowestValue(System.Double)">
            <summary>
              Changes the recorded minimal value observed.
            <para>
              Can be used to reset the value returned
              by get_lowestValue().
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the recorded minimal value observed
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_lowestValue">
            <summary>
              Returns the minimal value observed for the measure since the device was started.
            <para>
              Can be reset to an arbitrary value thanks to set_lowestValue().
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the minimal value observed for the measure since the device was started
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.LOWESTVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.set_highestValue(System.Double)">
            <summary>
              Changes the recorded maximal value observed.
            <para>
              Can be used to reset the value returned
              by get_lowestValue().
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the recorded maximal value observed
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_highestValue">
            <summary>
              Returns the maximal value observed for the measure since the device was started.
            <para>
              Can be reset to an arbitrary value thanks to set_highestValue().
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the maximal value observed for the measure since the device was started
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.HIGHESTVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_currentRawValue">
            <summary>
              Returns the uncalibrated, unrounded raw value returned by the
              sensor, in the specified unit, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the uncalibrated, unrounded raw value returned by the
              sensor, in the specified unit, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.CURRENTRAWVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_logFrequency">
            <summary>
              Returns the datalogger recording frequency for this function, or "OFF"
              when measures are not stored in the data logger flash memory.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the datalogger recording frequency for this function, or "OFF"
              when measures are not stored in the data logger flash memory
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.LOGFREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.set_logFrequency(System.String)">
            <summary>
              Changes the datalogger recording frequency for this function.
            <para>
              The frequency can be specified as samples per second,
              as sample per minute (for instance "15/m") or in samples per
              hour (eg. "4/h"). To disable recording for this function, use
              the value "OFF". Note that setting the  datalogger recording frequency
              to a greater value than the sensor native sampling frequency is useless,
              and even counterproductive: those two frequencies are not related.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the datalogger recording frequency for this function
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSensorProxy.LogFrequency">
            <value>Datalogger recording frequency for this function, or "OFF"</value>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_reportFrequency">
            <summary>
              Returns the timed value notification frequency, or "OFF" if timed
              value notifications are disabled for this function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the timed value notification frequency, or "OFF" if timed
              value notifications are disabled for this function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.REPORTFREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.set_reportFrequency(System.String)">
            <summary>
              Changes the timed value notification frequency for this function.
            <para>
              The frequency can be specified as samples per second,
              as sample per minute (for instance "15/m") or in samples per
              hour (e.g. "4/h"). To disable timed value notifications for this
              function, use the value "OFF". Note that setting the  timed value
              notification frequency to a greater value than the sensor native
              sampling frequency is unless, and even counterproductive: those two
              frequencies are not related.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the timed value notification frequency for this function
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSensorProxy.ReportFrequency">
            <value>Timed value notification frequency, or "OFF" if timed</value>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_advMode">
            <summary>
              Returns the measuring mode used for the advertised value pushed to the parent hub.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YSensor.ADVMODE_IMMEDIATE</c>, <c>YSensor.ADVMODE_PERIOD_AVG</c>,
              <c>YSensor.ADVMODE_PERIOD_MIN</c> and <c>YSensor.ADVMODE_PERIOD_MAX</c> corresponding to the
              measuring mode used for the advertised value pushed to the parent hub
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.ADVMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.set_advMode(System.Int32)">
            <summary>
              Changes the measuring mode used for the advertised value pushed to the parent hub.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YSensor.ADVMODE_IMMEDIATE</c>, <c>YSensor.ADVMODE_PERIOD_AVG</c>,
              <c>YSensor.ADVMODE_PERIOD_MIN</c> and <c>YSensor.ADVMODE_PERIOD_MAX</c> corresponding to the
              measuring mode used for the advertised value pushed to the parent hub
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSensorProxy.AdvMode">
            <value>Measuring mode used for the advertised value pushed to the parent hub.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.set_resolution(System.Double)">
            <summary>
              Changes the resolution of the measured physical values.
            <para>
              The resolution corresponds to the numerical precision
              when displaying value. It does not change the precision of the measure itself.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the resolution of the measured physical values
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_resolution">
            <summary>
              Returns the resolution of the measured values.
            <para>
              The resolution corresponds to the numerical precision
              of the measures, which is not always the same as the actual precision of the sensor.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the resolution of the measured values
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.RESOLUTION_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSensorProxy.Resolution">
            <value>Resolution of the measured values. The resolution corresponds to the numerical precision</value>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_sensorState">
            <summary>
              Returns the sensor health state code, which is zero when there is an up-to-date measure
              available or a positive code if the sensor is not able to provide a measure right now.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the sensor health state code, which is zero when there is an up-to-date measure
              available or a positive code if the sensor is not able to provide a measure right now
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSensor.SENSORSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.isSensorReady">
            <summary>
              Checks if the sensor is currently able to provide an up-to-date measure.
            <para>
              Returns false if the device is unreachable, or if the sensor does not have
              a current measure to transmit. No exception is raised if there is an error
              while trying to contact the device hosting $THEFUNCTION$.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>true</c> if the sensor can provide an up-to-date measure, and <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_dataLogger">
            <summary>
              Returns the <c>YDatalogger</c> object of the device hosting the sensor.
            <para>
              This method returns an object
              that can control global parameters of the data logger. The returned object
              should not be freed.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an <c>YDatalogger</c> object, or null on error.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.startDataLogger">
            <summary>
              Starts the data logger on the device.
            <para>
              Note that the data logger
              will only save the measures on this sensor if the logFrequency
              is not set to "OFF".
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.stopDataLogger">
            <summary>
              Stops the datalogger on the device.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.get_recordedData(System.Double,System.Double)">
            <summary>
              Retrieves a <c>YDataSet</c> object holding historical data for this
              sensor, for a specified time interval.
            <para>
              The measures will be
              retrieved from the data logger, which must have been turned
              on at the desired time. See the documentation of the <c>YDataSet</c>
              class for information on how to get an overview of the
              recorded data, and how to load progressively a large set
              of measures from the data logger.
            </para>
            <para>
              This function only works if the device uses a recent firmware,
              as <c>YDataSet</c> objects are not supported by firmwares older than
              version 13000.
            </para>
            <para>
            </para>
            </summary>
            <param name="startTime">
              the start of the desired measure time interval,
              as a Unix timestamp, i.e. the number of seconds since
              January 1, 1970 UTC. The special value 0 can be used
              to include any measure, without initial limit.
            </param>
            <param name="endTime">
              the end of the desired measure time interval,
              as a Unix timestamp, i.e. the number of seconds since
              January 1, 1970 UTC. The special value 0 can be used
              to include any measure, without ending limit.
            </param>
            <returns>
              an instance of <c>YDataSet</c>, providing access to historical
              data. Past measures can be loaded progressively
              using methods from the <c>YDataSet</c> object.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSensorProxy.calibrateFromPoints(System.Double[],System.Double[])">
            <summary>
              Configures error correction data points, in particular to compensate for
              a possible perturbation of the measure caused by an enclosure.
            <para>
              It is possible
              to configure up to five correction points. Correction points must be provided
              in ascending order, and be in the range of the sensor. The device will automatically
              perform a linear interpolation of the error correction between specified
              points. Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
              For more information on advanced capabilities to refine the calibration of
              sensors, please contact support@yoctopuce.com.
            </para>
            <para>
            </para>
            </summary>
            <param name="rawValues">
              array of floating point numbers, corresponding to the raw
              values returned by the sensor for the correction points.
            </param>
            <param name="refValues">
              array of floating point numbers, corresponding to the corrected
              values for the correction points.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_hardwareId">
            <summary>
              Returns the unique hardware identifier of the function who performed the measures,
              in the form <c>SERIAL.FUNCTIONID</c>.
            <para>
              The unique hardware identifier is composed of the
              device serial number and of the hardware identifier of the function
              (for example <c>THRMCPL1-123456.temperature1</c>)
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the function (ex: <c>THRMCPL1-123456.temperature1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YDataSet.HARDWAREID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_functionId">
            <summary>
              Returns the hardware identifier of the function that performed the measure,
              without reference to the module.
            <para>
              For example <c>temperature1</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that identifies the function (ex: <c>temperature1</c>)
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_unit">
            <summary>
              Returns the measuring unit for the measured value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that represents a physical unit.
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YDataSet.UNIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_startTimeUTC">
            <summary>
              Returns the start time of the dataset, relative to the Jan 1, 1970.
            <para>
              When the <c>YDataSet</c> object is created, the start time is the value passed
              in parameter to the <c>get_dataSet()</c> function. After the
              very first call to <c>loadMore()</c>, the start time is updated
              to reflect the timestamp of the first measure actually found in the
              dataLogger within the specified range.
            </para>
            <para>
              <b>DEPRECATED</b>: This method has been replaced by <c>get_summary()</c>
              which contain more precise informations.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of seconds
              between the Jan 1, 1970 and the beginning of this data
              set (i.e. Unix time representation of the absolute time).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_endTimeUTC">
            <summary>
              Returns the end time of the dataset, relative to the Jan 1, 1970.
            <para>
              When the <c>YDataSet</c> object is created, the end time is the value passed
              in parameter to the <c>get_dataSet()</c> function. After the
              very first call to <c>loadMore()</c>, the end time is updated
              to reflect the timestamp of the last measure actually found in the
              dataLogger within the specified range.
            </para>
            <para>
              <b>DEPRECATED</b>: This method has been replaced by <c>get_summary()</c>
              which contain more precise informations.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an unsigned number corresponding to the number of seconds
              between the Jan 1, 1970 and the end of this data
              set (i.e. Unix time representation of the absolute time).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_progress">
            <summary>
              Returns the progress of the downloads of the measures from the data logger,
              on a scale from 0 to 100.
            <para>
              When the object is instantiated by <c>get_dataSet</c>,
              the progress is zero. Each time <c>loadMore()</c> is invoked, the progress
              is updated, to reach the value 100 only once all measures have been loaded.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.loadMore">
            <summary>
              Loads the the next block of measures from the dataLogger, and updates
              the progress indicator.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion),
              or a negative error code in case of failure.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_summary">
            <summary>
              Returns an <c>YMeasure</c> object which summarizes the whole
              <c>YDataSet</c>.
            <para>
              In includes the following information:
              - the start of a time interval
              - the end of a time interval
              - the minimal value observed during the time interval
              - the average value observed during the time interval
              - the maximal value observed during the time interval
            </para>
            <para>
              This summary is available as soon as <c>loadMore()</c> has
              been called for the first time.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an <c>YMeasure</c> object
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_preview">
            <summary>
              Returns a condensed version of the measures that can
              retrieved in this <c>YDataSet</c>, as a list of <c>YMeasure</c>
              objects.
            <para>
              Each item includes:
              - the start of a time interval
              - the end of a time interval
              - the minimal value observed during the time interval
              - the average value observed during the time interval
              - the maximal value observed during the time interval
            </para>
            <para>
              This preview is available as soon as <c>loadMore()</c> has
              been called for the first time.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a table of records, where each record depicts the
              measured values during a time interval
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_measuresAt(YoctoLib.YMeasure)">
            <summary>
              Returns the detailed set of measures for the time interval corresponding
              to a given condensed measures previously returned by <c>get_preview()</c>.
            <para>
              The result is provided as a list of <c>YMeasure</c> objects.
            </para>
            <para>
            </para>
            </summary>
            <param name="measure">
              condensed measure from the list previously returned by
              <c>get_preview()</c>.
            </param>
            <returns>
              a table of records, where each record depicts the
              measured values during a time interval
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataSetProxy.get_measures">
            <summary>
              Returns all measured values currently available for this DataSet,
              as a list of <c>YMeasure</c> objects.
            <para>
              Each item includes:
              - the start of the measure time interval
              - the end of the measure time interval
              - the minimal value observed during the time interval
              - the average value observed during the time interval
              - the maximal value observed during the time interval
            </para>
            <para>
              Before calling this method, you should call <c>loadMore()</c>
              to load data from the device. You may have to call loadMore()
              several time until all rows are loaded, but you can start
              looking at available data rows before the load is complete.
            </para>
            <para>
              The oldest measures are always loaded first, and the most
              recent measures will be loaded last. As a result, timestamps
              are normally sorted in ascending order within the measure table,
              unless there was an unexpected adjustment of the datalogger UTC
              clock.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a table of records, where each record depicts the
              measured value for a given time interval
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YAccelerometerProxy">
            <summary>
              The <c>YAccelerometer</c> class allows you to read and configure Yoctopuce accelerometers.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the possibility to access x, y and z components of the acceleration
              vector separately.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YAccelerometerProxy.FindAccelerometer(System.String)">
            <summary>
              Retrieves an accelerometer for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the accelerometer is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAccelerometer.isOnline()</c> to test if the accelerometer is
              indeed online at a given time. In case of ambiguity when looking for
              an accelerometer by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the accelerometer, for instance
              <c>Y3DMK002.accelerometer</c>.
            </param>
            <returns>
              a <c>YAccelerometer</c> object allowing you to drive the accelerometer.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAccelerometerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Accelerometer available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YAccelerometer.FindAccelerometer</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAccelerometerProxy.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAccelerometerProxy.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAccelerometerProxy.Bandwidth">
            <value>Measure update frequency, measured in Hz.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAccelerometerProxy.get_xValue">
            <summary>
              Returns the X component of the acceleration, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the X component of the acceleration, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.XVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAccelerometerProxy.get_yValue">
            <summary>
              Returns the Y component of the acceleration, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Y component of the acceleration, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.YVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAccelerometerProxy.get_zValue">
            <summary>
              Returns the Z component of the acceleration, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Z component of the acceleration, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAccelerometer.ZVALUE_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YAltitudeProxy">
            <summary>
              The <c>YAltitude</c> class allows you to read and configure Yoctopuce altimeters.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to configure the barometric pressure adjusted to
              sea level (QNH) for barometric sensors.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YAltitudeProxy.FindAltitude(System.String)">
            <summary>
              Retrieves an altimeter for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the altimeter is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAltitude.isOnline()</c> to test if the altimeter is
              indeed online at a given time. In case of ambiguity when looking for
              an altimeter by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the altimeter, for instance
              <c>YALTIMK2.altitude</c>.
            </param>
            <returns>
              a <c>YAltitude</c> object allowing you to drive the altimeter.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAltitudeProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Altitude available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YAltitude.FindAltitude</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAltitudeProxy.set_currentValue(System.Double)">
            <summary>
              Changes the current estimated altitude.
            <para>
              This allows one to compensate for
              ambient pressure variations and to work in relative mode.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current estimated altitude
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAltitudeProxy.set_qnh(System.Double)">
            <summary>
              Changes the barometric pressure adjusted to sea level used to compute
              the altitude (QNH).
            <para>
              This enables you to compensate for atmospheric pressure
              changes due to weather conditions. Applicable to barometric altimeters only.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the barometric pressure adjusted to sea level used to compute
              the altitude (QNH)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAltitudeProxy.get_qnh">
            <summary>
              Returns the barometric pressure adjusted to sea level used to compute
              the altitude (QNH).
            <para>
              Applicable to barometric altimeters only.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the barometric pressure adjusted to sea level used to compute
              the altitude (QNH)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAltitude.QNH_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAltitudeProxy.Qnh">
            <value>Barometric pressure adjusted to sea level used to compute</value>
        </member>
        <member name="M:YoctoProxyAPI.YAltitudeProxy.get_technology">
            <summary>
              Returns the technology used by the sesnor to compute
              altitude.
            <para>
              Possibles values are  "barometric" and "gps"
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the technology used by the sesnor to compute
              altitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAltitude.TECHNOLOGY_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YAnButtonProxy">
            <summary>
              The <c>YAnButton</c> class provide access to basic resistive inputs.
            <para>
              Such inputs can be used to measure the state
              of a simple button as well as to read an analog potentiometer (variable resistance).
              This can be use for instance with a continuous rotating knob, a throttle grip
              or a joystick. The module is capable to calibrate itself on min and max values,
              in order to compute a calibrated value that varies proportionally with the
              potentiometer position, regardless of its total resistance.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.FindAnButton(System.String)">
            <summary>
              Retrieves an analog input for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the analog input is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAnButton.isOnline()</c> to test if the analog input is
              indeed online at a given time. In case of ambiguity when looking for
              an analog input by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the analog input, for instance
              <c>YBUZZER2.anButton1</c>.
            </param>
            <returns>
              a <c>YAnButton</c> object allowing you to drive the analog input.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type AnButton available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YAnButton.FindAnButton</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_calibratedValue">
            <summary>
              Returns the current calibrated input value (between 0 and 1000, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current calibrated input value (between 0 and 1000, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.CALIBRATEDVALUE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAnButtonProxy.CalibratedValue">
            <value>Current calibrated input value (between 0 and 1000, included).</value>
        </member>
        <member name="P:YoctoProxyAPI.YAnButtonProxy.IsPressed">
            <value>True if the input (considered as binary) is active (closed contact), and false otherwise.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_rawValue">
            <summary>
              Returns the current measured input value as-is (between 0 and 4095, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current measured input value as-is (between 0 and 4095, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.RAWVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_analogCalibration">
            <summary>
              Tells if a calibration process is currently ongoing.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAnButton.ANALOGCALIBRATION_OFF</c> or <c>YAnButton.ANALOGCALIBRATION_ON</c>
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.ANALOGCALIBRATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.set_analogCalibration(System.Int32)">
            <summary>
              Starts or stops the calibration process.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module at the end of the calibration if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YAnButton.ANALOGCALIBRATION_OFF</c> or <c>YAnButton.ANALOGCALIBRATION_ON</c>
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAnButtonProxy.AnalogCalibration">
            <value>Tells if a calibration process is currently ongoing.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_calibrationMax">
            <summary>
              Returns the maximal value measured during the calibration (between 0 and 4095, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximal value measured during the calibration (between 0 and 4095, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.CALIBRATIONMAX_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.set_calibrationMax(System.Int32)">
            <summary>
              Changes the maximal calibration value for the input (between 0 and 4095, included), without actually
              starting the automated calibration.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximal calibration value for the input (between 0 and 4095,
              included), without actually
              starting the automated calibration
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAnButtonProxy.CalibrationMax">
            <value>Maximal value measured during the calibration (between 0 and 4095, included).</value>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_calibrationMin">
            <summary>
              Returns the minimal value measured during the calibration (between 0 and 4095, included).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimal value measured during the calibration (between 0 and 4095, included)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.CALIBRATIONMIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.set_calibrationMin(System.Int32)">
            <summary>
              Changes the minimal calibration value for the input (between 0 and 4095, included), without actually
              starting the automated calibration.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimal calibration value for the input (between 0 and 4095,
              included), without actually
              starting the automated calibration
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAnButtonProxy.CalibrationMin">
            <value>Minimal value measured during the calibration (between 0 and 4095, included).</value>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_sensitivity">
            <summary>
              Returns the sensibility for the input (between 1 and 1000) for triggering user callbacks.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the sensibility for the input (between 1 and 1000) for triggering user callbacks
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.SENSITIVITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.set_sensitivity(System.Int32)">
            <summary>
              Changes the sensibility for the input (between 1 and 1000) for triggering user callbacks.
            <para>
              The sensibility is used to filter variations around a fixed value, but does not preclude the
              transmission of events when the input value evolves constantly in the same direction.
              Special case: when the value 1000 is used, the callback will only be thrown when the logical state
              of the input switches from pressed to released and back.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the sensibility for the input (between 1 and 1000) for triggering user callbacks
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAnButtonProxy.Sensitivity">
            <value>Sensibility for the input (between 1 and 1000) for triggering user callbacks.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_isPressed">
            <summary>
              Returns true if the input (considered as binary) is active (closed contact), and false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAnButton.ISPRESSED_FALSE</c> or <c>YAnButton.ISPRESSED_TRUE</c>, according to true if
              the input (considered as binary) is active (closed contact), and false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.ISPRESSED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_lastTimePressed">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last time
              the input button was pressed (the input contact transitioned from open to closed).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last time
              the input button was pressed (the input contact transitioned from open to closed)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.LASTTIMEPRESSED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_lastTimeReleased">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last time
              the input button was released (the input contact transitioned from closed to open).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last time
              the input button was released (the input contact transitioned from closed to open)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.LASTTIMERELEASED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_pulseCounter">
            <summary>
              Returns the pulse counter value.
            <para>
              The value is a 32 bit integer. In case
              of overflow (>=2^32), the counter will wrap. To reset the counter, just
              call the resetCounter() method.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the pulse counter value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.PULSECOUNTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_pulseTimer">
            <summary>
              Returns the timer of the pulses counter (ms).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the timer of the pulses counter (ms)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.get_inputType">
            <summary>
              Returns the decoding method applied to the input (analog or multiplexed binary switches).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YAnButton.INPUTTYPE_ANALOG_FAST</c>, <c>YAnButton.INPUTTYPE_DIGITAL4</c> and
              <c>YAnButton.INPUTTYPE_ANALOG_SMOOTH</c> corresponding to the decoding method applied to the input
              (analog or multiplexed binary switches)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAnButton.INPUTTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.set_inputType(System.Int32)">
            <summary>
              Changes the decoding method applied to the input (analog or multiplexed binary switches).
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YAnButton.INPUTTYPE_ANALOG_FAST</c>, <c>YAnButton.INPUTTYPE_DIGITAL4</c> and
              <c>YAnButton.INPUTTYPE_ANALOG_SMOOTH</c> corresponding to the decoding method applied to the input
              (analog or multiplexed binary switches)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAnButtonProxy.InputType">
            <value>Decoding method applied to the input (analog or multiplexed binary switches).</value>
        </member>
        <member name="M:YoctoProxyAPI.YAnButtonProxy.resetCounter">
            <summary>
              Returns the pulse counter value as well as its timer.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YArithmeticSensorProxy">
            <summary>
              The <c>YArithmeticSensor</c> class allows some Yoctopuce devices to compute in real-time
              values based on an arithmetic formula involving one or more measured signals as
              well as the temperature.
            <para>
              As for any physical sensor, the computed values can be
              read by callback and stored in the built-in datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YArithmeticSensorProxy.FindArithmeticSensor(System.String)">
            <summary>
              Retrieves an arithmetic sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the arithmetic sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YArithmeticSensor.isOnline()</c> to test if the arithmetic sensor is
              indeed online at a given time. In case of ambiguity when looking for
              an arithmetic sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the arithmetic sensor, for instance
              <c>RXUVOLT1.arithmeticSensor1</c>.
            </param>
            <returns>
              a <c>YArithmeticSensor</c> object allowing you to drive the arithmetic sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YArithmeticSensorProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type ArithmeticSensor available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YArithmeticSensor.FindArithmeticSensor</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YArithmeticSensorProxy.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the arithmetic sensor.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the arithmetic sensor
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YArithmeticSensorProxy.get_description">
            <summary>
              Returns a short informative description of the formula.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a short informative description of the formula
            </returns>
            <para>
              On failure, throws an exception or returns <c>YArithmeticSensor.DESCRIPTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YArithmeticSensorProxy.defineExpression(System.String,System.String)">
            <summary>
              Defines the arithmetic function by means of an algebraic expression.
            <para>
              The expression
              may include references to device sensors, by their physical or logical name, to
              usual math functions and to auxiliary functions defined separately.
            </para>
            </summary>
            <param name="expr">
              the algebraic expression defining the function.
            </param>
            <param name="descr">
              short informative description of the expression.
            </param>
            <returns>
              the current expression value if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns YAPI.INVALID_DOUBLE.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YArithmeticSensorProxy.loadExpression">
            <summary>
              Retrieves the algebraic expression defining the arithmetic function, as previously
              configured using the <c>defineExpression</c> function.
            <para>
            </para>
            </summary>
            <returns>
              a string containing the mathematical expression.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YArithmeticSensorProxy.defineAuxiliaryFunction(System.String,System.Double[],System.Double[])">
            <summary>
              Defines a auxiliary function by means of a table of reference points.
            <para>
              Intermediate values
              will be interpolated between specified reference points. The reference points are given
              as pairs of floating point numbers.
              The auxiliary function will be available for use by all ArithmeticSensor objects of the
              device. Up to nine auxiliary function can be defined in a device, each containing up to
              96 reference points.
            </para>
            </summary>
            <param name="name">
              auxiliary function name, up to 16 characters.
            </param>
            <param name="inputValues">
              array of floating point numbers, corresponding to the function input value.
            </param>
            <param name="outputValues">
              array of floating point numbers, corresponding to the output value
              desired for each of the input value, index by index.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YAudioInProxy">
            <summary>
              The <c>YAudioIn</c> class allows you to configure the volume of an audio input.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.FindAudioIn(System.String)">
            <summary>
              Retrieves an audio input for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the audio input is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAudioIn.isOnline()</c> to test if the audio input is
              indeed online at a given time. In case of ambiguity when looking for
              an audio input by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the audio input, for instance
              <c>MyDevice.audioIn1</c>.
            </param>
            <returns>
              a <c>YAudioIn</c> object allowing you to drive the audio input.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type AudioIn available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YAudioIn.FindAudioIn</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.get_volume">
            <summary>
              Returns audio input gain, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to audio input gain, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.set_volume(System.Int32)">
            <summary>
              Changes audio input gain, in per cents.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to audio input gain, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAudioInProxy.Volume">
            <value>Udio input gain, in per cents.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.get_mute">
            <summary>
              Returns the state of the mute function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAudioIn.MUTE_FALSE</c> or <c>YAudioIn.MUTE_TRUE</c>, according to the state of the mute function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.MUTE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.set_mute(System.Int32)">
            <summary>
              Changes the state of the mute function.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YAudioIn.MUTE_FALSE</c> or <c>YAudioIn.MUTE_TRUE</c>, according to the state of the mute function
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAudioInProxy.Mute">
            <value>State of the mute function.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.get_volumeRange">
            <summary>
              Returns the supported volume range.
            <para>
              The low value of the
              range corresponds to the minimal audible value. To
              completely mute the sound, use <c>set_mute()</c>
              instead of the <c>set_volume()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the supported volume range
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.VOLUMERANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.get_signal">
            <summary>
              Returns the detected input signal level.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the detected input signal level
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.SIGNAL_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAudioInProxy.Signal">
            <value>Detected input signal level.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAudioInProxy.get_noSignalFor">
            <summary>
              Returns the number of seconds elapsed without detecting a signal.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds elapsed without detecting a signal
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioIn.NOSIGNALFOR_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YAudioOutProxy">
            <summary>
              The <c>YAudioOut</c> class allows you to configure the volume of an audio output.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.FindAudioOut(System.String)">
            <summary>
              Retrieves an audio output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the audio output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YAudioOut.isOnline()</c> to test if the audio output is
              indeed online at a given time. In case of ambiguity when looking for
              an audio output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the audio output, for instance
              <c>MyDevice.audioOut1</c>.
            </param>
            <returns>
              a <c>YAudioOut</c> object allowing you to drive the audio output.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type AudioOut available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YAudioOut.FindAudioOut</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.get_volume">
            <summary>
              Returns audio output volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to audio output volume, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.set_volume(System.Int32)">
            <summary>
              Changes audio output volume, in per cents.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to audio output volume, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAudioOutProxy.Volume">
            <value>Udio output volume, in per cents.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.get_mute">
            <summary>
              Returns the state of the mute function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YAudioOut.MUTE_FALSE</c> or <c>YAudioOut.MUTE_TRUE</c>, according to the state of the mute function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.MUTE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.set_mute(System.Int32)">
            <summary>
              Changes the state of the mute function.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YAudioOut.MUTE_FALSE</c> or <c>YAudioOut.MUTE_TRUE</c>, according to the state of the mute function
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAudioOutProxy.Mute">
            <value>State of the mute function.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.get_volumeRange">
            <summary>
              Returns the supported volume range.
            <para>
              The low value of the
              range corresponds to the minimal audible value. To
              completely mute the sound, use <c>set_mute()</c>
              instead of the <c>set_volume()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the supported volume range
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.VOLUMERANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.get_signal">
            <summary>
              Returns the detected output current level.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the detected output current level
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.SIGNAL_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YAudioOutProxy.Signal">
            <value>Detected output current level.</value>
        </member>
        <member name="M:YoctoProxyAPI.YAudioOutProxy.get_noSignalFor">
            <summary>
              Returns the number of seconds elapsed without detecting a signal.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds elapsed without detecting a signal
            </returns>
            <para>
              On failure, throws an exception or returns <c>YAudioOut.NOSIGNALFOR_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YBluetoothLinkProxy">
            <summary>
              BluetoothLink function provides control over Bluetooth link
              and status for devices that are Bluetooth-enabled.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.FindBluetoothLink(System.String)">
            <summary>
              Retrieves a Bluetooth sound controller for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the Bluetooth sound controller is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YBluetoothLink.isOnline()</c> to test if the Bluetooth sound controller is
              indeed online at a given time. In case of ambiguity when looking for
              a Bluetooth sound controller by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the Bluetooth sound controller, for instance
              <c>MyDevice.bluetoothLink1</c>.
            </param>
            <returns>
              a <c>YBluetoothLink</c> object allowing you to drive the Bluetooth sound controller.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type BluetoothLink available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YBluetoothLink.FindBluetoothLink</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_ownAddress">
            <summary>
              Returns the MAC-48 address of the bluetooth interface, which is unique on the bluetooth network.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the MAC-48 address of the bluetooth interface, which is unique on the
              bluetooth network
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.OWNADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_pairingPin">
            <summary>
              Returns an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.PAIRINGPIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.set_pairingPin(System.String)">
            <summary>
              Changes the PIN code used by the module for bluetooth pairing.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module to save the
              new value in the device flash.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the PIN code used by the module for bluetooth pairing
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBluetoothLinkProxy.PairingPin">
            <value>N opaque string if a PIN code has been configured in the device to access</value>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_remoteAddress">
            <summary>
              Returns the MAC-48 address of the remote device to connect to.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the MAC-48 address of the remote device to connect to
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.REMOTEADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.set_remoteAddress(System.String)">
            <summary>
              Changes the MAC-48 address defining which remote device to connect to.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the MAC-48 address defining which remote device to connect to
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBluetoothLinkProxy.RemoteAddress">
            <value>MAC-48 address of the remote device to connect to.</value>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_remoteName">
            <summary>
              Returns the bluetooth name the remote device, if found on the bluetooth network.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the bluetooth name the remote device, if found on the bluetooth network
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.REMOTENAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_mute">
            <summary>
              Returns the state of the mute function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YBluetoothLink.MUTE_FALSE</c> or <c>YBluetoothLink.MUTE_TRUE</c>, according to the state
              of the mute function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.MUTE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.set_mute(System.Int32)">
            <summary>
              Changes the state of the mute function.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YBluetoothLink.MUTE_FALSE</c> or <c>YBluetoothLink.MUTE_TRUE</c>, according to the state
              of the mute function
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBluetoothLinkProxy.Mute">
            <value>State of the mute function.</value>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_preAmplifier">
            <summary>
              Returns the audio pre-amplifier volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the audio pre-amplifier volume, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.PREAMPLIFIER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.set_preAmplifier(System.Int32)">
            <summary>
              Changes the audio pre-amplifier volume, in per cents.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the audio pre-amplifier volume, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBluetoothLinkProxy.PreAmplifier">
            <value>Audio pre-amplifier volume, in per cents.</value>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_volume">
            <summary>
              Returns the connected headset volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the connected headset volume, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.set_volume(System.Int32)">
            <summary>
              Changes the connected headset volume, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the connected headset volume, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_linkState">
            <summary>
              Returns the bluetooth link state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YBluetoothLink.LINKSTATE_DOWN</c>, <c>YBluetoothLink.LINKSTATE_FREE</c>,
              <c>YBluetoothLink.LINKSTATE_SEARCH</c>, <c>YBluetoothLink.LINKSTATE_EXISTS</c>,
              <c>YBluetoothLink.LINKSTATE_LINKED</c> and <c>YBluetoothLink.LINKSTATE_PLAY</c> corresponding to
              the bluetooth link state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.LINKSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.get_linkQuality">
            <summary>
              Returns the bluetooth receiver signal strength, in pourcents, or 0 if no connection is established.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the bluetooth receiver signal strength, in pourcents, or 0 if no
              connection is established
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBluetoothLink.LINKQUALITY_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBluetoothLinkProxy.LinkQuality">
            <value>Bluetooth receiver signal strength, in pourcents, or 0 if no connection is established.</value>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.connect">
            <summary>
              Attempt to connect to the previously selected remote device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBluetoothLinkProxy.disconnect">
            <summary>
              Disconnect from the previously selected remote device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YBuzzerProxy">
            <summary>
              The <c>YBuzzer</c> class allows you to drive a buzzer.
            <para>
              You can
              choose the frequency and the volume at which the buzzer must sound.
              You can also pre-program a play sequence.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.FindBuzzer(System.String)">
            <summary>
              Retrieves a buzzer for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the buzzer is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YBuzzer.isOnline()</c> to test if the buzzer is
              indeed online at a given time. In case of ambiguity when looking for
              a buzzer by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the buzzer, for instance
              <c>YBUZZER2.buzzer</c>.
            </param>
            <returns>
              a <c>YBuzzer</c> object allowing you to drive the buzzer.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Buzzer available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YBuzzer.FindBuzzer</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.set_frequency(System.Double)">
            <summary>
              Changes the frequency of the signal sent to the buzzer.
            <para>
              A zero value stops the buzzer.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the frequency of the signal sent to the buzzer
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.get_frequency">
            <summary>
              Returns the  frequency of the signal sent to the buzzer/speaker.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the  frequency of the signal sent to the buzzer/speaker
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBuzzerProxy.Frequency">
            <value>Frequency of the signal sent to the buzzer/speaker.</value>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.get_volume">
            <summary>
              Returns the volume of the signal sent to the buzzer/speaker.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the volume of the signal sent to the buzzer/speaker
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.VOLUME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.set_volume(System.Int32)">
            <summary>
              Changes the volume of the signal sent to the buzzer/speaker.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the volume of the signal sent to the buzzer/speaker
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBuzzerProxy.Volume">
            <value>Volume of the signal sent to the buzzer/speaker.</value>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.get_playSeqSize">
            <summary>
              Returns the current length of the playing sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current length of the playing sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.PLAYSEQSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.get_playSeqMaxSize">
            <summary>
              Returns the maximum length of the playing sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum length of the playing sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.PLAYSEQMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YBuzzerProxy.PlaySeqMaxSize">
            <value>Maximum length of the playing sequence.</value>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.get_playSeqSignature">
            <summary>
              Returns the playing sequence signature.
            <para>
              As playing
              sequences cannot be read from the device, this can be used
              to detect if a specific playing sequence is already
              programmed.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the playing sequence signature
            </returns>
            <para>
              On failure, throws an exception or returns <c>YBuzzer.PLAYSEQSIGNATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.addFreqMoveToPlaySeq(System.Int32,System.Int32)">
            <summary>
              Adds a new frequency transition to the playing sequence.
            <para>
            </para>
            </summary>
            <param name="freq">
              desired frequency when the transition is completed, in Hz
            </param>
            <param name="msDelay">
              duration of the frequency transition, in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.addPulseToPlaySeq(System.Int32,System.Int32)">
            <summary>
              Adds a pulse to the playing sequence.
            <para>
            </para>
            </summary>
            <param name="freq">
              pulse frequency, in Hz
            </param>
            <param name="msDuration">
              pulse duration, in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.addVolMoveToPlaySeq(System.Int32,System.Int32)">
            <summary>
              Adds a new volume transition to the playing sequence.
            <para>
              Frequency stays untouched:
              if frequency is at zero, the transition has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="volume">
              desired volume when the transition is completed, as a percentage.
            </param>
            <param name="msDuration">
              duration of the volume transition, in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.addNotesToPlaySeq(System.String)">
            <summary>
              Adds notes to the playing sequence.
            <para>
              Notes are provided as text words, separated by
              spaces. The pitch is specified using the usual letter from A to G. The duration is
              specified as the divisor of a whole note: 4 for a fourth, 8 for an eight note, etc.
              Some modifiers are supported: <c>#</c> and <c>b</c> to alter a note pitch,
              <c>'</c> and <c>,</c> to move to the upper/lower octave, <c>.</c> to enlarge
              the note duration.
            </para>
            </summary>
            <param name="notes">
              notes to be played, as a text string.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.startPlaySeq">
            <summary>
              Starts the preprogrammed playing sequence.
            <para>
              The sequence
              runs in loop until it is stopped by stopPlaySeq or an explicit
              change. To play the sequence only once, use <c>oncePlaySeq()</c>.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.stopPlaySeq">
            <summary>
              Stops the preprogrammed playing sequence and sets the frequency to zero.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.resetPlaySeq">
            <summary>
              Resets the preprogrammed playing sequence and sets the frequency to zero.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.oncePlaySeq">
            <summary>
              Starts the preprogrammed playing sequence and run it once only.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.savePlaySeq">
            <summary>
              Saves the preprogrammed playing sequence to flash memory.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.reloadPlaySeq">
            <summary>
              Reloads the preprogrammed playing sequence from the flash memory.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.pulse(System.Int32,System.Int32)">
            <summary>
              Activates the buzzer for a short duration.
            <para>
            </para>
            </summary>
            <param name="frequency">
              pulse frequency, in hertz
            </param>
            <param name="duration">
              pulse duration in milliseconds
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.freqMove(System.Int32,System.Int32)">
            <summary>
              Makes the buzzer frequency change over a period of time.
            <para>
            </para>
            </summary>
            <param name="frequency">
              frequency to reach, in hertz. A frequency under 25Hz stops the buzzer.
            </param>
            <param name="duration">
              pulse duration in milliseconds
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.volumeMove(System.Int32,System.Int32)">
            <summary>
              Makes the buzzer volume change over a period of time, frequency  stays untouched.
            <para>
            </para>
            </summary>
            <param name="volume">
              volume to reach in %
            </param>
            <param name="duration">
              change duration in milliseconds
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YBuzzerProxy.playNotes(System.String)">
            <summary>
              Immediately play a note sequence.
            <para>
              Notes are provided as text words, separated by
              spaces. The pitch is specified using the usual letter from A to G. The duration is
              specified as the divisor of a whole note: 4 for a fourth, 8 for an eight note, etc.
              Some modifiers are supported: <c>#</c> and <c>b</c> to alter a note pitch,
              <c>'</c> and <c>,</c> to move to the upper/lower octave, <c>.</c> to enlarge
              the note duration.
            </para>
            </summary>
            <param name="notes">
              notes to be played, as a text string.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YCarbonDioxideProxy">
            <summary>
              The <c>YCarbonDioxide</c> class allows you to read and configure Yoctopuce CO2 sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to perform manual calibration if required.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YCarbonDioxideProxy.FindCarbonDioxide(System.String)">
            <summary>
              Retrieves a CO2 sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the CO2 sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCarbonDioxide.isOnline()</c> to test if the CO2 sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a CO2 sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the CO2 sensor, for instance
              <c>YCO2MK02.carbonDioxide</c>.
            </param>
            <returns>
              a <c>YCarbonDioxide</c> object allowing you to drive the CO2 sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCarbonDioxideProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type CarbonDioxide available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YCarbonDioxide.FindCarbonDioxide</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCarbonDioxideProxy.get_abcPeriod">
            <summary>
              Returns the Automatic Baseline Calibration period, in hours.
            <para>
              A negative value
              means that automatic baseline calibration is disabled.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the Automatic Baseline Calibration period, in hours
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCarbonDioxide.ABCPERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCarbonDioxideProxy.set_abcPeriod(System.Int32)">
            <summary>
              Changes Automatic Baseline Calibration period, in hours.
            <para>
              If you need
              to disable automatic baseline calibration (for instance when using the
              sensor in an environment that is constantly above 400 ppm CO2), set the
              period to -1. For the Yocto-CO2-V2, the only possible values are 24 and -1.
              Remember to call the <c>saveToFlash()</c> method of the
              module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to Automatic Baseline Calibration period, in hours
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCarbonDioxideProxy.AbcPeriod">
            <value>Automatic Baseline Calibration period, in hours. A negative value</value>
        </member>
        <member name="M:YoctoProxyAPI.YCarbonDioxideProxy.triggerForcedCalibration(System.Double)">
            <summary>
              Triggers a forced calibration of the sensor at a given CO2 level, specified
              between 400ppm and 2000ppm.
            <para>
              Before invoking this command, the sensor must
              have been maintained within the specified CO2 density during at least two
              minutes.
            </para>
            <para>
            </para>
            </summary>
            <param name="refVal">
              reference CO2 density for the calibration
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCarbonDioxideProxy.triggerBaselineCalibration">
            <summary>
              Triggers a baseline calibration at standard CO2 ambiant level (400ppm).
            <para>
              It is normally not necessary to manually calibrate the sensor, because
              the built-in automatic baseline calibration procedure will automatically
              fix any long-term drift based on the lowest level of CO2 observed over the
              automatic calibration period. However, if automatic baseline calibration
              is disabled, you may want to manually trigger a calibration from time to
              time. Before starting a baseline calibration, make sure to put the sensor
              in a standard environment (e.g. outside in fresh air) at around 400 ppm
              for at least two minutes.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCarbonDioxideProxy.triggerZeroCalibration">
            <summary>
              Triggers a zero calibration of the sensor on carbon dioxide-free air -
              for use with first generation Yocto-CO2 only.
            <para>
              It is normally not necessary to manually calibrate the sensor, because
              the built-in automatic baseline calibration procedure will automatically
              fix any long-term drift based on the lowest level of CO2 observed over the
              automatic calibration period. However, if you disable automatic baseline
              calibration, you may want to manually trigger a calibration from time to
              time. Before starting a zero calibration, you should circulate carbon
              dioxide-free air within the sensor for a minute or two, using a small pipe
              connected to the sensor. Please contact support@yoctopuce.com for more details
              on the zero calibration procedure.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YCellularProxy">
            <summary>
              The <c>YCellular</c> class provides control over cellular network parameters
              and status for devices that are GSM-enabled.
            <para>
              Note that TCP/IP parameters are configured separately, using class <c>YNetwork</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.FindCellular(System.String)">
            <summary>
              Retrieves a cellular interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the cellular interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCellular.isOnline()</c> to test if the cellular interface is
              indeed online at a given time. In case of ambiguity when looking for
              a cellular interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the cellular interface, for instance
              <c>YHUBGSM1.cellular</c>.
            </param>
            <returns>
              a <c>YCellular</c> object allowing you to drive the cellular interface.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Cellular available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YCellular.FindCellular</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_linkQuality">
            <summary>
              Returns the link quality, expressed in percent.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the link quality, expressed in percent
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.LINKQUALITY_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.LinkQuality">
            <value>Link quality, expressed in percent.</value>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.CellOperator">
            <value>Cell operator currently in use.</value>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_cellOperator">
            <summary>
              Returns the name of the cell operator currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the cell operator currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.CELLOPERATOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_cellIdentifier">
            <summary>
              Returns the unique identifier of the cellular antenna in use: MCC, MNC, LAC and Cell ID.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the unique identifier of the cellular antenna in use: MCC, MNC, LAC and Cell ID
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.CELLIDENTIFIER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_cellType">
            <summary>
              Active cellular connection type.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YCellular.CELLTYPE_GPRS</c>, <c>YCellular.CELLTYPE_EGPRS</c>,
              <c>YCellular.CELLTYPE_WCDMA</c>, <c>YCellular.CELLTYPE_HSDPA</c>, <c>YCellular.CELLTYPE_NONE</c>,
              <c>YCellular.CELLTYPE_CDMA</c>, <c>YCellular.CELLTYPE_LTE_M</c>, <c>YCellular.CELLTYPE_NB_IOT</c>
              and <c>YCellular.CELLTYPE_EC_GSM_IOT</c>
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.CELLTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_imsi">
            <summary>
              Returns the International Mobile Subscriber Identity (MSI) that uniquely identifies
              the SIM card.
            <para>
              The first 3 digits represent the mobile country code (MCC), which
              is followed by the mobile network code (MNC), either 2-digit (European standard)
              or 3-digit (North American standard)
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the International Mobile Subscriber Identity (MSI) that uniquely identifies
              the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.IMSI_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_message">
            <summary>
              Returns the latest status message from the wireless interface.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest status message from the wireless interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.MESSAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_pin">
            <summary>
              Returns an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to an opaque string if a PIN code has been configured in the device to access
              the SIM card, or an empty string if none has been configured or if the code provided
              was rejected by the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.PIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_pin(System.String)">
            <summary>
              Changes the PIN code used by the module to access the SIM card.
            <para>
              This function does not change the code on the SIM card itself, but only changes
              the parameter used by the device to try to get access to it. If the SIM code
              does not work immediately on first try, it will be automatically forgotten
              and the message will be set to "Enter SIM PIN". The method should then be
              invoked again with right correct PIN code. After three failed attempts in a row,
              the message is changed to "Enter SIM PUK" and the SIM card PUK code must be
              provided using method <c>sendPUK</c>.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module to save the
              new value in the device flash.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the PIN code used by the module to access the SIM card
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.Pin">
            <value>N opaque string if a PIN code has been configured in the device to access</value>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_radioConfig">
            <summary>
              Returns the type of protocol used over the serial line, as a string.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used over the serial line, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.RADIOCONFIG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_radioConfig(System.String)">
            <summary>
              Changes the type of protocol used over the serial line.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each bytes sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used over the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.RadioConfig">
            <value>Type of protocol used over the serial line, as a string.</value>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_lockedOperator">
            <summary>
              Returns the name of the only cell operator to use if automatic choice is disabled,
              or an empty string if the SIM card will automatically choose among available
              cell operators.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the only cell operator to use if automatic choice is disabled,
              or an empty string if the SIM card will automatically choose among available
              cell operators
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.LOCKEDOPERATOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_lockedOperator(System.String)">
            <summary>
              Changes the name of the cell operator to be used.
            <para>
              If the name is an empty
              string, the choice will be made automatically based on the SIM card. Otherwise,
              the selected operator is the only one that will be used.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the name of the cell operator to be used
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.LockedOperator">
            <value>Name of the only cell operator to use if automatic choice is disabled,</value>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_airplaneMode">
            <summary>
              Returns true if the airplane mode is active (radio turned off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YCellular.AIRPLANEMODE_OFF</c> or <c>YCellular.AIRPLANEMODE_ON</c>, according to true if
              the airplane mode is active (radio turned off)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.AIRPLANEMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_airplaneMode(System.Int32)">
            <summary>
              Changes the activation state of airplane mode (radio turned off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YCellular.AIRPLANEMODE_OFF</c> or <c>YCellular.AIRPLANEMODE_ON</c>, according to the
              activation state of airplane mode (radio turned off)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_enableData">
            <summary>
              Returns the condition for enabling IP data services (GPRS).
            <para>
              When data services are disabled, SMS are the only mean of communication.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YCellular.ENABLEDATA_HOMENETWORK</c>, <c>YCellular.ENABLEDATA_ROAMING</c>,
              <c>YCellular.ENABLEDATA_NEVER</c> and <c>YCellular.ENABLEDATA_NEUTRALITY</c> corresponding to the
              condition for enabling IP data services (GPRS)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.ENABLEDATA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_enableData(System.Int32)">
            <summary>
              Changes the condition for enabling IP data services (GPRS).
            <para>
              The service can be either fully deactivated, or limited to the SIM home network,
              or enabled for all partner networks (roaming). Caution: enabling data services
              on roaming networks may cause prohibitive communication costs !
            </para>
            <para>
              When data services are disabled, SMS are the only mean of communication.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YCellular.ENABLEDATA_HOMENETWORK</c>, <c>YCellular.ENABLEDATA_ROAMING</c>,
              <c>YCellular.ENABLEDATA_NEVER</c> and <c>YCellular.ENABLEDATA_NEUTRALITY</c> corresponding to the
              condition for enabling IP data services (GPRS)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.EnableData">
            <value>Condition for enabling IP data services (GPRS).</value>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_apn">
            <summary>
              Returns the Access Point Name (APN) to be used, if needed.
            <para>
              When left blank, the APN suggested by the cell operator will be used.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the Access Point Name (APN) to be used, if needed
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.APN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_apn(System.String)">
            <summary>
              Returns the Access Point Name (APN) to be used, if needed.
            <para>
              When left blank, the APN suggested by the cell operator will be used.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.Apn">
            <value>Access Point Name (APN) to be used, if needed.</value>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_apnSecret">
            <summary>
              Returns an opaque string if APN authentication parameters have been configured
              in the device, or an empty string otherwise.
            <para>
              To configure these parameters, use <c>set_apnAuth()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to an opaque string if APN authentication parameters have been configured
              in the device, or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.APNSECRET_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_pingInterval">
            <summary>
              Returns the automated connectivity check interval, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the automated connectivity check interval, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.PINGINTERVAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_pingInterval(System.Int32)">
            <summary>
              Changes the automated connectivity check interval, in seconds.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the automated connectivity check interval, in seconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCellularProxy.PingInterval">
            <value>Automated connectivity check interval, in seconds.</value>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_dataSent">
            <summary>
              Returns the number of bytes sent so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of bytes sent so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.DATASENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_dataSent(System.Int32)">
            <summary>
              Changes the value of the outgoing data counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the outgoing data counter
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_dataReceived">
            <summary>
              Returns the number of bytes received so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of bytes received so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCellular.DATARECEIVED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_dataReceived(System.Int32)">
            <summary>
              Changes the value of the incoming data counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the incoming data counter
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.sendPUK(System.String,System.String)">
            <summary>
              Sends a PUK code to unlock the SIM card after three failed PIN code attempts, and
              setup a new PIN into the SIM card.
            <para>
              Only ten consecutive tentatives are permitted:
              after that, the SIM card will be blocked permanently without any mean of recovery
              to use it again. Note that after calling this method, you have usually to invoke
              method <c>set_pin()</c> to tell the YoctoHub which PIN to use in the future.
            </para>
            <para>
            </para>
            </summary>
            <param name="puk">
              the SIM PUK code
            </param>
            <param name="newPin">
              new PIN code to configure into the SIM card
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.set_apnAuth(System.String,System.String)">
            <summary>
              Configure authentication parameters to connect to the APN.
            <para>
              Both
              PAP and CHAP authentication are supported.
            </para>
            <para>
            </para>
            </summary>
            <param name="username">
              APN username
            </param>
            <param name="password">
              APN password
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.clearDataCounters">
            <summary>
              Clear the transmitted data counters.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy._AT(System.String)">
            <summary>
              Sends an AT command to the GSM module and returns the command output.
            <para>
              The command will only execute when the GSM module is in standard
              command state, and should leave it in the exact same state.
              Use this function with great care !
            </para>
            </summary>
            <param name="cmd">
              the AT command to execute, like for instance: "+CCLK?".
            </param>
            <para>
            </para>
            <returns>
              a string with the result of the commands. Empty lines are
              automatically removed from the output.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.get_availableOperators">
            <summary>
              Returns the list detected cell operators in the neighborhood.
            <para>
              This function will typically take between 30 seconds to 1 minute to
              return. Note that any SIM card can usually only connect to specific
              operators. All networks returned by this function might therefore
              not be available for connection.
            </para>
            </summary>
            <returns>
              a list of string (cell operator names).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.quickCellSurvey">
            <summary>
              Returns a list of nearby cellular antennas, as required for quick
              geolocation of the device.
            <para>
              The first cell listed is the serving
              cell, and the next ones are the neighbor cells reported by the
              serving cell.
            </para>
            </summary>
            <returns>
              a list of <c>YCellRecords</c>.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellularProxy.decodePLMN(System.String)">
            <summary>
              Returns the cell operator brand for a given MCC/MNC pair.
            <para>
            </para>
            </summary>
            <param name="mccmnc">
              a string starting with a MCC code followed by a MNC code,
            </param>
            <returns>
              a string containing the corresponding cell operator brand name.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YColorLedProxy">
            <summary>
              The <c>ColorLed</c> class allows you to drive a color LED.
            <para>
              The color can be specified using RGB coordinates as well as HSL coordinates.
              The module performs all conversions form RGB to HSL automatically. It is then
              self-evident to turn on a LED with a given hue and to progressively vary its
              saturation or lightness. If needed, you can find more information on the
              difference between RGB and HSL in the section following this one.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.FindColorLed(System.String)">
            <summary>
              Retrieves an RGB LED for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the RGB LED is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YColorLed.isOnline()</c> to test if the RGB LED is
              indeed online at a given time. In case of ambiguity when looking for
              an RGB LED by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the RGB LED, for instance
              <c>YRGBLED2.colorLed1</c>.
            </param>
            <returns>
              a <c>YColorLed</c> object allowing you to drive the RGB LED.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type ColorLed available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YColorLed.FindColorLed</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.get_rgbColor">
            <summary>
              Returns the current RGB color of the LED.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current RGB color of the LED
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.RGBCOLOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.set_rgbColor(System.Int32)">
            <summary>
              Changes the current color of the LED, using an RGB color.
            <para>
              Encoding is done as follows: 0xRRGGBB.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current color of the LED, using an RGB color
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedProxy.RgbColor">
            <value>Current RGB color of the LED.</value>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedProxy.HslColor">
            <value>Current HSL color of the LED.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.get_hslColor">
            <summary>
              Returns the current HSL color of the LED.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current HSL color of the LED
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.HSLCOLOR_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.set_hslColor(System.Int32)">
            <summary>
              Changes the current color of the LED, using a color HSL.
            <para>
              Encoding is done as follows: 0xHHSSLL.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current color of the LED, using a color HSL
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.rgbMove(System.Int32,System.Int32)">
            <summary>
              Performs a smooth transition in the RGB color space between the current color and a target color.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="rgb_target">
              desired RGB color at the end of the transition
            </param>
            <param name="ms_duration">
              duration of the transition, in millisecond
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.hslMove(System.Int32,System.Int32)">
            <summary>
              Performs a smooth transition in the HSL color space between the current color and a target color.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="hsl_target">
              desired HSL color at the end of the transition
            </param>
            <param name="ms_duration">
              duration of the transition, in millisecond
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.get_rgbColorAtPowerOn">
            <summary>
              Returns the configured color to be displayed when the module is turned on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the configured color to be displayed when the module is turned on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.RGBCOLORATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.set_rgbColorAtPowerOn(System.Int32)">
            <summary>
              Changes the color that the LED displays by default when the module is turned on.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the color that the LED displays by default when the module is turned on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedProxy.RgbColorAtPowerOn">
            <value>Configured color to be displayed when the module is turned on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.get_blinkSeqSize">
            <summary>
              Returns the current length of the blinking sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current length of the blinking sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.BLINKSEQSIZE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.get_blinkSeqMaxSize">
            <summary>
              Returns the maximum length of the blinking sequence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum length of the blinking sequence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.BLINKSEQMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedProxy.BlinkSeqMaxSize">
            <value>Maximum length of the blinking sequence.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.get_blinkSeqSignature">
            <summary>
              Return the blinking sequence signature.
            <para>
              Since blinking
              sequences cannot be read from the device, this can be used
              to detect if a specific blinking sequence is already
              programmed.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLed.BLINKSEQSIGNATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.addHslMoveToBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Add a new transition to the blinking sequence, the move will
              be performed in the HSL space.
            <para>
            </para>
            </summary>
            <param name="HSLcolor">
              desired HSL color when the transition is completed
            </param>
            <param name="msDelay">
              duration of the color transition, in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.addRgbMoveToBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Adds a new transition to the blinking sequence, the move is
              performed in the RGB space.
            <para>
            </para>
            </summary>
            <param name="RGBcolor">
              desired RGB color when the transition is completed
            </param>
            <param name="msDelay">
              duration of the color transition, in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.startBlinkSeq">
            <summary>
              Starts the preprogrammed blinking sequence.
            <para>
              The sequence is
              run in a loop until it is stopped by stopBlinkSeq or an explicit
              change.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.stopBlinkSeq">
            <summary>
              Stops the preprogrammed blinking sequence.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedProxy.resetBlinkSeq">
            <summary>
              Resets the preprogrammed blinking sequence.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YColorLedClusterProxy">
            <summary>
              The <c>YColorLedCluster</c> class allows you to drive a
              color LED cluster.
            <para>
              Unlike the <c>ColorLed</c> class, the <c>YColorLedCluster</c>
              class allows to handle several LEDs at once. Color changes can be done using RGB
              coordinates as well as HSL coordinates.
              The module performs all conversions form RGB to HSL automatically. It is then
              self-evident to turn on a LED with a given hue and to progressively vary its
              saturation or lightness. If needed, you can find more information on the
              difference between RGB and HSL in the section following this one.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.FindColorLedCluster(System.String)">
            <summary>
              Retrieves a RGB LED cluster for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the RGB LED cluster is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YColorLedCluster.isOnline()</c> to test if the RGB LED cluster is
              indeed online at a given time. In case of ambiguity when looking for
              a RGB LED cluster by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the RGB LED cluster, for instance
              <c>YRGBLED2.colorLedCluster</c>.
            </param>
            <returns>
              a <c>YColorLedCluster</c> object allowing you to drive the RGB LED cluster.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type ColorLedCluster available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YColorLedCluster.FindColorLedCluster</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_activeLedCount">
            <summary>
              Returns the number of LEDs currently handled by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of LEDs currently handled by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.ACTIVELEDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_activeLedCount(System.Int32)">
            <summary>
              Changes the number of LEDs currently handled by the device.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of LEDs currently handled by the device
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedClusterProxy.ActiveLedCount">
            <value>Number of LEDs currently handled by the device.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_ledType">
            <summary>
              Returns the RGB LED type currently handled by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YColorLedCluster.LEDTYPE_RGB</c> or <c>YColorLedCluster.LEDTYPE_RGBW</c>, according to
              the RGB LED type currently handled by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.LEDTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_ledType(System.Int32)">
            <summary>
              Changes the RGB LED type currently handled by the device.
            <para>
              Remember to call the matching module
              <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YColorLedCluster.LEDTYPE_RGB</c> or <c>YColorLedCluster.LEDTYPE_RGBW</c>, according to
              the RGB LED type currently handled by the device
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedClusterProxy.LedType">
            <value>RGB LED type currently handled by the device.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_maxLedCount">
            <summary>
              Returns the maximum number of LEDs that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of LEDs that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.MAXLEDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedClusterProxy.MaxLedCount">
            <value>Maximum number of LEDs that the device can handle.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_blinkSeqMaxCount">
            <summary>
              Returns the maximum number of sequences that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of sequences that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.BLINKSEQMAXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedClusterProxy.BlinkSeqMaxCount">
            <value>Maximum number of sequences that the device can handle.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_blinkSeqMaxSize">
            <summary>
              Returns the maximum length of sequences.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum length of sequences
            </returns>
            <para>
              On failure, throws an exception or returns <c>YColorLedCluster.BLINKSEQMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YColorLedClusterProxy.BlinkSeqMaxSize">
            <value>Maximum length of sequences.</value>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_rgbColor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the current color of consecutive LEDs in the cluster, using a RGB color.
            <para>
              Encoding is done as follows: 0xRRGGBB.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="rgbValue">
              new color.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_rgbColorAtPowerOn(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the  color at device startup of consecutive LEDs in the cluster, using a RGB color.
            <para>
              Encoding is done as follows: 0xRRGGBB. Don't forget to call <c>saveLedsConfigAtPowerOn()</c>
              to make sure the modification is saved in the device flash memory.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="rgbValue">
              new color.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_hslColorAtPowerOn(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the  color at device startup of consecutive LEDs in the cluster, using a HSL color.
            <para>
              Encoding is done as follows: 0xHHSSLL. Don't forget to call <c>saveLedsConfigAtPowerOn()</c>
              to make sure the modification is saved in the device flash memory.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="hslValue">
              new color.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_hslColor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Changes the current color of consecutive LEDs in the cluster, using a HSL color.
            <para>
              Encoding is done as follows: 0xHHSSLL.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="hslValue">
              new color.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.rgb_move(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Allows you to modify the current color of a group of adjacent LEDs to another color, in a seamless and
              autonomous manner.
            <para>
              The transition is performed in the RGB space.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="rgbValue">
              new color (0xRRGGBB).
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.hsl_move(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Allows you to modify the current color of a group of adjacent LEDs  to another color, in a seamless and
              autonomous manner.
            <para>
              The transition is performed in the HSL space. In HSL, hue is a circular
              value (0..360°). There are always two paths to perform the transition: by increasing
              or by decreasing the hue. The module selects the shortest transition.
              If the difference is exactly 180°, the module selects the transition which increases
              the hue.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="hslValue">
              new color (0xHHSSLL).
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.addRgbMoveToBlinkSeq(System.Int32,System.Int32,System.Int32)">
            <summary>
              Adds an RGB transition to a sequence.
            <para>
              A sequence is a transition list, which can
              be executed in loop by a group of LEDs.  Sequences are persistent and are saved
              in the device flash memory as soon as the <c>saveBlinkSeq()</c> method is called.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="rgbValue">
              target color (0xRRGGBB)
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.addHslMoveToBlinkSeq(System.Int32,System.Int32,System.Int32)">
            <summary>
              Adds an HSL transition to a sequence.
            <para>
              A sequence is a transition list, which can
              be executed in loop by an group of LEDs.  Sequences are persistent and are saved
              in the device flash memory as soon as the <c>saveBlinkSeq()</c> method is called.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="hslValue">
              target color (0xHHSSLL)
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.addMirrorToBlinkSeq(System.Int32)">
            <summary>
              Adds a mirror ending to a sequence.
            <para>
              When the sequence will reach the end of the last
              transition, its running speed will automatically be reversed so that the sequence plays
              in the reverse direction, like in a mirror. After the first transition of the sequence
              is played at the end of the reverse execution, the sequence starts again in
              the initial direction.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.addJumpToBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Adds to a sequence a jump to another sequence.
            <para>
              When a pixel will reach this jump,
              it will be automatically relinked to the new sequence, and will run it starting
              from the beginning.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="linkSeqIndex">
              index of the sequence to chain.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.addUnlinkToBlinkSeq(System.Int32)">
            <summary>
              Adds a to a sequence a hard stop code.
            <para>
              When a pixel will reach this stop code,
              instead of restarting the sequence in a loop it will automatically be unlinked
              from the sequence.
            </para>
            </summary>
            <param name="seqIndex">
              sequence index.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.linkLedToBlinkSeq(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Links adjacent LEDs to a specific sequence.
            <para>
              These LEDs start to execute
              the sequence as soon as  startBlinkSeq is called. It is possible to add an offset
              in the execution: that way we  can have several groups of LED executing the same
              sequence, with a  temporal offset. A LED cannot be linked to more than one sequence.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="offset">
              execution offset in ms.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.linkLedToBlinkSeqAtPowerOn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Links adjacent LEDs to a specific sequence at device power-on.
            <para>
              Don't forget to configure
              the sequence auto start flag as well and call <c>saveLedsConfigAtPowerOn()</c>. It is possible to add an offset
              in the execution: that way we  can have several groups of LEDs executing the same
              sequence, with a  temporal offset. A LED cannot be linked to more than one sequence.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="offset">
              execution offset in ms.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.linkLedToPeriodicBlinkSeq(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Links adjacent LEDs to a specific sequence.
            <para>
              These LED start to execute
              the sequence as soon as  startBlinkSeq is called. This function automatically
              introduces a shift between LEDs so that the specified number of sequence periods
              appears on the group of LEDs (wave effect).
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <param name="seqIndex">
              sequence index.
            </param>
            <param name="periods">
              number of periods to show on LEDs.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.unlinkLedFromBlinkSeq(System.Int32,System.Int32)">
            <summary>
              Unlinks adjacent LEDs from a  sequence.
            <para>
            </para>
            </summary>
            <param name="ledIndex">
              index of the first affected LED.
            </param>
            <param name="count">
              affected LED count.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.startBlinkSeq(System.Int32)">
            <summary>
              Starts a sequence execution: every LED linked to that sequence starts to
              run it in a loop.
            <para>
              Note that a sequence with a zero duration can't be started.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to start.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.stopBlinkSeq(System.Int32)">
            <summary>
              Stops a sequence execution.
            <para>
              If started again, the execution
              restarts from the beginning.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to stop.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.resetBlinkSeq(System.Int32)">
            <summary>
              Stops a sequence execution and resets its contents.
            <para>
              LEDs linked to this
              sequence are not automatically updated anymore.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to reset
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_blinkSeqStateAtPowerOn(System.Int32,System.Int32)">
            <summary>
              Configures a sequence to make it start automatically at device
              startup.
            <para>
              Note that a sequence with a zero duration can't be started.
              Don't forget to call <c>saveBlinkSeq()</c> to make sure the
              modification is saved in the device flash memory.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to reset.
            </param>
            <param name="autostart">
              0 to keep the sequence turned off and 1 to start it automatically.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_blinkSeqSpeed(System.Int32,System.Int32)">
            <summary>
              Changes the execution speed of a sequence.
            <para>
              The natural execution speed is 1000 per
              thousand. If you configure a slower speed, you can play the sequence in slow-motion.
              If you set a negative speed, you can play the sequence in reverse direction.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to start.
            </param>
            <param name="speed">
              sequence running speed (-1000...1000).
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.saveLedsConfigAtPowerOn">
            <summary>
              Saves the LEDs power-on configuration.
            <para>
              This includes the start-up color or
              sequence binding for all LEDs. Warning: if some LEDs are linked to a sequence, the
              method <c>saveBlinkSeq()</c> must also be called to save the sequence definition.
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.saveBlinkSeq(System.Int32)">
            <summary>
              Saves the definition of a sequence.
            <para>
              Warning: only sequence steps and flags are saved.
              to save the LEDs startup bindings, the method <c>saveLedsConfigAtPowerOn()</c>
              must be called.
            </para>
            </summary>
            <param name="seqIndex">
              index of the sequence to start.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_rgbColorBuffer(System.Int32,System.Byte[])">
            <summary>
              Sends a binary buffer to the LED RGB buffer, as is.
            <para>
              First three bytes are RGB components for LED specified as parameter, the
              next three bytes for the next LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_rgbColorArray(System.Int32,System.Int32[])">
            <summary>
              Sends 24bit RGB colors (provided as a list of integers) to the LED RGB buffer, as is.
            <para>
              The first number represents the RGB value of the LED specified as parameter, the second
              number represents the RGB value of the next LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="rgbList">
              a list of 24bit RGB codes, in the form 0xRRGGBB
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.rgbArrayOfs_move(System.Int32,System.Int32[],System.Int32)">
            <summary>
              Sets up a smooth RGB color transition to the specified pixel-by-pixel list of RGB
              color codes.
            <para>
              The first color code represents the target RGB value of the first LED,
              the next color code represents the target value of the next LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="rgbList">
              a list of target 24bit RGB codes, in the form 0xRRGGBB
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.rgbArray_move(System.Int32[],System.Int32)">
            <summary>
              Sets up a smooth RGB color transition to the specified pixel-by-pixel list of RGB
              color codes.
            <para>
              The first color code represents the target RGB value of the first LED,
              the next color code represents the target value of the next LED, etc.
            </para>
            </summary>
            <param name="rgbList">
              a list of target 24bit RGB codes, in the form 0xRRGGBB
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_hslColorBuffer(System.Int32,System.Byte[])">
            <summary>
              Sends a binary buffer to the LED HSL buffer, as is.
            <para>
              First three bytes are HSL components for the LED specified as parameter, the
              next three bytes for the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.set_hslColorArray(System.Int32,System.Int32[])">
            <summary>
              Sends 24bit HSL colors (provided as a list of integers) to the LED HSL buffer, as is.
            <para>
              The first number represents the HSL value of the LED specified as parameter, the second number represents
              the HSL value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="hslList">
              a list of 24bit HSL codes, in the form 0xHHSSLL
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.hslArray_move(System.Int32[],System.Int32)">
            <summary>
              Sets up a smooth HSL color transition to the specified pixel-by-pixel list of HSL
              color codes.
            <para>
              The first color code represents the target HSL value of the first LED,
              the second color code represents the target value of the second LED, etc.
            </para>
            </summary>
            <param name="hslList">
              a list of target 24bit HSL codes, in the form 0xHHSSLL
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.hslArrayOfs_move(System.Int32,System.Int32[],System.Int32)">
            <summary>
              Sets up a smooth HSL color transition to the specified pixel-by-pixel list of HSL
              color codes.
            <para>
              The first color code represents the target HSL value of the first LED,
              the second color code represents the target value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be updated
            </param>
            <param name="hslList">
              a list of target 24bit HSL codes, in the form 0xHHSSLL
            </param>
            <param name="delay">
              transition duration in ms
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_rgbColorBuffer(System.Int32,System.Int32)">
            <summary>
              Returns a binary buffer with content from the LED RGB buffer, as is.
            <para>
              First three bytes are RGB components for the first LED in the interval,
              the next three bytes for the second LED in the interval, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a binary buffer with RGB components of selected LEDs.
            </returns>
            <para>
              On failure, throws an exception or returns an empty binary buffer.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_rgbColorArray(System.Int32,System.Int32)">
            <summary>
              Returns a list on 24bit RGB color values with the current colors displayed on
              the RGB LEDs.
            <para>
              The first number represents the RGB value of the first LED,
              the second number represents the RGB value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a list of 24bit color codes with RGB components of selected LEDs, as 0xRRGGBB.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_rgbColorArrayAtPowerOn(System.Int32,System.Int32)">
            <summary>
              Returns a list on 24bit RGB color values with the RGB LEDs startup colors.
            <para>
              The first number represents the startup RGB value of the first LED,
              the second number represents the RGB value of the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED  which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a list of 24bit color codes with RGB components of selected LEDs, as 0xRRGGBB.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_linkedSeqArray(System.Int32,System.Int32)">
            <summary>
              Returns a list on sequence index for each RGB LED.
            <para>
              The first number represents the
              sequence index for the the first LED, the second number represents the sequence
              index for the second LED, etc.
            </para>
            </summary>
            <param name="ledIndex">
              index of the first LED which should be returned
            </param>
            <param name="count">
              number of LEDs which should be returned
            </param>
            <returns>
              a list of integers with sequence index
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_blinkSeqSignatures(System.Int32,System.Int32)">
            <summary>
              Returns a list on 32 bit signatures for specified blinking sequences.
            <para>
              Since blinking sequences cannot be read from the device, this can be used
              to detect if a specific blinking sequence is already programmed.
            </para>
            </summary>
            <param name="seqIndex">
              index of the first blinking sequence which should be returned
            </param>
            <param name="count">
              number of blinking sequences which should be returned
            </param>
            <returns>
              a list of 32 bit integer signatures
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_blinkSeqStateSpeed(System.Int32,System.Int32)">
            <summary>
              Returns a list of integers with the current speed for specified blinking sequences.
            <para>
            </para>
            </summary>
            <param name="seqIndex">
              index of the first sequence speed which should be returned
            </param>
            <param name="count">
              number of sequence speeds which should be returned
            </param>
            <returns>
              a list of integers, 0 for sequences turned off and 1 for sequences running
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_blinkSeqStateAtPowerOn(System.Int32,System.Int32)">
            <summary>
              Returns a list of integers with the "auto-start at power on" flag state for specified blinking sequences.
            <para>
            </para>
            </summary>
            <param name="seqIndex">
              index of the first blinking sequence which should be returned
            </param>
            <param name="count">
              number of blinking sequences which should be returned
            </param>
            <returns>
              a list of integers, 0 for sequences turned off and 1 for sequences running
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YColorLedClusterProxy.get_blinkSeqState(System.Int32,System.Int32)">
            <summary>
              Returns a list of integers with the started state for specified blinking sequences.
            <para>
            </para>
            </summary>
            <param name="seqIndex">
              index of the first blinking sequence which should be returned
            </param>
            <param name="count">
              number of blinking sequences which should be returned
            </param>
            <returns>
              a list of integers, 0 for sequences turned off and 1 for sequences running
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YCompassProxy">
            <summary>
              The <c>YCompass</c> class allows you to read and configure Yoctopuce compass functions.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YCompassProxy.FindCompass(System.String)">
            <summary>
              Retrieves a compass function for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the compass function is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCompass.isOnline()</c> to test if the compass function is
              indeed online at a given time. In case of ambiguity when looking for
              a compass function by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the compass function, for instance
              <c>Y3DMK002.compass</c>.
            </param>
            <returns>
              a <c>YCompass</c> object allowing you to drive the compass function.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCompassProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Compass available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YCompass.FindCompass</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCompassProxy.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCompass.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCompassProxy.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCompassProxy.Bandwidth">
            <value>Measure update frequency, measured in Hz.</value>
        </member>
        <member name="M:YoctoProxyAPI.YCompassProxy.get_magneticHeading">
            <summary>
              Returns the magnetic heading, regardless of the configured bearing.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the magnetic heading, regardless of the configured bearing
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCompass.MAGNETICHEADING_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YCurrentProxy">
            <summary>
              The <c>YCurrent</c> class allows you to read and configure Yoctopuce current sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentProxy.FindCurrent(System.String)">
            <summary>
              Retrieves a current sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the current sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCurrent.isOnline()</c> to test if the current sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a current sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the current sensor, for instance
              <c>YAMPMK01.current1</c>.
            </param>
            <returns>
              a <c>YCurrent</c> object allowing you to drive the current sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Current available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YCurrent.FindCurrent</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentProxy.get_enabled">
            <summary>
              Returns the activation state of this input.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YCurrent.ENABLED_FALSE</c> or <c>YCurrent.ENABLED_TRUE</c>, according to the activation
              state of this input
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrent.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentProxy.set_enabled(System.Int32)">
            <summary>
              Changes the activation state of this voltage input.
            <para>
              When AC measurements are disabled,
              the device will always assume a DC signal, and vice-versa. When both AC and DC measurements
              are active, the device switches between AC and DC mode based on the relative amplitude
              of variations compared to the average value.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YCurrent.ENABLED_FALSE</c> or <c>YCurrent.ENABLED_TRUE</c>, according to the activation
              state of this voltage input
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCurrentProxy.Enabled">
            <value>Activation state of this input.</value>
        </member>
        <member name="T:YoctoProxyAPI.YCurrentLoopOutputProxy">
            <summary>
              The <c>YCurrentLoopOutput</c> class allows you to drive a 4-20mA output
              by regulating the current flowing through the current loop.
            <para>
              It can also provide information about the power state of the current loop.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.FindCurrentLoopOutput(System.String)">
            <summary>
              Retrieves a 4-20mA output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the 4-20mA output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YCurrentLoopOutput.isOnline()</c> to test if the 4-20mA output is
              indeed online at a given time. In case of ambiguity when looking for
              a 4-20mA output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the 4-20mA output, for instance
              <c>TX420MA1.currentLoopOutput</c>.
            </param>
            <returns>
              a <c>YCurrentLoopOutput</c> object allowing you to drive the 4-20mA output.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type CurrentLoopOutput available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YCurrentLoopOutput.FindCurrentLoopOutput</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.set_current(System.Double)">
            <summary>
              Changes the current loop, the valid range is from 3 to 21mA.
            <para>
              If the loop is
              not properly powered, the  target current is not reached and
              loopPower is set to LOWPWR.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current loop, the valid range is from 3 to 21mA
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.get_current">
            <summary>
              Returns the loop current set point in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the loop current set point in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrentLoopOutput.CURRENT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCurrentLoopOutputProxy.Current">
            <value>Loop current set point in mA.</value>
        </member>
        <member name="P:YoctoProxyAPI.YCurrentLoopOutputProxy.LoopPower">
            <value>POWEROK when the loop is powered, NOPWR when the loop is not powered, LOWPWR when the loop is not powered enough to maintain requested current.</value>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.set_currentAtStartUp(System.Double)">
            <summary>
              Changes the loop current at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the loop current at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.get_currentAtStartUp">
            <summary>
              Returns the current in the loop at device startup, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current in the loop at device startup, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrentLoopOutput.CURRENTATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YCurrentLoopOutputProxy.CurrentAtStartUp">
            <value>Current in the loop at device startup, in mA.</value>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.get_loopPower">
            <summary>
              Returns the loop powerstate.
            <para>
              POWEROK: the loop
              is powered. NOPWR: the loop in not powered. LOWPWR: the loop is not
              powered enough to maintain the current required (insufficient voltage).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YCurrentLoopOutput.LOOPPOWER_NOPWR</c>, <c>YCurrentLoopOutput.LOOPPOWER_LOWPWR</c>
              and <c>YCurrentLoopOutput.LOOPPOWER_POWEROK</c> corresponding to the loop powerstate
            </returns>
            <para>
              On failure, throws an exception or returns <c>YCurrentLoopOutput.LOOPPOWER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YCurrentLoopOutputProxy.currentMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of current flowing in the loop.
            <para>
              Any current explicit
              change cancels any ongoing transition process.
            </para>
            </summary>
            <param name="mA_target">
              new current value at the end of the transition
              (floating-point number, representing the end current in mA)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YDaisyChainProxy">
            <summary>
              The <c>YDaisyChain</c> class can be used to verify that devices that
              are daisy-chained directly from device to device, without a hub,
              are detected properly.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YDaisyChainProxy.FindDaisyChain(System.String)">
            <summary>
              Retrieves a module chain for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the module chain is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDaisyChain.isOnline()</c> to test if the module chain is
              indeed online at a given time. In case of ambiguity when looking for
              a module chain by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the module chain, for instance
              <c>MyDevice.daisyChain</c>.
            </param>
            <returns>
              a <c>YDaisyChain</c> object allowing you to drive the module chain.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDaisyChainProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type DaisyChain available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YDaisyChain.FindDaisyChain</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDaisyChainProxy.get_daisyState">
            <summary>
              Returns the state of the daisy-link between modules.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDaisyChain.DAISYSTATE_READY</c>, <c>YDaisyChain.DAISYSTATE_IS_CHILD</c>,
              <c>YDaisyChain.DAISYSTATE_FIRMWARE_MISMATCH</c>, <c>YDaisyChain.DAISYSTATE_CHILD_MISSING</c> and
              <c>YDaisyChain.DAISYSTATE_CHILD_LOST</c> corresponding to the state of the daisy-link between modules
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDaisyChain.DAISYSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDaisyChainProxy.get_childCount">
            <summary>
              Returns the number of child nodes currently detected.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of child nodes currently detected
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDaisyChain.CHILDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDaisyChainProxy.get_requiredChildCount">
            <summary>
              Returns the number of child nodes expected in normal conditions.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of child nodes expected in normal conditions
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDaisyChain.REQUIREDCHILDCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDaisyChainProxy.set_requiredChildCount(System.Int32)">
            <summary>
              Changes the number of child nodes expected in normal conditions.
            <para>
              If the value is zero, no check is performed. If it is non-zero, the number
              child nodes is checked on startup and the status will change to error if
              the count does not match. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of child nodes expected in normal conditions
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDaisyChainProxy.RequiredChildCount">
            <value>Number of child nodes expected in normal conditions.</value>
        </member>
        <member name="T:YoctoProxyAPI.YDataLoggerProxy">
            <summary>
              A non-volatile memory for storing ongoing measured data is available on most Yoctopuce
              sensors.
            <para>
              Recording can happen automatically, without requiring a permanent
              connection to a computer.
              The <c>YDataLogger</c> class controls the global parameters of the internal data
              logger. Recording control (start/stop) as well as data retreival is done at
              sensor objects level.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.FindDataLogger(System.String)">
            <summary>
              Retrieves a data logger for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the data logger is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDataLogger.isOnline()</c> to test if the data logger is
              indeed online at a given time. In case of ambiguity when looking for
              a data logger by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the data logger, for instance
              <c>LIGHTMK3.dataLogger</c>.
            </param>
            <returns>
              a <c>YDataLogger</c> object allowing you to drive the data logger.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type DataLogger available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YDataLogger.FindDataLogger</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.get_currentRunIndex">
            <summary>
              Returns the current run number, corresponding to the number of times the module was
              powered on with the dataLogger enabled at some point.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current run number, corresponding to the number of times the module was
              powered on with the dataLogger enabled at some point
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.CURRENTRUNINDEX_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.get_timeUTC">
            <summary>
              Returns the Unix timestamp for current UTC time, if known.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the Unix timestamp for current UTC time, if known
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.TIMEUTC_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.set_timeUTC(System.Int64)">
            <summary>
              Changes the current UTC time reference used for recorded data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current UTC time reference used for recorded data
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.get_recording">
            <summary>
              Returns the current activation state of the data logger.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDataLogger.RECORDING_OFF</c>, <c>YDataLogger.RECORDING_ON</c> and
              <c>YDataLogger.RECORDING_PENDING</c> corresponding to the current activation state of the data logger
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.RECORDING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.set_recording(System.Int32)">
            <summary>
              Changes the activation state of the data logger to start/stop recording data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDataLogger.RECORDING_OFF</c>, <c>YDataLogger.RECORDING_ON</c> and
              <c>YDataLogger.RECORDING_PENDING</c> corresponding to the activation state of the data logger to
              start/stop recording data
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDataLoggerProxy.Recording">
            <value>Current activation state of the data logger.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.get_autoStart">
            <summary>
              Returns the default activation state of the data logger on power up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YDataLogger.AUTOSTART_OFF</c> or <c>YDataLogger.AUTOSTART_ON</c>, according to the
              default activation state of the data logger on power up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.AUTOSTART_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.set_autoStart(System.Int32)">
            <summary>
              Changes the default activation state of the data logger on power up.
            <para>
              Do not forget to call the <c>saveToFlash()</c> method of the module to save the
              configuration change.  Note: if the device doesn't have any time source at his disposal when
              starting up, it will wait for ~8 seconds before automatically starting to record  with
              an arbitrary timestamp
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YDataLogger.AUTOSTART_OFF</c> or <c>YDataLogger.AUTOSTART_ON</c>, according to the
              default activation state of the data logger on power up
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDataLoggerProxy.AutoStart">
            <value>Default activation state of the data logger on power up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.get_beaconDriven">
            <summary>
              Returns true if the data logger is synchronised with the localization beacon.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YDataLogger.BEACONDRIVEN_OFF</c> or <c>YDataLogger.BEACONDRIVEN_ON</c>, according to true
              if the data logger is synchronised with the localization beacon
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.BEACONDRIVEN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.set_beaconDriven(System.Int32)">
            <summary>
              Changes the type of synchronisation of the data logger.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YDataLogger.BEACONDRIVEN_OFF</c> or <c>YDataLogger.BEACONDRIVEN_ON</c>, according to the
              type of synchronisation of the data logger
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDataLoggerProxy.BeaconDriven">
            <value>True if the data logger is synchronised with the localization beacon.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.get_usage">
            <summary>
              Returns the percentage of datalogger memory in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the percentage of datalogger memory in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDataLogger.USAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.forgetAllDataStreams">
            <summary>
              Clears the data logger memory and discards all recorded data streams.
            <para>
              This method also resets the current run index to zero.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDataLoggerProxy.get_dataSets">
            <summary>
              Returns a list of <c>YDataSet</c> objects that can be used to retrieve
              all measures stored by the data logger.
            <para>
            </para>
            <para>
              This function only works if the device uses a recent firmware,
              as <c>YDataSet</c> objects are not supported by firmwares older than
              version 13000.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a list of <c>YDataSet</c> object.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YDigitalIOProxy">
            <summary>
              The <c>YDigitalIO</c> class allows you drive a Yoctopuce digital input/output port.
            <para>
              It can be used to setup the direction of each channel, to read the state of each channel
              and to switch the state of each channel configures as an output.
              You can work on all channels at once, or one by one. Most functions
              use a binary representation for channels where bit 0 matches channel #0 , bit 1 matches channel
              #1 and so on. If you are not familiar with numbers binary representation, you will find more
              information here: <c>https://en.wikipedia.org/wiki/Binary_number#Representation</c>. It is also possible
              to automatically generate short pulses of a determined duration. Electrical behavior
              of each I/O can be modified (open drain and reverse polarity).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.FindDigitalIO(System.String)">
            <summary>
              Retrieves a digital IO port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the digital IO port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDigitalIO.isOnline()</c> to test if the digital IO port is
              indeed online at a given time. In case of ambiguity when looking for
              a digital IO port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the digital IO port, for instance
              <c>YMINIIO0.digitalIO</c>.
            </param>
            <returns>
              a <c>YDigitalIO</c> object allowing you to drive the digital IO port.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type DigitalIO available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YDigitalIO.FindDigitalIO</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_portState">
            <summary>
              Returns the digital IO port state as an integer with each bit
              representing a channel.
            <para>
              value 0 = <c>0b00000000</c> -> all channels are OFF
              value 1 = <c>0b00000001</c> -> channel #0 is ON
              value 2 = <c>0b00000010</c> -> channel #1 is ON
              value 3 = <c>0b00000011</c> -> channels #0 and #1 are ON
              value 4 = <c>0b00000100</c> -> channel #2 is ON
              and so on...
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the digital IO port state as an integer with each bit
              representing a channel
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_portState(System.Int32)">
            <summary>
              Changes the state of all digital IO port's channels at once: the parameter
              is an integer where each bit represents a channel, with bit 0 matching channel #0.
            <para>
              To set all channels to  0 -> <c>0b00000000</c> -> parameter = 0
              To set channel #0 to 1 -> <c>0b00000001</c> -> parameter =  1
              To set channel #1 to  1 -> <c>0b00000010</c> -> parameter = 2
              To set channel #0 and #1 -> <c>0b00000011</c> -> parameter =  3
              To set channel #2 to 1 -> <c>0b00000100</c> -> parameter =  4
              an so on....
              Only channels configured as outputs will be affecter, according to the value
              configured using <c>set_portDirection</c>.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the state of all digital IO port's channels at once: the parameter
              is an integer where each bit represents a channel, with bit 0 matching channel #0
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDigitalIOProxy.PortState">
            <value>Digital IO port state as an integer with each bit</value>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_portDirection">
            <summary>
              Returns the I/O direction of all channels of the port (bitmap): 0 makes a bit an input, 1 makes it an output.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the I/O direction of all channels of the port (bitmap): 0 makes a bit
              an input, 1 makes it an output
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTDIRECTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_portDirection(System.Int32)">
            <summary>
              Changes the I/O direction of all channels of the port (bitmap): 0 makes a bit an input, 1 makes it an output.
            <para>
              Remember to call the <c>saveToFlash()</c> method  to make sure the setting is kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the I/O direction of all channels of the port (bitmap): 0 makes a bit
              an input, 1 makes it an output
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDigitalIOProxy.PortDirection">
            <value>I/O direction of all channels of the port (bitmap): 0 makes a bit an input, 1 makes it an output.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_portOpenDrain">
            <summary>
              Returns the electrical interface for each bit of the port.
            <para>
              For each bit set to 0  the matching I/O works in the regular,
              intuitive way, for each bit set to 1, the I/O works in reverse mode.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the electrical interface for each bit of the port
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTOPENDRAIN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_portOpenDrain(System.Int32)">
            <summary>
              Changes the electrical interface for each bit of the port.
            <para>
              0 makes a bit a regular input/output, 1 makes
              it an open-drain (open-collector) input/output. Remember to call the
              <c>saveToFlash()</c> method  to make sure the setting is kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the electrical interface for each bit of the port
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDigitalIOProxy.PortOpenDrain">
            <value>Electrical interface for each bit of the port. For each bit set to 0  the matching I/O works in the regular,</value>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_portPolarity">
            <summary>
              Returns the polarity of all the bits of the port.
            <para>
              For each bit set to 0, the matching I/O works the regular,
              intuitive way; for each bit set to 1, the I/O works in reverse mode.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the polarity of all the bits of the port
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTPOLARITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_portPolarity(System.Int32)">
            <summary>
              Changes the polarity of all the bits of the port: For each bit set to 0, the matching I/O works the regular,
              intuitive way; for each bit set to 1, the I/O works in reverse mode.
            <para>
              Remember to call the <c>saveToFlash()</c> method  to make sure the setting will be kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the polarity of all the bits of the port: For each bit set to 0, the
              matching I/O works the regular,
              intuitive way; for each bit set to 1, the I/O works in reverse mode
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDigitalIOProxy.PortPolarity">
            <value>Polarity of all the bits of the port.  For each bit set to 0, the matching I/O works the regular,</value>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_portDiags">
            <summary>
              Returns the port state diagnostics (Yocto-IO and Yocto-MaxiIO-V2 only).
            <para>
              Bit 0 indicates a shortcut on
              output 0, etc. Bit 8 indicates a power failure, and bit 9 signals overheating (overcurrent).
              During normal use, all diagnostic bits should stay clear.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the port state diagnostics (Yocto-IO and Yocto-MaxiIO-V2 only)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTDIAGS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_portSize">
            <summary>
              Returns the number of bits (i.e.
            <para>
              channels)implemented in the I/O port.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of bits (i.e
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.PORTSIZE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDigitalIOProxy.PortSize">
            <value>Number of bits (i.e. channels)implemented in the I/O port.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_outputVoltage">
            <summary>
              Returns the voltage source used to drive output bits.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDigitalIO.OUTPUTVOLTAGE_USB_5V</c>, <c>YDigitalIO.OUTPUTVOLTAGE_USB_3V</c> and
              <c>YDigitalIO.OUTPUTVOLTAGE_EXT_V</c> corresponding to the voltage source used to drive output bits
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDigitalIO.OUTPUTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_outputVoltage(System.Int32)">
            <summary>
              Changes the voltage source used to drive output bits.
            <para>
              Remember to call the <c>saveToFlash()</c> method  to make sure the setting is kept after a reboot.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDigitalIO.OUTPUTVOLTAGE_USB_5V</c>, <c>YDigitalIO.OUTPUTVOLTAGE_USB_3V</c> and
              <c>YDigitalIO.OUTPUTVOLTAGE_EXT_V</c> corresponding to the voltage source used to drive output bits
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDigitalIOProxy.OutputVoltage">
            <value>Voltage source used to drive output bits.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_bitState(System.Int32,System.Int32)">
            <summary>
              Sets a single bit (i.e.
            <para>
              channel) of the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="bitstate">
              the state of the bit (1 or 0)
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_bitState(System.Int32)">
            <summary>
              Returns the state of a single bit (i.e.
            <para>
              channel)  of the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              the bit state (0 or 1)
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.toggle_bitState(System.Int32)">
            <summary>
              Reverts a single bit (i.e.
            <para>
              channel) of the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_bitDirection(System.Int32,System.Int32)">
            <summary>
              Changes  the direction of a single bit (i.e.
            <para>
              channel) from the I/O port.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="bitdirection">
              direction to set, 0 makes the bit an input, 1 makes it an output.
              Remember to call the   <c>saveToFlash()</c> method to make sure the setting is kept after a reboot.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_bitDirection(System.Int32)">
            <summary>
              Returns the direction of a single bit (i.e.
            <para>
              channel) from the I/O port (0 means the bit is an input, 1  an output).
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_bitPolarity(System.Int32,System.Int32)">
            <summary>
              Changes the polarity of a single bit from the I/O port.
            <para>
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0.
            </param>
            <param name="bitpolarity">
              polarity to set, 0 makes the I/O work in regular mode, 1 makes the I/O  works in reverse mode.
              Remember to call the   <c>saveToFlash()</c> method to make sure the setting is kept after a reboot.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_bitPolarity(System.Int32)">
            <summary>
              Returns the polarity of a single bit from the I/O port (0 means the I/O works in regular mode, 1 means the I/O  works in reverse mode).
            <para>
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.set_bitOpenDrain(System.Int32,System.Int32)">
            <summary>
              Changes  the electrical interface of a single bit from the I/O port.
            <para>
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="opendrain">
              0 makes a bit a regular input/output, 1 makes
              it an open-drain (open-collector) input/output. Remember to call the
              <c>saveToFlash()</c> method to make sure the setting is kept after a reboot.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.get_bitOpenDrain(System.Int32)">
            <summary>
              Returns the type of electrical interface of a single bit from the I/O port.
            <para>
              (0 means the bit is an input, 1  an output).
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <returns>
              0 means the a bit is a regular input/output, 1 means the bit is an open-drain
              (open-collector) input/output.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.pulse(System.Int32,System.Int32)">
            <summary>
              Triggers a pulse on a single bit for a specified duration.
            <para>
              The specified bit
              will be turned to 1, and then back to 0 after the given duration.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="ms_duration">
              desired pulse duration in milliseconds. Be aware that the device time
              resolution is not guaranteed up to the millisecond.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDigitalIOProxy.delayedPulse(System.Int32,System.Int32,System.Int32)">
            <summary>
              Schedules a pulse on a single bit for a specified duration.
            <para>
              The specified bit
              will be turned to 1, and then back to 0 after the given duration.
            </para>
            </summary>
            <param name="bitno">
              the bit number; lowest bit has index 0
            </param>
            <param name="ms_delay">
              waiting time before the pulse, in milliseconds
            </param>
            <param name="ms_duration">
              desired pulse duration in milliseconds. Be aware that the device time
              resolution is not guaranteed up to the millisecond.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YDisplayProxy">
            <summary>
              The <c>YDisplay</c> class allows to drive Yoctopuce displays.
            <para>
              Yoctopuce display interface has been designed to easily
              show information and images. The device provides built-in
              multi-layer rendering. Layers can be drawn offline, individually,
              and freely moved on the display. It can also replay recorded
              sequences (animations).
            </para>
            <para>
              In order to draw on the screen, you should use the
              <c>display.get_displayLayer</c> method to retrieve the layer(s) on
              which you want to draw, and then use methods defined in
              <c>YDisplayLayer</c> to draw on the layers.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.FindDisplay(System.String)">
            <summary>
              Retrieves a display for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the display is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDisplay.isOnline()</c> to test if the display is
              indeed online at a given time. In case of ambiguity when looking for
              a display by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the display, for instance
              <c>YD128X32.display</c>.
            </param>
            <returns>
              a <c>YDisplay</c> object allowing you to drive the display.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Display available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YDisplay.FindDisplay</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_enabled">
            <summary>
              Returns true if the screen is powered, false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YDisplay.ENABLED_FALSE</c> or <c>YDisplay.ENABLED_TRUE</c>, according to true if the
              screen is powered, false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.set_enabled(System.Int32)">
            <summary>
              Changes the power state of the display.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YDisplay.ENABLED_FALSE</c> or <c>YDisplay.ENABLED_TRUE</c>, according to the power state
              of the display
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_startupSeq">
            <summary>
              Returns the name of the sequence to play when the displayed is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the sequence to play when the displayed is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.STARTUPSEQ_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.set_startupSeq(System.String)">
            <summary>
              Changes the name of the sequence to play when the displayed is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the name of the sequence to play when the displayed is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.StartupSeq">
            <value>Name of the sequence to play when the displayed is powered on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_brightness">
            <summary>
              Returns the luminosity of the  module informative LEDs (from 0 to 100).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the luminosity of the  module informative LEDs (from 0 to 100)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.BRIGHTNESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.set_brightness(System.Int32)">
            <summary>
              Changes the brightness of the display.
            <para>
              The parameter is a value between 0 and
              100. Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the brightness of the display
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.Brightness">
            <value>Luminosity of the  module informative LEDs (from 0 to 100).</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_orientation">
            <summary>
              Returns the currently selected display orientation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDisplay.ORIENTATION_LEFT</c>, <c>YDisplay.ORIENTATION_UP</c>,
              <c>YDisplay.ORIENTATION_RIGHT</c> and <c>YDisplay.ORIENTATION_DOWN</c> corresponding to the
              currently selected display orientation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.ORIENTATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.set_orientation(System.Int32)">
            <summary>
              Changes the display orientation.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDisplay.ORIENTATION_LEFT</c>, <c>YDisplay.ORIENTATION_UP</c>,
              <c>YDisplay.ORIENTATION_RIGHT</c> and <c>YDisplay.ORIENTATION_DOWN</c> corresponding to the display orientation
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.Orientation">
            <value>Currently selected display orientation.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_displayWidth">
            <summary>
              Returns the display width, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display width, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.DISPLAYWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.DisplayWidth">
            <value>Display width, in pixels.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_displayHeight">
            <summary>
              Returns the display height, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display height, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.DISPLAYHEIGHT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.DisplayHeight">
            <value>Display height, in pixels.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_displayType">
            <summary>
              Returns the display type: monochrome, gray levels or full color.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDisplay.DISPLAYTYPE_MONO</c>, <c>YDisplay.DISPLAYTYPE_GRAY</c> and
              <c>YDisplay.DISPLAYTYPE_RGB</c> corresponding to the display type: monochrome, gray levels or full color
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.DISPLAYTYPE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.DisplayType">
            <value>Display type: monochrome, gray levels or full color.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_layerWidth">
            <summary>
              Returns the width of the layers to draw on, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the width of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.LAYERWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.LayerWidth">
            <value>Width of the layers to draw on, in pixels.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_layerHeight">
            <summary>
              Returns the height of the layers to draw on, in pixels.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the height of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.LAYERHEIGHT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.LayerHeight">
            <value>Height of the layers to draw on, in pixels.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_layerCount">
            <summary>
              Returns the number of available layers to draw on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of available layers to draw on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDisplay.LAYERCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDisplayProxy.LayerCount">
            <value>Number of available layers to draw on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.resetAll">
            <summary>
              Clears the display screen and resets all display layers to their default state.
            <para>
              Using this function in a sequence will kill the sequence play-back. Don't use that
              function to reset the display at sequence start-up.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.fade(System.Int32,System.Int32)">
            <summary>
              Smoothly changes the brightness of the screen to produce a fade-in or fade-out
              effect.
            <para>
            </para>
            </summary>
            <param name="brightness">
              the new screen brightness
            </param>
            <param name="duration">
              duration of the brightness transition, in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.newSequence">
            <summary>
              Starts to record all display commands into a sequence, for later replay.
            <para>
              The name used to store the sequence is specified when calling
              <c>saveSequence()</c>, once the recording is complete.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.saveSequence(System.String)">
            <summary>
              Stops recording display commands and saves the sequence into the specified
              file on the display internal memory.
            <para>
              The sequence can be later replayed
              using <c>playSequence()</c>.
            </para>
            </summary>
            <param name="sequenceName">
              the name of the newly created sequence
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.playSequence(System.String)">
            <summary>
              Replays a display sequence previously recorded using
              <c>newSequence()</c> and <c>saveSequence()</c>.
            <para>
            </para>
            </summary>
            <param name="sequenceName">
              the name of the newly created sequence
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.pauseSequence(System.Int32)">
            <summary>
              Waits for a specified delay (in milliseconds) before playing next
              commands in current sequence.
            <para>
              This method can be used while
              recording a display sequence, to insert a timed wait in the sequence
              (without any immediate effect). It can also be used dynamically while
              playing a pre-recorded sequence, to suspend or resume the execution of
              the sequence. To cancel a delay, call the same method with a zero delay.
            </para>
            </summary>
            <param name="delay_ms">
              the duration to wait, in milliseconds
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.stopSequence">
            <summary>
              Stops immediately any ongoing sequence replay.
            <para>
              The display is left as is.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.upload(System.String,System.Byte[])">
            <summary>
              Uploads an arbitrary file (for instance a GIF file) to the display, to the
              specified full path name.
            <para>
              If a file already exists with the same path name,
              its content is overwritten.
            </para>
            </summary>
            <param name="pathname">
              path and name of the new file to create
            </param>
            <param name="content">
              binary buffer with the content to set
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.copyLayerContent(System.Int32,System.Int32)">
            <summary>
              Copies the whole content of a layer to another layer.
            <para>
              The color and transparency
              of all the pixels from the destination layer are set to match the source pixels.
              This method only affects the displayed content, but does not change any
              property of the layer object.
              Note that layer 0 has no transparency support (it is always completely opaque).
            </para>
            </summary>
            <param name="srcLayerId">
              the identifier of the source layer (a number in range 0..layerCount-1)
            </param>
            <param name="dstLayerId">
              the identifier of the destination layer (a number in range 0..layerCount-1)
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.swapLayerContent(System.Int32,System.Int32)">
            <summary>
              Swaps the whole content of two layers.
            <para>
              The color and transparency of all the pixels from
              the two layers are swapped. This method only affects the displayed content, but does
              not change any property of the layer objects. In particular, the visibility of each
              layer stays unchanged. When used between one hidden layer and a visible layer,
              this method makes it possible to easily implement double-buffering.
              Note that layer 0 has no transparency support (it is always completely opaque).
            </para>
            </summary>
            <param name="layerIdA">
              the first layer (a number in range 0..layerCount-1)
            </param>
            <param name="layerIdB">
              the second layer (a number in range 0..layerCount-1)
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayProxy.get_displayLayer(System.Int32)">
            <summary>
              Returns a YDisplayLayer object that can be used to draw on the specified
              layer.
            <para>
              The content is displayed only when the layer is active on the
              screen (and not masked by other overlapping layers).
            </para>
            </summary>
            <param name="layerId">
              the identifier of the layer (a number in range 0..layerCount-1)
            </param>
            <returns>
              an <c>YDisplayLayer</c> object
            </returns>
            <para>
              On failure, throws an exception or returns <c>null</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YDualPowerProxy">
            <summary>
              The <c>YDualPower</c> class allows you to control
              the power source to use for module functions that require high current.
            <para>
              The module can also automatically disconnect the external power
              when a voltage drop is observed on the external power source
              (external battery running out of power).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YDualPowerProxy.FindDualPower(System.String)">
            <summary>
              Retrieves a dual power switch for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the dual power switch is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YDualPower.isOnline()</c> to test if the dual power switch is
              indeed online at a given time. In case of ambiguity when looking for
              a dual power switch by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the dual power switch, for instance
              <c>SERVORC1.dualPower</c>.
            </param>
            <returns>
              a <c>YDualPower</c> object allowing you to drive the dual power switch.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDualPowerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type DualPower available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YDualPower.FindDualPower</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDualPowerProxy.get_powerState">
            <summary>
              Returns the current power source for module functions that require lots of current.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDualPower.POWERSTATE_OFF</c>, <c>YDualPower.POWERSTATE_FROM_USB</c> and
              <c>YDualPower.POWERSTATE_FROM_EXT</c> corresponding to the current power source for module
              functions that require lots of current
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDualPower.POWERSTATE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDualPowerProxy.PowerState">
            <value>Current power source for module functions that require lots of current.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDualPowerProxy.get_powerControl">
            <summary>
              Returns the selected power source for module functions that require lots of current.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YDualPower.POWERCONTROL_AUTO</c>, <c>YDualPower.POWERCONTROL_FROM_USB</c>,
              <c>YDualPower.POWERCONTROL_FROM_EXT</c> and <c>YDualPower.POWERCONTROL_OFF</c> corresponding to the
              selected power source for module functions that require lots of current
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDualPower.POWERCONTROL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDualPowerProxy.set_powerControl(System.Int32)">
            <summary>
              Changes the selected power source for module functions that require lots of current.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YDualPower.POWERCONTROL_AUTO</c>, <c>YDualPower.POWERCONTROL_FROM_USB</c>,
              <c>YDualPower.POWERCONTROL_FROM_EXT</c> and <c>YDualPower.POWERCONTROL_OFF</c> corresponding to the
              selected power source for module functions that require lots of current
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YDualPowerProxy.PowerControl">
            <value>Selected power source for module functions that require lots of current.</value>
        </member>
        <member name="M:YoctoProxyAPI.YDualPowerProxy.get_extVoltage">
            <summary>
              Returns the measured voltage on the external power source, in millivolts.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measured voltage on the external power source, in millivolts
            </returns>
            <para>
              On failure, throws an exception or returns <c>YDualPower.EXTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YFilesProxy">
            <summary>
              The YFiles class is used to access the filesystem embedded on
              some Yoctopuce devices.
            <para>
              This filesystem makes it
              possible for instance to design a custom web UI
              (for networked devices) or to add fonts (on display devices).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.FindFiles(System.String)">
            <summary>
              Retrieves a filesystem for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the filesystem is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YFiles.isOnline()</c> to test if the filesystem is
              indeed online at a given time. In case of ambiguity when looking for
              a filesystem by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the filesystem, for instance
              <c>YRGBLED2.files</c>.
            </param>
            <returns>
              a <c>YFiles</c> object allowing you to drive the filesystem.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Files available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YFiles.FindFiles</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.get_filesCount">
            <summary>
              Returns the number of files currently loaded in the filesystem.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of files currently loaded in the filesystem
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFiles.FILESCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YFilesProxy.FilesCount">
            <value>Number of files currently loaded in the filesystem.</value>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.get_freeSpace">
            <summary>
              Returns the free space for uploading new files to the filesystem, in bytes.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the free space for uploading new files to the filesystem, in bytes
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFiles.FREESPACE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.format_fs">
            <summary>
              Reinitialize the filesystem to its clean, unfragmented, empty state.
            <para>
              All files previously uploaded are permanently lost.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.get_list(System.String)">
            <summary>
              Returns a list of YFileRecord objects that describe files currently loaded
              in the filesystem.
            <para>
            </para>
            </summary>
            <param name="pattern">
              an optional filter pattern, using star and question marks
              as wild cards. When an empty pattern is provided, all file records
              are returned.
            </param>
            <returns>
              a list of <c>YFileRecord</c> objects, containing the file path
              and name, byte size and 32-bit CRC of the file content.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.fileExist(System.String)">
            <summary>
              Test if a file exist on the filesystem of the module.
            <para>
            </para>
            </summary>
            <param name="filename">
              the file name to test.
            </param>
            <returns>
              a true if the file exist, false otherwise.
            </returns>
            <para>
              On failure, throws an exception.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.download(System.String)">
            <summary>
              Downloads the requested file and returns a binary buffer with its content.
            <para>
            </para>
            </summary>
            <param name="pathname">
              path and name of the file to download
            </param>
            <returns>
              a binary buffer with the file content
            </returns>
            <para>
              On failure, throws an exception or returns an empty content.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.upload(System.String,System.Byte[])">
            <summary>
              Uploads a file to the filesystem, to the specified full path name.
            <para>
              If a file already exists with the same path name, its content is overwritten.
            </para>
            </summary>
            <param name="pathname">
              path and name of the new file to create
            </param>
            <param name="content">
              binary buffer with the content to set
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFilesProxy.remove(System.String)">
            <summary>
              Deletes a file, given by its full path name, from the filesystem.
            <para>
              Because of filesystem fragmentation, deleting a file may not always
              free up the whole space used by the file. However, rewriting a file
              with the same path name will always reuse any space not freed previously.
              If you need to ensure that no space is taken by previously deleted files,
              you can use <c>format_fs</c> to fully reinitialize the filesystem.
            </para>
            </summary>
            <param name="pathname">
              path and name of the file to remove.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YGenericSensorProxy">
            <summary>
              The <c>YGenericSensor</c> class allows you to read and configure Yoctopuce signal
              transducers.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, to access the autonomous datalogger.
              This class adds the ability to configure the automatic conversion between the
              measured signal and the corresponding engineering unit.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.FindGenericSensor(System.String)">
            <summary>
              Retrieves a generic sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the generic sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGenericSensor.isOnline()</c> to test if the generic sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a generic sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the generic sensor, for instance
              <c>RX010V01.genericSensor1</c>.
            </param>
            <returns>
              a <c>YGenericSensor</c> object allowing you to drive the generic sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type GenericSensor available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YGenericSensor.FindGenericSensor</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured value.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured value
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.get_signalValue">
            <summary>
              Returns the current value of the electrical signal measured by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of the electrical signal measured by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.get_signalUnit">
            <summary>
              Returns the measuring unit of the electrical signal used by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the measuring unit of the electrical signal used by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALUNIT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGenericSensorProxy.SignalUnit">
            <value>Measuring unit of the electrical signal used by the sensor.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.get_signalRange">
            <summary>
              Returns the input signal range used by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the input signal range used by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALRANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.set_signalRange(System.String)">
            <summary>
              Changes the input signal range used by the sensor.
            <para>
              When the input signal gets out of the planned range, the output value
              will be set to an arbitrary large value, whose sign indicates the direction
              of the range overrun.
            </para>
            <para>
              For a 4-20mA sensor, the default input signal range is "4...20".
              For a 0-10V sensor, the default input signal range is "0.1...10".
              For numeric communication interfaces, the default input signal range is
              "-999999.999...999999.999".
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the input signal range used by the sensor
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGenericSensorProxy.SignalRange">
            <value>Input signal range used by the sensor.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.get_valueRange">
            <summary>
              Returns the physical value range measured by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the physical value range measured by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.VALUERANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.set_valueRange(System.String)">
            <summary>
              Changes the output value range, corresponding to the physical value measured
              by the sensor.
            <para>
              The default output value range is the same as the input signal
              range (1:1 mapping), but you can change it so that the function automatically
              computes the physical value encoded by the input signal. Be aware that, as a
              side effect, the range modification may automatically modify the display resolution.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the output value range, corresponding to the physical value measured
              by the sensor
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGenericSensorProxy.ValueRange">
            <value>Physical value range measured by the sensor.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.set_signalBias(System.Double)">
            <summary>
              Changes the electric signal bias for zero shift adjustment.
            <para>
              If your electric signal reads positive when it should be zero, setup
              a positive signalBias of the same value to fix the zero shift.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the electric signal bias for zero shift adjustment
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.get_signalBias">
            <summary>
              Returns the electric signal bias for zero shift adjustment.
            <para>
              A positive bias means that the signal is over-reporting the measure,
              while a negative bias means that the signal is under-reporting the measure.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the electric signal bias for zero shift adjustment
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALBIAS_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGenericSensorProxy.SignalBias">
            <value>Electric signal bias for zero shift adjustment.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.get_signalSampling">
            <summary>
              Returns the electric signal sampling method to use.
            <para>
              The <c>HIGH_RATE</c> method uses the highest sampling frequency, without any filtering.
              The <c>HIGH_RATE_FILTERED</c> method adds a windowed 7-sample median filter.
              The <c>LOW_NOISE</c> method uses a reduced acquisition frequency to reduce noise.
              The <c>LOW_NOISE_FILTERED</c> method combines a reduced frequency with the median filter
              to get measures as stable as possible when working on a noisy signal.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE_FILTERED</c>, <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE_FILTERED</c> and <c>YGenericSensor.SIGNALSAMPLING_HIGHEST_RATE</c>
              corresponding to the electric signal sampling method to use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.SIGNALSAMPLING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.set_signalSampling(System.Int32)">
            <summary>
              Changes the electric signal sampling method to use.
            <para>
              The <c>HIGH_RATE</c> method uses the highest sampling frequency, without any filtering.
              The <c>HIGH_RATE_FILTERED</c> method adds a windowed 7-sample median filter.
              The <c>LOW_NOISE</c> method uses a reduced acquisition frequency to reduce noise.
              The <c>LOW_NOISE_FILTERED</c> method combines a reduced frequency with the median filter
              to get measures as stable as possible when working on a noisy signal.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_HIGH_RATE_FILTERED</c>, <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE</c>,
              <c>YGenericSensor.SIGNALSAMPLING_LOW_NOISE_FILTERED</c> and <c>YGenericSensor.SIGNALSAMPLING_HIGHEST_RATE</c>
              corresponding to the electric signal sampling method to use
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGenericSensorProxy.SignalSampling">
            <value>Electric signal sampling method to use.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.get_enabled">
            <summary>
              Returns the activation state of this input.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YGenericSensor.ENABLED_FALSE</c> or <c>YGenericSensor.ENABLED_TRUE</c>, according to the
              activation state of this input
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGenericSensor.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.set_enabled(System.Int32)">
            <summary>
              Changes the activation state of this input.
            <para>
              When an input is disabled,
              its value is no more updated. On some devices, disabling an input can
              improve the refresh rate of the other active inputs.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YGenericSensor.ENABLED_FALSE</c> or <c>YGenericSensor.ENABLED_TRUE</c>, according to the
              activation state of this input
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGenericSensorProxy.Enabled">
            <value>Activation state of this input.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGenericSensorProxy.zeroAdjust">
            <summary>
              Adjusts the signal bias so that the current signal value is need
              precisely as zero.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YGpsProxy">
            <summary>
              The <c>YGps</c> class allows you to retrieve positioning
              data from a GPS/GNSS sensor.
            <para>
              This class can provides
              complete positioning information. However, if you
              wish to define callbacks on position changes or record
              the position in the datalogger, you
              should use the <c>YLatitude</c> et <c>YLongitude</c> classes.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.FindGps(System.String)">
            <summary>
              Retrieves a geolocalization module for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the geolocalization module is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGps.isOnline()</c> to test if the geolocalization module is
              indeed online at a given time. In case of ambiguity when looking for
              a geolocalization module by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the geolocalization module, for instance
              <c>YGNSSMK2.gps</c>.
            </param>
            <returns>
              a <c>YGps</c> object allowing you to drive the geolocalization module.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Gps available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YGps.FindGps</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_isFixed">
            <summary>
              Returns TRUE if the receiver has found enough satellites to work.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YGps.ISFIXED_FALSE</c> or <c>YGps.ISFIXED_TRUE</c>, according to TRUE if the receiver has
              found enough satellites to work
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.ISFIXED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_satCount">
            <summary>
              Returns the total count of satellites used to compute GPS position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total count of satellites used to compute GPS position
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.SATCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGpsProxy.SatCount">
            <value>Total count of satellites used to compute GPS position.</value>
        </member>
        <member name="P:YoctoProxyAPI.YGpsProxy.IsFixed">
            <value>True if the receiver has found enough satellites to work.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_satPerConst">
            <summary>
              Returns the count of visible satellites per constellation encoded
              on a 32 bit integer: bits 0..
            <para>
              5: GPS satellites count,  bits 6..11 : Glonass, bits 12..17 : Galileo.
              this value is refreshed every 5 seconds only.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the count of visible satellites per constellation encoded
              on a 32 bit integer: bits 0.
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.SATPERCONST_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_gpsRefreshRate">
            <summary>
              Returns effective GPS data refresh frequency.
            <para>
              this value is refreshed every 5 seconds only.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to effective GPS data refresh frequency
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.GPSREFRESHRATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_coordSystem">
            <summary>
              Returns the representation system used for positioning data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YGps.COORDSYSTEM_GPS_DMS</c>, <c>YGps.COORDSYSTEM_GPS_DM</c> and
              <c>YGps.COORDSYSTEM_GPS_D</c> corresponding to the representation system used for positioning data
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.COORDSYSTEM_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.set_coordSystem(System.Int32)">
            <summary>
              Changes the representation system used for positioning data.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YGps.COORDSYSTEM_GPS_DMS</c>, <c>YGps.COORDSYSTEM_GPS_DM</c> and
              <c>YGps.COORDSYSTEM_GPS_D</c> corresponding to the representation system used for positioning data
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGpsProxy.CoordSystem">
            <value>Representation system used for positioning data.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_constellation">
            <summary>
              Returns the the satellites constellation used to compute
              positioning data.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YGps.CONSTELLATION_GNSS</c>, <c>YGps.CONSTELLATION_GPS</c>,
              <c>YGps.CONSTELLATION_GLONASS</c>, <c>YGps.CONSTELLATION_GALILEO</c>,
              <c>YGps.CONSTELLATION_GPS_GLONASS</c>, <c>YGps.CONSTELLATION_GPS_GALILEO</c> and
              <c>YGps.CONSTELLATION_GLONASS_GALILEO</c> corresponding to the the satellites constellation used to compute
              positioning data
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.CONSTELLATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.set_constellation(System.Int32)">
            <summary>
              Changes the satellites constellation used to compute
              positioning data.
            <para>
              Possible  constellations are GNSS ( = all supported constellations),
              GPS, Glonass, Galileo , and the 3 possible pairs. This setting has  no effect on Yocto-GPS (V1).
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YGps.CONSTELLATION_GNSS</c>, <c>YGps.CONSTELLATION_GPS</c>,
              <c>YGps.CONSTELLATION_GLONASS</c>, <c>YGps.CONSTELLATION_GALILEO</c>,
              <c>YGps.CONSTELLATION_GPS_GLONASS</c>, <c>YGps.CONSTELLATION_GPS_GALILEO</c> and
              <c>YGps.CONSTELLATION_GLONASS_GALILEO</c> corresponding to the satellites constellation used to compute
              positioning data
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_latitude">
            <summary>
              Returns the current latitude.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current latitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.LATITUDE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_longitude">
            <summary>
              Returns the current longitude.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current longitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.LONGITUDE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_dilution">
            <summary>
              Returns the current horizontal dilution of precision,
              the smaller that number is, the better .
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current horizontal dilution of precision,
              the smaller that number is, the better
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.DILUTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_altitude">
            <summary>
              Returns the current altitude.
            <para>
              Beware:  GPS technology
              is very inaccurate regarding altitude.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current altitude
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.ALTITUDE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_groundSpeed">
            <summary>
              Returns the current ground speed in Km/h.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current ground speed in Km/h
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.GROUNDSPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_direction">
            <summary>
              Returns the current move bearing in degrees, zero
              is the true (geographic) north.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current move bearing in degrees, zero
              is the true (geographic) north
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.DIRECTION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_unixTime">
            <summary>
              Returns the current time in Unix format (number of
              seconds elapsed since Jan 1st, 1970).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current time in Unix format (number of
              seconds elapsed since Jan 1st, 1970)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.UNIXTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_dateTime">
            <summary>
              Returns the current time in the form "YYYY/MM/DD hh:mm:ss".
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current time in the form "YYYY/MM/DD hh:mm:ss"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.DATETIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.get_utcOffset">
            <summary>
              Returns the number of seconds between current time and UTC time (time zone).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGps.UTCOFFSET_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGpsProxy.set_utcOffset(System.Int32)">
            <summary>
              Changes the number of seconds between current time and UTC time (time zone).
            <para>
              The timezone is automatically rounded to the nearest multiple of 15 minutes.
              If current UTC time is known, the current time is automatically be updated according to the selected time zone.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGpsProxy.UtcOffset">
            <value>Number of seconds between current time and UTC time (time zone).</value>
        </member>
        <member name="T:YoctoProxyAPI.YGroundSpeedProxy">
            <summary>
              The <c>YGroundSpeed</c> class allows you to read and configure Yoctopuce ground speed sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YGroundSpeedProxy.FindGroundSpeed(System.String)">
            <summary>
              Retrieves a ground speed sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the ground speed sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGroundSpeed.isOnline()</c> to test if the ground speed sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a ground speed sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the ground speed sensor, for instance
              <c>YGNSSMK2.groundSpeed</c>.
            </param>
            <returns>
              a <c>YGroundSpeed</c> object allowing you to drive the ground speed sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGroundSpeedProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type GroundSpeed available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YGroundSpeed.FindGroundSpeed</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YGyroProxy">
            <summary>
              The <c>YGyro</c> class allows you to read and configure Yoctopuce gyroscopes.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the possibility to access x, y and z components of the rotation
              vector separately, as well as the possibility to deal with quaternion-based
              orientation estimates.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.FindGyro(System.String)">
            <summary>
              Retrieves a gyroscope for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the gyroscope is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YGyro.isOnline()</c> to test if the gyroscope is
              indeed online at a given time. In case of ambiguity when looking for
              a gyroscope by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the gyroscope, for instance
              <c>Y3DMK002.gyro</c>.
            </param>
            <returns>
              a <c>YGyro</c> object allowing you to drive the gyroscope.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Gyro available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YGyro.FindGyro</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YGyroProxy.Bandwidth">
            <value>Measure update frequency, measured in Hz.</value>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_xValue">
            <summary>
              Returns the angular velocity around the X axis of the device, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the angular velocity around the X axis of the device, as a
              floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.XVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_yValue">
            <summary>
              Returns the angular velocity around the Y axis of the device, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the angular velocity around the Y axis of the device, as a
              floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.YVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_zValue">
            <summary>
              Returns the angular velocity around the Z axis of the device, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the angular velocity around the Z axis of the device, as a
              floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YGyro.ZVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_roll">
            <summary>
              Returns the estimated roll angle, based on the integration of
              gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The axis corresponding to the roll angle can be mapped to any
              of the device X, Y or Z physical directions using methods of
              the class <c>YRefFrame</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to roll angle
              in degrees, between -180 and +180.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_pitch">
            <summary>
              Returns the estimated pitch angle, based on the integration of
              gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The axis corresponding to the pitch angle can be mapped to any
              of the device X, Y or Z physical directions using methods of
              the class <c>YRefFrame</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to pitch angle
              in degrees, between -90 and +90.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_heading">
            <summary>
              Returns the estimated heading angle, based on the integration of
              gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The axis corresponding to the heading can be mapped to any
              of the device X, Y or Z physical directions using methods of
              the class <c>YRefFrame</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to heading
              in degrees, between 0 and 360.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_quaternionW">
            <summary>
              Returns the <c>w</c> component (real part) of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>w</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_quaternionX">
            <summary>
              Returns the <c>x</c> component of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The <c>x</c> component is
              mostly correlated with rotations on the roll axis.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>x</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_quaternionY">
            <summary>
              Returns the <c>y</c> component of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The <c>y</c> component is
              mostly correlated with rotations on the pitch axis.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>y</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YGyroProxy.get_quaternionZ">
            <summary>
              Returns the <c>x</c> component of the quaternion
              describing the device estimated orientation, based on the
              integration of gyroscopic measures combined with acceleration and
              magnetic field measurements.
            <para>
              The <c>x</c> component is
              mostly correlated with changes of heading.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating-point number corresponding to the <c>z</c>
              component of the quaternion.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YHubPortProxy">
            <summary>
              The <c>YHubPort</c> class provides control over the power supply for slave ports
              on a YoctoHub.
            <para>
              It provide information about the device connected to it.
              The logical name of a YHubPort is always automatically set to the
              unique serial number of the Yoctopuce device connected to it.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YHubPortProxy.FindHubPort(System.String)">
            <summary>
              Retrieves a YoctoHub slave port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the YoctoHub slave port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YHubPort.isOnline()</c> to test if the YoctoHub slave port is
              indeed online at a given time. In case of ambiguity when looking for
              a YoctoHub slave port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the YoctoHub slave port, for instance
              <c>YHUBETH1.hubPort1</c>.
            </param>
            <returns>
              a <c>YHubPort</c> object allowing you to drive the YoctoHub slave port.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YHubPortProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type HubPort available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YHubPort.FindHubPort</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YHubPortProxy.get_enabled">
            <summary>
              Returns true if the YoctoHub port is powered, false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YHubPort.ENABLED_FALSE</c> or <c>YHubPort.ENABLED_TRUE</c>, according to true if the
              YoctoHub port is powered, false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHubPort.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YHubPortProxy.set_enabled(System.Int32)">
            <summary>
              Changes the activation of the YoctoHub port.
            <para>
              If the port is enabled, the
              connected module is powered. Otherwise, port power is shut down.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YHubPort.ENABLED_FALSE</c> or <c>YHubPort.ENABLED_TRUE</c>, according to the activation
              of the YoctoHub port
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YHubPortProxy.get_portState">
            <summary>
              Returns the current state of the YoctoHub port.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YHubPort.PORTSTATE_OFF</c>, <c>YHubPort.PORTSTATE_OVRLD</c>,
              <c>YHubPort.PORTSTATE_ON</c>, <c>YHubPort.PORTSTATE_RUN</c> and <c>YHubPort.PORTSTATE_PROG</c>
              corresponding to the current state of the YoctoHub port
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHubPort.PORTSTATE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YHubPortProxy.PortState">
            <value>Current state of the YoctoHub port.</value>
        </member>
        <member name="P:YoctoProxyAPI.YHubPortProxy.Enabled">
            <value>True if the port output is enabled.</value>
        </member>
        <member name="M:YoctoProxyAPI.YHubPortProxy.get_baudRate">
            <summary>
              Returns the current baud rate used by this YoctoHub port, in kbps.
            <para>
              The default value is 1000 kbps, but a slower rate may be used if communication
              problems are encountered.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current baud rate used by this YoctoHub port, in kbps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHubPort.BAUDRATE_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YHumidityProxy">
            <summary>
              The <c>YHumidity</c> class allows you to read and configure Yoctopuce humidity sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YHumidityProxy.FindHumidity(System.String)">
            <summary>
              Retrieves a humidity sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the humidity sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YHumidity.isOnline()</c> to test if the humidity sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a humidity sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the humidity sensor, for instance
              <c>YCO2MK02.humidity</c>.
            </param>
            <returns>
              a <c>YHumidity</c> object allowing you to drive the humidity sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YHumidityProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Humidity available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YHumidity.FindHumidity</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YHumidityProxy.set_unit(System.String)">
            <summary>
              Changes the primary unit for measuring humidity.
            <para>
              That unit is a string.
              If that strings starts with the letter 'g', the primary measured value is the absolute
              humidity, in g/m3. Otherwise, the primary measured value will be the relative humidity
              (RH), in per cents.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification
              must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the primary unit for measuring humidity
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YHumidityProxy.get_relHum">
            <summary>
              Returns the current relative humidity, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current relative humidity, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHumidity.RELHUM_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YHumidityProxy.get_absHum">
            <summary>
              Returns the current absolute humidity, in grams per cubic meter of air.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current absolute humidity, in grams per cubic meter of air
            </returns>
            <para>
              On failure, throws an exception or returns <c>YHumidity.ABSHUM_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YI2cPortProxy">
            <summary>
              The <c>YI2cPort</c> classe allows you to fully drive a Yoctopuce I2C port.
            <para>
              It can be used to send and receive data, and to configure communication
              parameters (baud rate, etc).
              Note that Yoctopuce I2C ports are not exposed as virtual COM ports.
              They are meant to be used in the same way as all Yoctopuce devices.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.FindI2cPort(System.String)">
            <summary>
              Retrieves an I2C port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the I2C port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YI2cPort.isOnline()</c> to test if the I2C port is
              indeed online at a given time. In case of ambiguity when looking for
              an I2C port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the I2C port, for instance
              <c>YI2CMK01.i2cPort</c>.
            </param>
            <returns>
              a <c>YI2cPort</c> object allowing you to drive the I2C port.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type I2cPort available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YI2cPort.FindI2cPort</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_rxCount">
            <summary>
              Returns the total number of bytes received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.RXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_txCount">
            <summary>
              Returns the total number of bytes transmitted since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes transmitted since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.TXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_errCount">
            <summary>
              Returns the total number of communication errors detected since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of communication errors detected since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.ERRCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_rxMsgCount">
            <summary>
              Returns the total number of messages received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.RXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_txMsgCount">
            <summary>
              Returns the total number of messages send since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages send since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.TXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_lastMsg">
            <summary>
              Returns the latest message fully received (for Line and Frame protocols).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest message fully received (for Line and Frame protocols)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.LASTMSG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_currentJob">
            <summary>
              Returns the name of the job file currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the job file currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.CURRENTJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.set_currentJob(System.String)">
            <summary>
              Selects a job file to run immediately.
            <para>
              If an empty string is
              given as argument, stops running current job file.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_startupJob">
            <summary>
              Returns the job file to use when the device is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the job file to use when the device is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.STARTUPJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.set_startupJob(System.String)">
            <summary>
              Changes the job to use when the device is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the job to use when the device is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YI2cPortProxy.StartupJob">
            <value>Job file to use when the device is powered on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_jobMaxTask">
            <summary>
              Returns the maximum number of tasks in a job that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of tasks in a job that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.JOBMAXTASK_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YI2cPortProxy.JobMaxTask">
            <value>Maximum number of tasks in a job that the device can handle.</value>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_jobMaxSize">
            <summary>
              Returns maximum size allowed for job files.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to maximum size allowed for job files
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.JOBMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YI2cPortProxy.JobMaxSize">
            <value>Maximum size allowed for job files.</value>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_protocol">
            <summary>
              Returns the type of protocol used to send I2C messages, as a string.
            <para>
              Possible values are
              "Line" for messages separated by LF or
              "Char" for continuous stream of codes.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used to send I2C messages, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.PROTOCOL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.set_protocol(System.String)">
            <summary>
              Changes the type of protocol used to send I2C messages.
            <para>
              Possible values are
              "Line" for messages separated by LF or
              "Char" for continuous stream of codes.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each message sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used to send I2C messages
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YI2cPortProxy.Protocol">
            <value>Type of protocol used to send I2C messages, as a string.</value>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_i2cVoltageLevel">
            <summary>
              Returns the voltage level used on the I2C bus.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YI2cPort.I2CVOLTAGELEVEL_OFF</c>, <c>YI2cPort.I2CVOLTAGELEVEL_3V3</c> and
              <c>YI2cPort.I2CVOLTAGELEVEL_1V8</c> corresponding to the voltage level used on the I2C bus
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.I2CVOLTAGELEVEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.set_i2cVoltageLevel(System.Int32)">
            <summary>
              Changes the voltage level used on the I2C bus.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YI2cPort.I2CVOLTAGELEVEL_OFF</c>, <c>YI2cPort.I2CVOLTAGELEVEL_3V3</c> and
              <c>YI2cPort.I2CVOLTAGELEVEL_1V8</c> corresponding to the voltage level used on the I2C bus
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YI2cPortProxy.I2cVoltageLevel">
            <value>Voltage level used on the I2C bus.</value>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.get_i2cMode">
            <summary>
              Returns the I2C port communication parameters, as a string such as
              "400kbps,2000ms,NoRestart".
            <para>
              The string includes the baud rate, the
              recovery delay after communications errors, and if needed the option
              <c>NoRestart</c> to use a Stop/Start sequence instead of the
              Restart state when performing read on the I2C bus.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the I2C port communication parameters, as a string such as
              "400kbps,2000ms,NoRestart"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YI2cPort.I2CMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.set_i2cMode(System.String)">
            <summary>
              Changes the I2C port communication parameters, with a string such as
              "400kbps,2000ms".
            <para>
              The string includes the baud rate, the
              recovery delay after communications errors, and if needed the option
              <c>NoRestart</c> to use a Stop/Start sequence instead of the
              Restart state when performing read on the I2C bus.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the I2C port communication parameters, with a string such as
              "400kbps,2000ms"
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YI2cPortProxy.I2cMode">
            <value>I2C port communication parameters, as a string such as</value>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.readLine">
            <summary>
              Reads a single line (or message) from the receive buffer, starting at current stream position.
            <para>
              This function is intended to be used when the serial port is configured for a message protocol,
              such as 'Line' mode or frame protocols.
            </para>
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              the function returns the oldest available line and moves the stream position just after.
              If no new full line is received, the function returns an empty line.
            </para>
            </summary>
            <returns>
              a string with a single line of text
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.readMessages(System.String,System.Int32)">
            <summary>
              Searches for incoming messages in the serial port receive buffer matching a given pattern,
              starting at current position.
            <para>
              This function will only compare and return printable characters
              in the message strings. Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              The search returns all messages matching the expression provided as argument in the buffer.
              If no matching message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="pattern">
              a limited regular expression describing the expected message format,
              or an empty string if all messages should be returned (no filtering).
              When using binary protocols, the format applies to the hexadecimal
              representation of the message.
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of strings containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.read_seek(System.Int32)">
            <summary>
              Changes the current internal stream position to the specified value.
            <para>
              This function
              does not affect the device, it only changes the value stored in the API object
              for the next read operations.
            </para>
            </summary>
            <param name="absPos">
              the absolute position index for next read operations.
            </param>
            <returns>
              nothing.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.read_tell">
            <summary>
              Returns the current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the absolute position index for next read operations.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.read_avail">
            <summary>
              Returns the number of bytes available to read in the input buffer starting from the
              current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the number of bytes available to read
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.queryLine(System.String,System.Int32)">
            <summary>
              Sends a text line query to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for 'Line' protocol.
            </para>
            </summary>
            <param name="query">
              the line query to send (without CR/LF)
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next text line received after sending the text query, as a string.
              Additional lines can be obtained by calling readLine or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.queryHex(System.String,System.Int32)">
            <summary>
              Sends a binary message to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for
              Frame-based protocol.
            </para>
            </summary>
            <param name="hexString">
              the message to send, coded in hexadecimal
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next frame received after sending the message, as a hex string.
              Additional frames can be obtained by calling readHex or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.uploadJob(System.String,System.String)">
            <summary>
              Saves the job definition string (JSON data) into a job file.
            <para>
              The job file can be later enabled using <c>selectJob()</c>.
            </para>
            </summary>
            <param name="jobfile">
              name of the job file to save on the device filesystem
            </param>
            <param name="jsonDef">
              a string containing a JSON definition of the job
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.selectJob(System.String)">
            <summary>
              Load and start processing the specified job file.
            <para>
              The file must have
              been previously created using the user interface or uploaded on the
              device filesystem using the <c>uploadJob()</c> function.
            </para>
            <para>
            </para>
            </summary>
            <param name="jobfile">
              name of the job file (on the device filesystem)
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.reset">
            <summary>
              Clears the serial port buffer and resets counters to zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.i2cSendBin(System.Int32,System.Byte[])">
            <summary>
              Sends a one-way message (provided as a a binary buffer) to a device on the I2C bus.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="buff">
              the binary buffer to be sent
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.i2cSendArray(System.Int32,System.Int32[])">
            <summary>
              Sends a one-way message (provided as a list of integer) to a device on the I2C bus.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="values">
              a list of data bytes to be sent
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.i2cSendAndReceiveBin(System.Int32,System.Byte[],System.Int32)">
            <summary>
              Sends a one-way message (provided as a a binary buffer) to a device on the I2C bus,
              then read back the specified number of bytes from device.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="buff">
              the binary buffer to be sent
            </param>
            <param name="rcvCount">
              the number of bytes to receive once the data bytes are sent
            </param>
            <returns>
              a list of bytes with the data received from slave device.
            </returns>
            <para>
              On failure, throws an exception or returns an empty binary buffer.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.i2cSendAndReceiveArray(System.Int32,System.Int32[],System.Int32)">
            <summary>
              Sends a one-way message (provided as a list of integer) to a device on the I2C bus,
              then read back the specified number of bytes from device.
            <para>
              This function checks and reports communication errors on the I2C bus.
            </para>
            </summary>
            <param name="slaveAddr">
              the 7-bit address of the slave device (without the direction bit)
            </param>
            <param name="values">
              a list of data bytes to be sent
            </param>
            <param name="rcvCount">
              the number of bytes to receive once the data bytes are sent
            </param>
            <returns>
              a list of bytes with the data received from slave device.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.writeStr(System.String)">
            <summary>
              Sends a text-encoded I2C code stream to the I2C bus, as is.
            <para>
              An I2C code stream is a string made of hexadecimal data bytes,
              but that may also include the I2C state transitions code:
              "{S}" to emit a start condition,
              "{R}" for a repeated start condition,
              "{P}" for a stop condition,
              "xx" for receiving a data byte,
              "{A}" to ack a data byte received and
              "{N}" to nack a data byte received.
              If a newline ("\n") is included in the stream, the message
              will be terminated and a newline will also be added to the
              receive stream.
            </para>
            </summary>
            <param name="codes">
              the code stream to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.writeLine(System.String)">
            <summary>
              Sends a text-encoded I2C code stream to the I2C bus, and terminate
              the message en relâchant le bus.
            <para>
              An I2C code stream is a string made of hexadecimal data bytes,
              but that may also include the I2C state transitions code:
              "{S}" to emit a start condition,
              "{R}" for a repeated start condition,
              "{P}" for a stop condition,
              "xx" for receiving a data byte,
              "{A}" to ack a data byte received and
              "{N}" to nack a data byte received.
              At the end of the stream, a stop condition is added if missing
              and a newline is added to the receive buffer as well.
            </para>
            </summary>
            <param name="codes">
              the code stream to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.writeByte(System.Int32)">
            <summary>
              Sends a single byte to the I2C bus.
            <para>
              Depending on the I2C bus state, the byte
              will be interpreted as an address byte or a data byte.
            </para>
            </summary>
            <param name="code">
              the byte to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.writeHex(System.String)">
            <summary>
              Sends a byte sequence (provided as a hexadecimal string) to the I2C bus.
            <para>
              Depending on the I2C bus state, the first byte will be interpreted as an
              address byte or a data byte.
            </para>
            </summary>
            <param name="hexString">
              a string of hexadecimal byte codes
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.writeBin(System.Byte[])">
            <summary>
              Sends a binary buffer to the I2C bus, as is.
            <para>
              Depending on the I2C bus state, the first byte will be interpreted
              as an address byte or a data byte.
            </para>
            </summary>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.writeArray(System.Int32[])">
            <summary>
              Sends a byte sequence (provided as a list of bytes) to the I2C bus.
            <para>
              Depending on the I2C bus state, the first byte will be interpreted as an
              address byte or a data byte.
            </para>
            </summary>
            <param name="byteList">
              a list of byte codes
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YI2cPortProxy.snoopMessages(System.Int32)">
            <summary>
              Retrieves messages (both direction) in the I2C port buffer, starting at current position.
            <para>
            </para>
            <para>
              If no message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of <c>YI2cSnoopingRecord</c> objects containing the messages found, if any.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YLatitudeProxy">
            <summary>
              The <c>YLatitude</c> class allows you to read and configure Yoctopuce latitude sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YLatitudeProxy.FindLatitude(System.String)">
            <summary>
              Retrieves a latitude sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the latitude sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLatitude.isOnline()</c> to test if the latitude sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a latitude sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the latitude sensor, for instance
              <c>YGNSSMK2.latitude</c>.
            </param>
            <returns>
              a <c>YLatitude</c> object allowing you to drive the latitude sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YLatitudeProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Latitude available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YLatitude.FindLatitude</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YLedProxy">
            <summary>
              The <c>YLed</c> class allows you to drive a monocolor LED.
            <para>
              You can not only to drive the intensity of the LED, but also to
              have it blink at various preset frequencies.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.FindLed(System.String)">
            <summary>
              Retrieves a monochrome LED for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the monochrome LED is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLed.isOnline()</c> to test if the monochrome LED is
              indeed online at a given time. In case of ambiguity when looking for
              a monochrome LED by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the monochrome LED, for instance
              <c>YBUZZER2.led1</c>.
            </param>
            <returns>
              a <c>YLed</c> object allowing you to drive the monochrome LED.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Led available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YLed.FindLed</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.get_power">
            <summary>
              Returns the current LED state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YLed.POWER_OFF</c> or <c>YLed.POWER_ON</c>, according to the current LED state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLed.POWER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.set_power(System.Int32)">
            <summary>
              Changes the state of the LED.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YLed.POWER_OFF</c> or <c>YLed.POWER_ON</c>, according to the state of the LED
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.get_luminosity">
            <summary>
              Returns the current LED intensity (in per cent).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current LED intensity (in per cent)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLed.LUMINOSITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.set_luminosity(System.Int32)">
            <summary>
              Changes the current LED intensity (in per cent).
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current LED intensity (in per cent)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YLedProxy.Luminosity">
            <value>Current LED intensity (in per cent).</value>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.get_blinking">
            <summary>
              Returns the current LED signaling mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YLed.BLINKING_STILL</c>, <c>YLed.BLINKING_RELAX</c>, <c>YLed.BLINKING_AWARE</c>,
              <c>YLed.BLINKING_RUN</c>, <c>YLed.BLINKING_CALL</c> and <c>YLed.BLINKING_PANIC</c> corresponding to
              the current LED signaling mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLed.BLINKING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YLedProxy.set_blinking(System.Int32)">
            <summary>
              Changes the current LED signaling mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YLed.BLINKING_STILL</c>, <c>YLed.BLINKING_RELAX</c>, <c>YLed.BLINKING_AWARE</c>,
              <c>YLed.BLINKING_RUN</c>, <c>YLed.BLINKING_CALL</c> and <c>YLed.BLINKING_PANIC</c> corresponding to
              the current LED signaling mode
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YLedProxy.Blinking">
            <value>Current LED signaling mode.</value>
        </member>
        <member name="P:YoctoProxyAPI.YLedProxy.Power">
            <value>Current LED state.</value>
        </member>
        <member name="T:YoctoProxyAPI.YLightSensorProxy">
            <summary>
              The <c>YLightSensor</c> class allows you to read and configure Yoctopuce light sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to easily perform a one-point linear calibration
              to compensate the effect of a glass or filter placed in front of the sensor.
              For some light sensors with several working modes, this class can select the
              desired working mode.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YLightSensorProxy.FindLightSensor(System.String)">
            <summary>
              Retrieves a light sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the light sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLightSensor.isOnline()</c> to test if the light sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a light sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the light sensor, for instance
              <c>LIGHTMK3.lightSensor</c>.
            </param>
            <returns>
              a <c>YLightSensor</c> object allowing you to drive the light sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YLightSensorProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type LightSensor available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YLightSensor.FindLightSensor</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YLightSensorProxy.calibrate(System.Double)">
            <summary>
              Changes the sensor-specific calibration parameter so that the current value
              matches a desired target (linear scaling).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="calibratedVal">
              the desired target value.
            </param>
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YLightSensorProxy.get_measureType">
            <summary>
              Returns the type of light measure.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YLightSensor.MEASURETYPE_HUMAN_EYE</c>, <c>YLightSensor.MEASURETYPE_WIDE_SPECTRUM</c>,
              <c>YLightSensor.MEASURETYPE_INFRARED</c>, <c>YLightSensor.MEASURETYPE_HIGH_RATE</c>,
              <c>YLightSensor.MEASURETYPE_HIGH_ENERGY</c> and <c>YLightSensor.MEASURETYPE_HIGH_RESOLUTION</c>
              corresponding to the type of light measure
            </returns>
            <para>
              On failure, throws an exception or returns <c>YLightSensor.MEASURETYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YLightSensorProxy.set_measureType(System.Int32)">
            <summary>
              Changes the light sensor type used in the device.
            <para>
              The measure can either
              approximate the response of the human eye, focus on a specific light
              spectrum, depending on the capabilities of the light-sensitive cell.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YLightSensor.MEASURETYPE_HUMAN_EYE</c>, <c>YLightSensor.MEASURETYPE_WIDE_SPECTRUM</c>,
              <c>YLightSensor.MEASURETYPE_INFRARED</c>, <c>YLightSensor.MEASURETYPE_HIGH_RATE</c>,
              <c>YLightSensor.MEASURETYPE_HIGH_ENERGY</c> and <c>YLightSensor.MEASURETYPE_HIGH_RESOLUTION</c>
              corresponding to the light sensor type used in the device
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YLightSensorProxy.MeasureType">
            <value>Type of light measure.</value>
        </member>
        <member name="T:YoctoProxyAPI.YLongitudeProxy">
            <summary>
              The <c>YLongitude</c> class allows you to read and configure Yoctopuce longitude sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YLongitudeProxy.FindLongitude(System.String)">
            <summary>
              Retrieves a longitude sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the longitude sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YLongitude.isOnline()</c> to test if the longitude sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a longitude sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the longitude sensor, for instance
              <c>YGNSSMK2.longitude</c>.
            </param>
            <returns>
              a <c>YLongitude</c> object allowing you to drive the longitude sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YLongitudeProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Longitude available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YLongitude.FindLongitude</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YMagnetometerProxy">
            <summary>
              The <c>YSensor</c> class is the parent class for all Yoctopuce sensor types.
            <para>
              It can be
              used to read the current value and unit of any sensor, read the min/max
              value, configure autonomous recording frequency and access recorded data.
              It also provide a function to register a callback invoked each time the
              observed value changes, or at a predefined interval. Using this class rather
              than a specific subclass makes it possible to create generic applications
              that work with any Yoctopuce sensor, even those that do not yet exist.
              Note: The <c>YAnButton</c> class is the only analog input which does not inherit
              from <c>YSensor</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMagnetometerProxy.FindMagnetometer(System.String)">
            <summary>
              Retrieves a magnetometer for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the magnetometer is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMagnetometer.isOnline()</c> to test if the magnetometer is
              indeed online at a given time. In case of ambiguity when looking for
              a magnetometer by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the magnetometer, for instance
              <c>Y3DMK002.magnetometer</c>.
            </param>
            <returns>
              a <c>YMagnetometer</c> object allowing you to drive the magnetometer.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMagnetometerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Magnetometer available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YMagnetometer.FindMagnetometer</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMagnetometerProxy.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMagnetometerProxy.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMagnetometerProxy.Bandwidth">
            <value>Measure update frequency, measured in Hz.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMagnetometerProxy.get_xValue">
            <summary>
              Returns the X component of the magnetic field, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the X component of the magnetic field, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.XVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMagnetometerProxy.get_yValue">
            <summary>
              Returns the Y component of the magnetic field, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Y component of the magnetic field, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.YVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMagnetometerProxy.get_zValue">
            <summary>
              Returns the Z component of the magnetic field, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the Z component of the magnetic field, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMagnetometer.ZVALUE_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YMessageBoxProxy">
            <summary>
              The <c>YMessageBox</c> class provides SMS sending and receiving capability for
              GSM-enabled Yoctopuce devices.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.FindMessageBox(System.String)">
            <summary>
              Retrieves a SMS message box interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the SMS message box interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMessageBox.isOnline()</c> to test if the SMS message box interface is
              indeed online at a given time. In case of ambiguity when looking for
              a SMS message box interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the SMS message box interface, for instance
              <c>YHUBGSM1.messageBox</c>.
            </param>
            <returns>
              a <c>YMessageBox</c> object allowing you to drive the SMS message box interface.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type MessageBox available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YMessageBox.FindMessageBox</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.get_slotsInUse">
            <summary>
              Returns the number of message storage slots currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of message storage slots currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.SLOTSINUSE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMessageBoxProxy.SlotsInUse">
            <value>Number of message storage slots currently in use.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.get_slotsCount">
            <summary>
              Returns the total number of message storage slots on the SIM card.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of message storage slots on the SIM card
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.SLOTSCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.get_pduSent">
            <summary>
              Returns the number of SMS units sent so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of SMS units sent so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.PDUSENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.set_pduSent(System.Int32)">
            <summary>
              Changes the value of the outgoing SMS units counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the outgoing SMS units counter
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.get_pduReceived">
            <summary>
              Returns the number of SMS units received so far.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of SMS units received so far
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMessageBox.PDURECEIVED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.set_pduReceived(System.Int32)">
            <summary>
              Changes the value of the incoming SMS units counter.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the incoming SMS units counter
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.clearPduCounters">
            <summary>
              Clear the SMS units counters.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.sendTextMessage(System.String,System.String)">
            <summary>
              Sends a regular text SMS, with standard parameters.
            <para>
              This function can send messages
              of more than 160 characters, using SMS concatenation. ISO-latin accented characters
              are supported. For sending messages with special unicode characters such as asian
              characters and emoticons, use <c>newMessage</c> to create a new message and define
              the content of using methods <c>addText</c> and <c>addUnicodeData</c>.
            </para>
            </summary>
            <param name="recipient">
              a text string with the recipient phone number, either as a
              national number, or in international format starting with a plus sign
            </param>
            <param name="message">
              the text to be sent in the message
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.sendFlashMessage(System.String,System.String)">
            <summary>
              Sends a Flash SMS (class 0 message).
            <para>
              Flash messages are displayed on the handset
              immediately and are usually not saved on the SIM card. This function can send messages
              of more than 160 characters, using SMS concatenation. ISO-latin accented characters
              are supported. For sending messages with special unicode characters such as asian
              characters and emoticons, use <c>newMessage</c> to create a new message and define
              the content of using methods <c>addText</c> et <c>addUnicodeData</c>.
            </para>
            </summary>
            <param name="recipient">
              a text string with the recipient phone number, either as a
              national number, or in international format starting with a plus sign
            </param>
            <param name="message">
              the text to be sent in the message
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.newMessage(System.String)">
            <summary>
              Creates a new empty SMS message, to be configured and sent later on.
            <para>
            </para>
            </summary>
            <param name="recipient">
              a text string with the recipient phone number, either as a
              national number, or in international format starting with a plus sign
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMessageBoxProxy.get_messages">
            <summary>
              Returns the list of messages received and not deleted.
            <para>
              This function
              will automatically decode concatenated SMS.
            </para>
            </summary>
            <returns>
              an YSms object list.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YMotorProxy">
            <summary>
              The <c>YMotor</c> class allows you to drive a DC motor.
            <para>
              It can be used to configure the
              power sent to the motor to make it turn both ways, but also to drive accelerations
              and decelerations. The motor will then accelerate automatically: you will not
              have to monitor it. The API also allows to slow down the motor by shortening
              its terminals: the motor will then act as an electromagnetic brake.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.FindMotor(System.String)">
            <summary>
              Retrieves a motor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the motor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMotor.isOnline()</c> to test if the motor is
              indeed online at a given time. In case of ambiguity when looking for
              a motor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the motor, for instance
              <c>MOTORCTL.motor</c>.
            </param>
            <returns>
              a <c>YMotor</c> object allowing you to drive the motor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Motor available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YMotor.FindMotor</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_motorStatus">
            <summary>
              Return the controller state.
            <para>
              Possible states are:
              IDLE   when the motor is stopped/in free wheel, ready to start;
              FORWD  when the controller is driving the motor forward;
              BACKWD when the controller is driving the motor backward;
              BRAKE  when the controller is braking;
              LOVOLT when the controller has detected a low voltage condition;
              HICURR when the controller has detected an over current condition;
              HIHEAT when the controller has detected an overheat condition;
              FAILSF when the controller switched on the failsafe security.
            </para>
            <para>
              When an error condition occurred (LOVOLT, HICURR, HIHEAT, FAILSF), the controller
              status must be explicitly reset using the <c>resetStatus</c> function.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YMotor.MOTORSTATUS_IDLE</c>, <c>YMotor.MOTORSTATUS_BRAKE</c>,
              <c>YMotor.MOTORSTATUS_FORWD</c>, <c>YMotor.MOTORSTATUS_BACKWD</c>,
              <c>YMotor.MOTORSTATUS_LOVOLT</c>, <c>YMotor.MOTORSTATUS_HICURR</c>,
              <c>YMotor.MOTORSTATUS_HIHEAT</c> and <c>YMotor.MOTORSTATUS_FAILSF</c>
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.MOTORSTATUS_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMotorProxy.MotorStatus">
            <value>Return the controller state. Possible states are:</value>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.set_drivingForce(System.Double)">
            <summary>
              Changes immediately the power sent to the motor.
            <para>
              The value is a percentage between -100%
              to 100%. If you want go easy on your mechanics and avoid excessive current consumption,
              try to avoid brutal power changes. For example, immediate transition from forward full power
              to reverse full power is a very bad idea. Each time the driving power is modified, the
              braking power is set to zero.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to immediately the power sent to the motor
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_drivingForce">
            <summary>
              Returns the power sent to the motor, as a percentage between -100% and +100%.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the power sent to the motor, as a percentage between -100% and +100%
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.DRIVINGFORCE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.set_brakingForce(System.Double)">
            <summary>
              Changes immediately the braking force applied to the motor (in percents).
            <para>
              The value 0 corresponds to no braking (free wheel). When the braking force
              is changed, the driving power is set to zero. The value is a percentage.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to immediately the braking force applied to the motor (in percents)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_brakingForce">
            <summary>
              Returns the braking force applied to the motor, as a percentage.
            <para>
              The value 0 corresponds to no braking (free wheel).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the braking force applied to the motor, as a percentage
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.BRAKINGFORCE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.set_cutOffVoltage(System.Double)">
            <summary>
              Changes the threshold voltage under which the controller automatically switches to error state
              and prevents further current draw.
            <para>
              This setting prevent damage to a battery that can
              occur when drawing current from an "empty" battery.
              Note that whatever the cutoff threshold, the controller switches to undervoltage
              error state if the power supply goes under 3V, even for a very brief time.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the threshold voltage under which the controller
              automatically switches to error state
              and prevents further current draw
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_cutOffVoltage">
            <summary>
              Returns the threshold voltage under which the controller automatically switches to error state
              and prevents further current draw.
            <para>
              This setting prevents damage to a battery that can
              occur when drawing current from an "empty" battery.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the threshold voltage under which the controller
              automatically switches to error state
              and prevents further current draw
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.CUTOFFVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMotorProxy.CutOffVoltage">
            <value>Threshold voltage under which the controller automatically switches to error state</value>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_overCurrentLimit">
            <summary>
              Returns the current threshold (in mA) above which the controller automatically
              switches to error state.
            <para>
              A zero value means that there is no limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current threshold (in mA) above which the controller automatically
              switches to error state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.OVERCURRENTLIMIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.set_overCurrentLimit(System.Int32)">
            <summary>
              Changes the current threshold (in mA) above which the controller automatically
              switches to error state.
            <para>
              A zero value means that there is no limit. Note that whatever the
              current limit is, the controller switches to OVERCURRENT status if the current
              goes above 32A, even for a very brief time. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current threshold (in mA) above which the controller automatically
              switches to error state
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMotorProxy.OverCurrentLimit">
            <value>Current threshold (in mA) above which the controller automatically</value>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.set_frequency(System.Double)">
            <summary>
              Changes the PWM frequency used to control the motor.
            <para>
              Low frequency is usually
              more efficient and may help the motor to start, but an audible noise might be
              generated. A higher frequency reduces the noise, but more energy is converted
              into heat. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM frequency used to control the motor
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_frequency">
            <summary>
              Returns the PWM frequency used to control the motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM frequency used to control the motor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMotorProxy.Frequency">
            <value>PWM frequency used to control the motor.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_starterTime">
            <summary>
              Returns the duration (in ms) during which the motor is driven at low frequency to help
              it start up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the duration (in ms) during which the motor is driven at low frequency to help
              it start up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.STARTERTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.set_starterTime(System.Int32)">
            <summary>
              Changes the duration (in ms) during which the motor is driven at low frequency to help
              it start up.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the duration (in ms) during which the motor is driven at low frequency to help
              it start up
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMotorProxy.StarterTime">
            <value>Duration (in ms) during which the motor is driven at low frequency to help</value>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.get_failSafeTimeout">
            <summary>
              Returns the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process.
            <para>
              When this delay has elapsed,
              the controller automatically stops the motor and switches to FAILSAFE error.
              Failsafe security is disabled when the value is zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMotor.FAILSAFETIMEOUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.set_failSafeTimeout(System.Int32)">
            <summary>
              Changes the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process.
            <para>
              When this delay has elapsed,
              the controller automatically stops the motor and switches to FAILSAFE error.
              Failsafe security is disabled when the value is zero.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the delay in milliseconds allowed for the controller to run autonomously without
              receiving any instruction from the control process
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMotorProxy.FailSafeTimeout">
            <value>Delay in milliseconds allowed for the controller to run autonomously without</value>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.keepALive">
            <summary>
              Rearms the controller failsafe timer.
            <para>
              When the motor is running and the failsafe feature
              is active, this function should be called periodically to prove that the control process
              is running properly. Otherwise, the motor is automatically stopped after the specified
              timeout. Calling a motor <i>set</i> function implicitly rearms the failsafe timer.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.resetStatus">
            <summary>
              Reset the controller state to IDLE.
            <para>
              This function must be invoked explicitly
              after any error condition is signaled.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.drivingForceMove(System.Double,System.Int32)">
            <summary>
              Changes progressively the power sent to the motor for a specific duration.
            <para>
            </para>
            </summary>
            <param name="targetPower">
              desired motor power, in percents (between -100% and +100%)
            </param>
            <param name="delay">
              duration (in ms) of the transition
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMotorProxy.brakingForceMove(System.Double,System.Int32)">
            <summary>
              Changes progressively the braking force applied to the motor for a specific duration.
            <para>
            </para>
            </summary>
            <param name="targetPower">
              desired braking force, in percents
            </param>
            <param name="delay">
              duration (in ms) of the transition
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YMultiAxisControllerProxy">
            <summary>
              The <c>YMultiAxisController</c> class allows you to drive multiple stepper motors
              synchronously.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.FindMultiAxisController(System.String)">
            <summary>
              Retrieves a multi-axis controller for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the multi-axis controller is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMultiAxisController.isOnline()</c> to test if the multi-axis controller is
              indeed online at a given time. In case of ambiguity when looking for
              a multi-axis controller by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the multi-axis controller, for instance
              <c>MyDevice.multiAxisController</c>.
            </param>
            <returns>
              a <c>YMultiAxisController</c> object allowing you to drive the multi-axis controller.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type MultiAxisController available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YMultiAxisController.FindMultiAxisController</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.get_nAxis">
            <summary>
              Returns the number of synchronized controllers.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of synchronized controllers
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiAxisController.NAXIS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.set_nAxis(System.Int32)">
            <summary>
              Changes the number of synchronized controllers.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of synchronized controllers
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.get_globalState">
            <summary>
              Returns the stepper motor set overall state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YMultiAxisController.GLOBALSTATE_ABSENT</c>,
              <c>YMultiAxisController.GLOBALSTATE_ALERT</c>, <c>YMultiAxisController.GLOBALSTATE_HI_Z</c>,
              <c>YMultiAxisController.GLOBALSTATE_STOP</c>, <c>YMultiAxisController.GLOBALSTATE_RUN</c> and
              <c>YMultiAxisController.GLOBALSTATE_BATCH</c> corresponding to the stepper motor set overall state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiAxisController.GLOBALSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.reset">
            <summary>
              Reinitialize all controllers and clear all alert flags.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.findHomePosition(System.Double[])">
            <summary>
              Starts all motors backward at the specified speeds, to search for the motor home position.
            <para>
            </para>
            </summary>
            <param name="speed">
              desired speed for all axis, in steps per second.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.moveTo(System.Double[])">
            <summary>
              Starts all motors synchronously to reach a given absolute position.
            <para>
              The time needed to reach the requested position will depend on the lowest
              acceleration and max speed parameters configured for all motors.
              The final position will be reached on all axis at the same time.
            </para>
            </summary>
            <param name="absPos">
              absolute position, measured in steps from each origin.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.moveRel(System.Double[])">
            <summary>
              Starts all motors synchronously to reach a given relative position.
            <para>
              The time needed to reach the requested position will depend on the lowest
              acceleration and max speed parameters configured for all motors.
              The final position will be reached on all axis at the same time.
            </para>
            </summary>
            <param name="relPos">
              relative position, measured in steps from the current position.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.pause(System.Int32)">
            <summary>
              Keep the motor in the same state for the specified amount of time, before processing next command.
            <para>
            </para>
            </summary>
            <param name="waitMs">
              wait time, specified in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.emergencyStop">
            <summary>
              Stops the motor with an emergency alert, without taking any additional precaution.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.abortAndBrake">
            <summary>
              Stops the motor smoothly as soon as possible, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiAxisControllerProxy.abortAndHiZ">
            <summary>
              Turn the controller into Hi-Z mode immediately, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YMultiCellWeighScaleProxy">
            <summary>
              The <c>YMultiCellWeighScale</c> class provides a weight measurement from a set of ratiometric
              sensors.
            <para>
              It can be used to control the bridge excitation parameters, in order to avoid
              measure shifts caused by temperature variation in the electronics, and can also
              automatically apply an additional correction factor based on temperature to
              compensate for offsets in the load cells themselves.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.FindMultiCellWeighScale(System.String)">
            <summary>
              Retrieves a multi-cell weighing scale sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the multi-cell weighing scale sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMultiCellWeighScale.isOnline()</c> to test if the multi-cell weighing scale sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a multi-cell weighing scale sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the multi-cell weighing scale sensor, for instance
              <c>YWMBRDG1.multiCellWeighScale</c>.
            </param>
            <returns>
              a <c>YMultiCellWeighScale</c> object allowing you to drive the multi-cell weighing scale sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type MultiCellWeighScale available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YMultiCellWeighScale.FindMultiCellWeighScale</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the weight.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the weight
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_cellCount">
            <summary>
              Returns the number of load cells in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of load cells in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.CELLCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.set_cellCount(System.Int32)">
            <summary>
              Changes the number of load cells in use.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of load cells in use
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMultiCellWeighScaleProxy.CellCount">
            <value>Number of load cells in use.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_externalSense">
            <summary>
              Returns true if entry 4 is used as external sense for 6-wires load cells.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YMultiCellWeighScale.EXTERNALSENSE_FALSE</c> or <c>YMultiCellWeighScale.EXTERNALSENSE_TRUE</c>,
              according to true if entry 4 is used as external sense for 6-wires load cells
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.EXTERNALSENSE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.set_externalSense(System.Int32)">
            <summary>
              Changes the configuration to tell if entry 4 is used as external sense for
              6-wires load cells.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the
              module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YMultiCellWeighScale.EXTERNALSENSE_FALSE</c> or <c>YMultiCellWeighScale.EXTERNALSENSE_TRUE</c>,
              according to the configuration to tell if entry 4 is used as external sense for
              6-wires load cells
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMultiCellWeighScaleProxy.ExternalSense">
            <value>True if entry 4 is used as external sense for 6-wires load cells.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_excitation">
            <summary>
              Returns the current load cell bridge excitation method.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YMultiCellWeighScale.EXCITATION_OFF</c>, <c>YMultiCellWeighScale.EXCITATION_DC</c>
              and <c>YMultiCellWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.EXCITATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.set_excitation(System.Int32)">
            <summary>
              Changes the current load cell bridge excitation method.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YMultiCellWeighScale.EXCITATION_OFF</c>, <c>YMultiCellWeighScale.EXCITATION_DC</c>
              and <c>YMultiCellWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMultiCellWeighScaleProxy.Excitation">
            <value>Current load cell bridge excitation method.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.set_tempAvgAdaptRatio(System.Double)">
            <summary>
              Changes the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_tempAvgAdaptRatio">
            <summary>
              Returns the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.TEMPAVGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMultiCellWeighScaleProxy.TempAvgAdaptRatio">
            <value>Averaged temperature update rate, in per mille.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.set_tempChgAdaptRatio(System.Double)">
            <summary>
              Changes the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the temperature change update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_tempChgAdaptRatio">
            <summary>
              Returns the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the temperature change update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.TEMPCHGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMultiCellWeighScaleProxy.TempChgAdaptRatio">
            <value>Temperature change update rate, in per mille.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_compTempAvg">
            <summary>
              Returns the current averaged temperature, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current averaged temperature, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.COMPTEMPAVG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_compTempChg">
            <summary>
              Returns the current temperature variation, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current temperature variation, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.COMPTEMPCHG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_compensation">
            <summary>
              Returns the current current thermal compensation value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current current thermal compensation value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.COMPENSATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.set_zeroTracking(System.Double)">
            <summary>
              Changes the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the zero tracking threshold value
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.get_zeroTracking">
            <summary>
              Returns the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the zero tracking threshold value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiCellWeighScale.ZEROTRACKING_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMultiCellWeighScaleProxy.ZeroTracking">
            <value>Zero tracking threshold value. When this threshold is larger than</value>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.tare">
            <summary>
              Adapts the load cell signal bias (stored in the corresponding genericSensor)
              so that the current signal corresponds to a zero weight.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiCellWeighScaleProxy.setupSpan(System.Double,System.Double)">
            <summary>
              Configures the load cells span parameters (stored in the corresponding genericSensors)
              so that the current signal corresponds to the specified reference weight.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="currWeight">
              reference weight presently on the load cell.
            </param>
            <param name="maxWeight">
              maximum weight to be expected on the load cell.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YMultiSensControllerProxy">
            <summary>
              The <c>YMultiSensController</c> class allows you to setup a customized
              sensor chain on devices featuring that functionality.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.FindMultiSensController(System.String)">
            <summary>
              Retrieves a multi-sensor controller for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the multi-sensor controller is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YMultiSensController.isOnline()</c> to test if the multi-sensor controller is
              indeed online at a given time. In case of ambiguity when looking for
              a multi-sensor controller by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the multi-sensor controller, for instance
              <c>YTEMPIR1.multiSensController</c>.
            </param>
            <returns>
              a <c>YMultiSensController</c> object allowing you to drive the multi-sensor controller.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type MultiSensController available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YMultiSensController.FindMultiSensController</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.get_nSensors">
            <summary>
              Returns the number of sensors to poll.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of sensors to poll
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiSensController.NSENSORS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.set_nSensors(System.Int32)">
            <summary>
              Changes the number of sensors to poll.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the
              modification must be kept. It is recommended to restart the
              device with  <c>module->reboot()</c> after modifying
              (and saving) this settings
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of sensors to poll
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YMultiSensControllerProxy.NSensors">
            <value>Number of sensors to poll.</value>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.get_maxSensors">
            <summary>
              Returns the maximum configurable sensor count allowed on this device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum configurable sensor count allowed on this device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiSensController.MAXSENSORS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.get_maintenanceMode">
            <summary>
              Returns true when the device is in maintenance mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YMultiSensController.MAINTENANCEMODE_FALSE</c> or <c>YMultiSensController.MAINTENANCEMODE_TRUE</c>,
              according to true when the device is in maintenance mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YMultiSensController.MAINTENANCEMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.set_maintenanceMode(System.Int32)">
            <summary>
              Changes the device mode to enable maintenance and to stop sensor polling.
            <para>
              This way, the device does not automatically restart when it cannot
              communicate with one of the sensors.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YMultiSensController.MAINTENANCEMODE_FALSE</c> or <c>YMultiSensController.MAINTENANCEMODE_TRUE</c>,
              according to the device mode to enable maintenance and to stop sensor polling
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YMultiSensControllerProxy.setupAddress(System.Int32)">
            <summary>
              Configures the I2C address of the only sensor connected to the device.
            <para>
              It is recommended to put the the device in maintenance mode before
              changing sensor addresses.  This method is only intended to work with a single
              sensor connected to the device, if several sensors are connected, the result
              is unpredictable.
              Note that the device is probably expecting to find a string of sensors with specific
              addresses. Check the device documentation to find out which addresses should be used.
            </para>
            </summary>
            <param name="addr">
              new address of the connected sensor
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YNetworkProxy">
            <c>YNetwork</c> objects provide access to TCP/IP parameters of Yoctopuce
            devices that include a built-in network interface.
            <para>
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.FindNetwork(System.String)">
            <summary>
              Retrieves a network interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the network interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YNetwork.isOnline()</c> to test if the network interface is
              indeed online at a given time. In case of ambiguity when looking for
              a network interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the network interface, for instance
              <c>YHUBETH1.network</c>.
            </param>
            <returns>
              a <c>YNetwork</c> object allowing you to drive the network interface.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Network available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YNetwork.FindNetwork</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_readiness">
            <summary>
              Returns the current established working mode of the network interface.
            <para>
              Level zero (DOWN_0) means that no hardware link has been detected. Either there is no signal
              on the network cable, or the selected wireless access point cannot be detected.
              Level 1 (LIVE_1) is reached when the network is detected, but is not yet connected.
              For a wireless network, this shows that the requested SSID is present.
              Level 2 (LINK_2) is reached when the hardware connection is established.
              For a wired network connection, level 2 means that the cable is attached at both ends.
              For a connection to a wireless access point, it shows that the security parameters
              are properly configured. For an ad-hoc wireless connection, it means that there is
              at least one other device connected on the ad-hoc network.
              Level 3 (DHCP_3) is reached when an IP address has been obtained using DHCP.
              Level 4 (DNS_4) is reached when the DNS server is reachable on the network.
              Level 5 (WWW_5) is reached when global connectivity is demonstrated by properly loading the
              current time from an NTP server.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YNetwork.READINESS_DOWN</c>, <c>YNetwork.READINESS_EXISTS</c>,
              <c>YNetwork.READINESS_LINKED</c>, <c>YNetwork.READINESS_LAN_OK</c> and
              <c>YNetwork.READINESS_WWW_OK</c> corresponding to the current established working mode of the network interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.READINESS_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.Readiness">
            <value>Current established working mode of the network interface.</value>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.IpAddress">
            <value>IP address currently in use by the device.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_macAddress">
            <summary>
              Returns the MAC address of the network interface.
            <para>
              The MAC address is also available on a sticker
              on the module, in both numeric and barcode forms.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the MAC address of the network interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.MACADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.MacAddress">
            <value>MAC address of the network interface. The MAC address is also available on a sticker</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_ipAddress">
            <summary>
              Returns the IP address currently in use by the device.
            <para>
              The address may have been configured
              statically, or provided by a DHCP server.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address currently in use by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.IPADDRESS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_subnetMask">
            <summary>
              Returns the subnet mask currently used by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the subnet mask currently used by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.SUBNETMASK_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_router">
            <summary>
              Returns the IP address of the router on the device subnet (default gateway).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the router on the device subnet (default gateway)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.ROUTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_ipConfig">
            <summary>
              Returns the IP configuration of the network interface.
            <para>
            </para>
            <para>
              If the network interface is setup to use a static IP address, the string starts with "STATIC:" and
              is followed by three
              parameters, separated by "/". The first is the device IP address, followed by the subnet mask
              length, and finally the
              router IP address (default gateway). For instance: "STATIC:192.168.1.14/16/192.168.1.1"
            </para>
            <para>
              If the network interface is configured to receive its IP from a DHCP server, the string start with
              "DHCP:" and is followed by
              three parameters separated by "/". The first is the fallback IP address, then the fallback subnet
              mask length and finally the
              fallback router IP address. These three parameters are used when no DHCP reply is received.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP configuration of the network interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.IPCONFIG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_primaryDNS">
            <summary>
              Returns the IP address of the primary name server to be used by the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the primary name server to be used by the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.PRIMARYDNS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_primaryDNS(System.String)">
            <summary>
              Changes the IP address of the primary name server to be used by the module.
            <para>
              When using DHCP, if a value is specified, it overrides the value received from the DHCP server.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the IP address of the primary name server to be used by the module
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.PrimaryDNS">
            <value>IP address of the primary name server to be used by the module.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_secondaryDNS">
            <summary>
              Returns the IP address of the secondary name server to be used by the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the secondary name server to be used by the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.SECONDARYDNS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_secondaryDNS(System.String)">
            <summary>
              Changes the IP address of the secondary name server to be used by the module.
            <para>
              When using DHCP, if a value is specified, it overrides the value received from the DHCP server.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the IP address of the secondary name server to be used by the module
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.SecondaryDNS">
            <value>IP address of the secondary name server to be used by the module.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_ntpServer">
            <summary>
              Returns the IP address of the NTP server to be used by the device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the IP address of the NTP server to be used by the device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.NTPSERVER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_ntpServer(System.String)">
            <summary>
              Changes the IP address of the NTP server to be used by the module.
            <para>
              Use an empty
              string to restore the factory set  address.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the IP address of the NTP server to be used by the module
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.NtpServer">
            <value>IP address of the NTP server to be used by the device.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_userPassword">
            <summary>
              Returns a hash string if a password has been set for "user" user,
              or an empty string otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a hash string if a password has been set for "user" user,
              or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.USERPASSWORD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_userPassword(System.String)">
            <summary>
              Changes the password for the "user" user.
            <para>
              This password becomes instantly required
              to perform any use of the module. If the specified value is an
              empty string, a password is not required anymore.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the password for the "user" user
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.UserPassword">
            <value>Hash string if a password has been set for "user" user,</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_adminPassword">
            <summary>
              Returns a hash string if a password has been set for user "admin",
              or an empty string otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a hash string if a password has been set for user "admin",
              or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.ADMINPASSWORD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_adminPassword(System.String)">
            <summary>
              Changes the password for the "admin" user.
            <para>
              This password becomes instantly required
              to perform any change of the module state. If the specified value is an
              empty string, a password is not required anymore.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the password for the "admin" user
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.AdminPassword">
            <value>Hash string if a password has been set for user "admin",</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_httpPort">
            <summary>
              Returns the TCP port used to serve the hub web UI.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the TCP port used to serve the hub web UI
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.HTTPPORT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_httpPort(System.Int32)">
            <summary>
              Changes the the TCP port used to serve the hub web UI.
            <para>
              The default value is port 80,
              which is the default for all Web servers. Regardless of the value set here,
              the hub will always reply on port 4444, which is used by default by Yoctopuce
              API library. When you change this parameter, remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the the TCP port used to serve the hub web UI
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.HttpPort">
            <value>TCP port used to serve the hub web UI.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_defaultPage">
            <summary>
              Returns the HTML page to serve for the URL "/"" of the hub.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the HTML page to serve for the URL "/"" of the hub
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.DEFAULTPAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_defaultPage(System.String)">
            <summary>
              Changes the default HTML page returned by the hub.
            <para>
              If not value are set the hub return
              "index.html" which is the web interface of the hub. It is possible to change this page
              for file that has been uploaded on the hub. The maximum filename size is 15 characters.
              When you change this parameter, remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the default HTML page returned by the hub
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.DefaultPage">
            <value>HTML page to serve for the URL "/"" of the hub.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_discoverable">
            <summary>
              Returns the activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YNetwork.DISCOVERABLE_FALSE</c> or <c>YNetwork.DISCOVERABLE_TRUE</c>, according to the
              activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.DISCOVERABLE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_discoverable(System.Int32)">
            <summary>
              Changes the activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol).
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YNetwork.DISCOVERABLE_FALSE</c> or <c>YNetwork.DISCOVERABLE_TRUE</c>, according to the
              activation state of the multicast announce protocols to allow easy
              discovery of the module in the network neighborhood (uPnP/Bonjour protocol)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.Discoverable">
            <value>Activation state of the multicast announce protocols to allow easy</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_wwwWatchdogDelay">
            <summary>
              Returns the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity.
            <para>
              A zero value disables automated reboot
              in case of Internet connectivity loss.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.WWWWATCHDOGDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_wwwWatchdogDelay(System.Int32)">
            <summary>
              Changes the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity.
            <para>
              A zero value disables automated reboot
              in case of Internet connectivity loss. The smallest valid non-zero timeout is
              90 seconds. Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the allowed downtime of the WWW link (in seconds) before triggering an automated
              reboot to try to recover Internet connectivity
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.WwwWatchdogDelay">
            <value>Allowed downtime of the WWW link (in seconds) before triggering an automated</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackUrl">
            <summary>
              Returns the callback URL to notify of significant state changes.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the callback URL to notify of significant state changes
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKURL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackUrl(System.String)">
            <summary>
              Changes the callback URL to notify significant state changes.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the callback URL to notify significant state changes
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackUrl">
            <value>Callback URL to notify of significant state changes.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackMethod">
            <summary>
              Returns the HTTP method used to notify callbacks for significant state changes.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YNetwork.CALLBACKMETHOD_POST</c>, <c>YNetwork.CALLBACKMETHOD_GET</c> and
              <c>YNetwork.CALLBACKMETHOD_PUT</c> corresponding to the HTTP method used to notify callbacks for
              significant state changes
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKMETHOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackMethod(System.Int32)">
            <summary>
              Changes the HTTP method used to notify callbacks for significant state changes.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YNetwork.CALLBACKMETHOD_POST</c>, <c>YNetwork.CALLBACKMETHOD_GET</c> and
              <c>YNetwork.CALLBACKMETHOD_PUT</c> corresponding to the HTTP method used to notify callbacks for
              significant state changes
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackMethod">
            <value>HTTP method used to notify callbacks for significant state changes.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackEncoding">
            <summary>
              Returns the encoding standard to use for representing notification values.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YNetwork.CALLBACKENCODING_FORM</c>, <c>YNetwork.CALLBACKENCODING_JSON</c>,
              <c>YNetwork.CALLBACKENCODING_JSON_ARRAY</c>, <c>YNetwork.CALLBACKENCODING_CSV</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API</c>, <c>YNetwork.CALLBACKENCODING_JSON_NUM</c>,
              <c>YNetwork.CALLBACKENCODING_EMONCMS</c>, <c>YNetwork.CALLBACKENCODING_AZURE</c>,
              <c>YNetwork.CALLBACKENCODING_INFLUXDB</c>, <c>YNetwork.CALLBACKENCODING_MQTT</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API_JZON</c>, <c>YNetwork.CALLBACKENCODING_PRTG</c> and
              <c>YNetwork.CALLBACKENCODING_INFLUXDB_V2</c> corresponding to the encoding standard to use for
              representing notification values
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKENCODING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackEncoding(System.Int32)">
            <summary>
              Changes the encoding standard to use for representing notification values.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YNetwork.CALLBACKENCODING_FORM</c>, <c>YNetwork.CALLBACKENCODING_JSON</c>,
              <c>YNetwork.CALLBACKENCODING_JSON_ARRAY</c>, <c>YNetwork.CALLBACKENCODING_CSV</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API</c>, <c>YNetwork.CALLBACKENCODING_JSON_NUM</c>,
              <c>YNetwork.CALLBACKENCODING_EMONCMS</c>, <c>YNetwork.CALLBACKENCODING_AZURE</c>,
              <c>YNetwork.CALLBACKENCODING_INFLUXDB</c>, <c>YNetwork.CALLBACKENCODING_MQTT</c>,
              <c>YNetwork.CALLBACKENCODING_YOCTO_API_JZON</c>, <c>YNetwork.CALLBACKENCODING_PRTG</c> and
              <c>YNetwork.CALLBACKENCODING_INFLUXDB_V2</c> corresponding to the encoding standard to use for
              representing notification values
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackEncoding">
            <value>Encoding standard to use for representing notification values.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackCredentials">
            <summary>
              Returns a hashed version of the notification callback credentials if set,
              or an empty string otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a hashed version of the notification callback credentials if set,
              or an empty string otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKCREDENTIALS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackCredentials(System.String)">
            <summary>
              Changes the credentials required to connect to the callback address.
            <para>
              The credentials
              must be provided as returned by function <c>get_callbackCredentials</c>,
              in the form <c>username:hash</c>. The method used to compute the hash varies according
              to the the authentication scheme implemented by the callback, For Basic authentication,
              the hash is the MD5 of the string <c>username:password</c>. For Digest authentication,
              the hash is the MD5 of the string <c>username:realm:password</c>. For a simpler
              way to configure callback credentials, use function <c>callbackLogin</c> instead.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the credentials required to connect to the callback address
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackCredentials">
            <value>Hashed version of the notification callback credentials if set,</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.callbackLogin(System.String,System.String)">
            <summary>
              Connects to the notification callback and saves the credentials required to
              log into it.
            <para>
              The password is not stored into the module, only a hashed
              copy of the credentials are saved. Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="username">
              username required to log to the callback
            </param>
            <param name="password">
              password required to log to the callback
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackInitialDelay">
            <summary>
              Returns the initial waiting time before first callback notifications, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the initial waiting time before first callback notifications, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKINITIALDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackInitialDelay(System.Int32)">
            <summary>
              Changes the initial waiting time before first callback notifications, in seconds.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the initial waiting time before first callback notifications, in seconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackInitialDelay">
            <value>Initial waiting time before first callback notifications, in seconds.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackSchedule">
            <summary>
              Returns the HTTP callback schedule strategy, as a text string.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the HTTP callback schedule strategy, as a text string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKSCHEDULE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackSchedule(System.String)">
            <summary>
              Changes the HTTP callback schedule strategy, as a text string.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the HTTP callback schedule strategy, as a text string
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackSchedule">
            <value>HTTP callback schedule strategy, as a text string.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackMinDelay">
            <summary>
              Returns the minimum waiting time between two HTTP callbacks, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimum waiting time between two HTTP callbacks, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKMINDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackMinDelay(System.Int32)">
            <summary>
              Changes the minimum waiting time between two HTTP callbacks, in seconds.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimum waiting time between two HTTP callbacks, in seconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackMinDelay">
            <value>Minimum waiting time between two HTTP callbacks, in seconds.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_callbackMaxDelay">
            <summary>
              Returns the waiting time between two HTTP callbacks when there is nothing new.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the waiting time between two HTTP callbacks when there is nothing new
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.CALLBACKMAXDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_callbackMaxDelay(System.Int32)">
            <summary>
              Changes the waiting time between two HTTP callbacks when there is nothing new.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the waiting time between two HTTP callbacks when there is nothing new
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YNetworkProxy.CallbackMaxDelay">
            <value>Waiting time between two HTTP callbacks when there is nothing new.</value>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.get_poeCurrent">
            <summary>
              Returns the current consumed by the module from Power-over-Ethernet (PoE), in milliamps.
            <para>
              The current consumption is measured after converting PoE source to 5 Volt, and should
              never exceed 1800 mA.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current consumed by the module from Power-over-Ethernet (PoE), in milliamps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YNetwork.POECURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.useDHCP(System.String,System.Int32,System.String)">
            <summary>
              Changes the configuration of the network interface to enable the use of an
              IP address received from a DHCP server.
            <para>
              Until an address is received from a DHCP
              server, the module uses the IP parameters specified to this function.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="fallbackIpAddr">
              fallback IP address, to be used when no DHCP reply is received
            </param>
            <param name="fallbackSubnetMaskLen">
              fallback subnet mask length when no DHCP reply is received, as an
              integer (e.g. 24 means 255.255.255.0)
            </param>
            <param name="fallbackRouter">
              fallback router IP address, to be used when no DHCP reply is received
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.useDHCPauto">
            <summary>
              Changes the configuration of the network interface to enable the use of an
              IP address received from a DHCP server.
            <para>
              Until an address is received from a DHCP
              server, the module uses an IP of the network 169.254.0.0/16 (APIPA).
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.useStaticIP(System.String,System.Int32,System.String)">
            <summary>
              Changes the configuration of the network interface to use a static IP address.
            <para>
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="ipAddress">
              device IP address
            </param>
            <param name="subnetMaskLen">
              subnet mask length, as an integer (e.g. 24 means 255.255.255.0)
            </param>
            <param name="router">
              router IP address (default gateway)
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.ping(System.String)">
            <summary>
              Pings host to test the network connectivity.
            <para>
              Sends four ICMP ECHO_REQUEST requests from the
              module to the target host. This method returns a string with the result of the
              4 ICMP ECHO_REQUEST requests.
            </para>
            </summary>
            <param name="host">
              the hostname or the IP address of the target
            </param>
            <para>
            </para>
            <returns>
              a string with the result of the ping.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.triggerCallback">
            <summary>
              Trigger an HTTP callback quickly.
            <para>
              This function can even be called within
              an HTTP callback, in which case the next callback will be triggered 5 seconds
              after the end of the current callback, regardless if the minimum time between
              callbacks configured in the device.
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YNetworkProxy.set_periodicCallbackSchedule(System.String,System.Int32)">
            <summary>
              Setup periodic HTTP callbacks (simplified function).
            <para>
            </para>
            </summary>
            <param name="interval">
              a string representing the callback periodicity, expressed in
              seconds, minutes or hours, eg. "60s", "5m", "1h", "48h".
            </param>
            <param name="offset">
              an integer representing the time offset relative to the period
              when the callback should occur. For instance, if the periodicity is
              24h, an offset of 7 will make the callback occur each day at 7AM.
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YOsControlProxy">
            <summary>
              The <c>YOScontrol</c> class provides some control over the operating system running a VirtualHub.
            <para>
              YOsControl is available on VirtualHub software only. This feature must be activated at the VirtualHub
              start up with -o option.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YOsControlProxy.FindOsControl(System.String)">
            <summary>
              Retrieves OS control for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the OS control is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YOsControl.isOnline()</c> to test if the OS control is
              indeed online at a given time. In case of ambiguity when looking for
              OS control by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the OS control, for instance
              <c>MyDevice.osControl</c>.
            </param>
            <returns>
              a <c>YOsControl</c> object allowing you to drive the OS control.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YOsControlProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type OsControl available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YOsControl.FindOsControl</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YOsControlProxy.get_shutdownCountdown">
            <summary>
              Returns the remaining number of seconds before the OS shutdown, or zero when no
              shutdown has been scheduled.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the remaining number of seconds before the OS shutdown, or zero when no
              shutdown has been scheduled
            </returns>
            <para>
              On failure, throws an exception or returns <c>YOsControl.SHUTDOWNCOUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YOsControlProxy.shutdown(System.Int32)">
            <summary>
              Schedules an OS shutdown after a given number of seconds.
            <para>
            </para>
            </summary>
            <param name="secBeforeShutDown">
              number of seconds before shutdown
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YPowerProxy">
            <summary>
              The <c>YPower</c> class allows you to read and configure Yoctopuce electrical power sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to access the energy counter and the power factor.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.FindPower(System.String)">
            <summary>
              Retrieves a electrical power sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the electrical power sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPower.isOnline()</c> to test if the electrical power sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a electrical power sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the electrical power sensor, for instance
              <c>YWATTMK1.power</c>.
            </param>
            <returns>
              a <c>YPower</c> object allowing you to drive the electrical power sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Power available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YPower.FindPower</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.get_cosPhi">
            <summary>
              Returns the power factor (the ratio between the real power consumed,
              measured in W, and the apparent power provided, measured in VA).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the power factor (the ratio between the real power consumed,
              measured in W, and the apparent power provided, measured in VA)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.COSPHI_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.get_meter">
            <summary>
              Returns the energy counter, maintained by the wattmeter by integrating the power consumption over time,
              but only when positive.
            <para>
              Note that this counter is reset at each start of the device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the energy counter, maintained by the wattmeter by
              integrating the power consumption over time,
              but only when positive
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.METER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.get_deliveredEnergyMeter">
            <summary>
              Returns the energy counter, maintained by the wattmeter by integrating the power consumption over time,
              but only when positive.
            <para>
              Note that this counter is reset at each start of the device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the energy counter, maintained by the wattmeter by
              integrating the power consumption over time,
              but only when positive
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.DELIVEREDENERGYMETER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.get_receivedEnergyMeter">
            <summary>
              Returns the energy counter, maintained by the wattmeter by integrating the power consumption over time,
              but only when negative.
            <para>
              Note that this counter is reset at each start of the device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the energy counter, maintained by the wattmeter by
              integrating the power consumption over time,
              but only when negative
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.RECEIVEDENERGYMETER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.get_meterTimer">
            <summary>
              Returns the elapsed time since last energy counter reset, in seconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the elapsed time since last energy counter reset, in seconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPower.METERTIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerProxy.reset">
            <summary>
              Resets the energy counters.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YPowerOutputProxy">
            <summary>
              The <c>YPowerOutput</c> class allows you to control
              the power output featured on some Yoctopuce devices.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YPowerOutputProxy.FindPowerOutput(System.String)">
            <summary>
              Retrieves a power output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the power output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPowerOutput.isOnline()</c> to test if the power output is
              indeed online at a given time. In case of ambiguity when looking for
              a power output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the power output, for instance
              <c>YI2CMK01.powerOutput</c>.
            </param>
            <returns>
              a <c>YPowerOutput</c> object allowing you to drive the power output.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPowerOutputProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type PowerOutput available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YPowerOutput.FindPowerOutput</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPowerOutputProxy.get_voltage">
            <summary>
              Returns the voltage on the power output featured by the module.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YPowerOutput.VOLTAGE_OFF</c>, <c>YPowerOutput.VOLTAGE_OUT3V3</c>,
              <c>YPowerOutput.VOLTAGE_OUT5V</c>, <c>YPowerOutput.VOLTAGE_OUT4V7</c> and
              <c>YPowerOutput.VOLTAGE_OUT1V8</c> corresponding to the voltage on the power output featured by the module
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerOutput.VOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerOutputProxy.set_voltage(System.Int32)">
            <summary>
              Changes the voltage on the power output provided by the
              module.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YPowerOutput.VOLTAGE_OFF</c>, <c>YPowerOutput.VOLTAGE_OUT3V3</c>,
              <c>YPowerOutput.VOLTAGE_OUT5V</c>, <c>YPowerOutput.VOLTAGE_OUT4V7</c> and
              <c>YPowerOutput.VOLTAGE_OUT1V8</c> corresponding to the voltage on the power output provided by the
              module
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPowerOutputProxy.Voltage">
            <value>Voltage on the power output featured by the module.</value>
        </member>
        <member name="T:YoctoProxyAPI.YPowerSupplyProxy">
            <summary>
              The <c>YPowerSupply</c> class allows you to drive a Yoctopuce power supply.
            <para>
              It can be use to change the voltage set point,
              the current limit and the enable/disable the output.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.FindPowerSupply(System.String)">
            <summary>
              Retrieves a regulated power supply for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the regulated power supply is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPowerSupply.isOnline()</c> to test if the regulated power supply is
              indeed online at a given time. In case of ambiguity when looking for
              a regulated power supply by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the regulated power supply, for instance
              <c>MyDevice.powerSupply</c>.
            </param>
            <returns>
              a <c>YPowerSupply</c> object allowing you to drive the regulated power supply.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type PowerSupply available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YPowerSupply.FindPowerSupply</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.set_voltageSetPoint(System.Double)">
            <summary>
              Changes the voltage set point, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the voltage set point, in V
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_voltageSetPoint">
            <summary>
              Returns the voltage set point, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the voltage set point, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VOLTAGESETPOINT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.set_currentLimit(System.Double)">
            <summary>
              Changes the current limit, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current limit, in mA
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_currentLimit">
            <summary>
              Returns the current limit, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current limit, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.CURRENTLIMIT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_powerOutput">
            <summary>
              Returns the power supply output switch state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPowerSupply.POWEROUTPUT_OFF</c> or <c>YPowerSupply.POWEROUTPUT_ON</c>, according to the
              power supply output switch state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.POWEROUTPUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.set_powerOutput(System.Int32)">
            <summary>
              Changes the power supply output switch state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPowerSupply.POWEROUTPUT_OFF</c> or <c>YPowerSupply.POWEROUTPUT_ON</c>, according to the
              power supply output switch state
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_voltageSense">
            <summary>
              Returns the output voltage control point.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPowerSupply.VOLTAGESENSE_INT</c> or <c>YPowerSupply.VOLTAGESENSE_EXT</c>, according to
              the output voltage control point
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VOLTAGESENSE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.set_voltageSense(System.Int32)">
            <summary>
              Changes the voltage control point.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPowerSupply.VOLTAGESENSE_INT</c> or <c>YPowerSupply.VOLTAGESENSE_EXT</c>, according to
              the voltage control point
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_measuredVoltage">
            <summary>
              Returns the measured output voltage, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the measured output voltage, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.MEASUREDVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_measuredCurrent">
            <summary>
              Returns the measured output current, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the measured output current, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.MEASUREDCURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_inputVoltage">
            <summary>
              Returns the measured input voltage, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the measured input voltage, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.INPUTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_vInt">
            <summary>
              Returns the internal voltage, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the internal voltage, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VINT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_ldoTemperature">
            <summary>
              Returns the LDO temperature, in Celsius.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the LDO temperature, in Celsius
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.LDOTEMPERATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.set_voltageAtStartUp(System.Double)">
            <summary>
              Changes the voltage set point at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the voltage set point at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_voltageAtStartUp">
            <summary>
              Returns the selected voltage set point at device startup, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the selected voltage set point at device startup, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.VOLTAGEATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPowerSupplyProxy.VoltageAtStartUp">
            <value>Selected voltage set point at device startup, in V.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.set_currentAtStartUp(System.Double)">
            <summary>
              Changes the current limit at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current limit at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.get_currentAtStartUp">
            <summary>
              Returns the selected current limit at device startup, in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the selected current limit at device startup, in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPowerSupply.CURRENTATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPowerSupplyProxy.CurrentAtStartUp">
            <value>Selected current limit at device startup, in mA.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPowerSupplyProxy.voltageMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of output voltage.
            <para>
              Any explicit voltage
              change cancels any ongoing transition process.
            </para>
            </summary>
            <param name="V_target">
              new output voltage value at the end of the transition
              (floating-point number, representing the end voltage in V)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YPressureProxy">
            <summary>
              The <c>YPressure</c> class allows you to read and configure Yoctopuce pressure sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YPressureProxy.FindPressure(System.String)">
            <summary>
              Retrieves a pressure sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the pressure sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPressure.isOnline()</c> to test if the pressure sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a pressure sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the pressure sensor, for instance
              <c>YALTIMK2.pressure</c>.
            </param>
            <returns>
              a <c>YPressure</c> object allowing you to drive the pressure sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPressureProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Pressure available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YPressure.FindPressure</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YProximityProxy">
            <summary>
              The <c>YProximity</c> class allows you to read and configure Yoctopuce proximity sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to setup a detection threshold and to count the
              number of detected state changes.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.FindProximity(System.String)">
            <summary>
              Retrieves a proximity sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the proximity sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YProximity.isOnline()</c> to test if the proximity sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a proximity sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the proximity sensor, for instance
              <c>YPROXIM1.proximity1</c>.
            </param>
            <returns>
              a <c>YProximity</c> object allowing you to drive the proximity sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Proximity available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YProximity.FindProximity</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_signalValue">
            <summary>
              Returns the current value of signal measured by the proximity sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of signal measured by the proximity sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.SIGNALVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_detectionThreshold">
            <summary>
              Returns the threshold used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the threshold used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.DETECTIONTHRESHOLD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.set_detectionThreshold(System.Int32)">
            <summary>
              Changes the threshold used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the threshold used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YProximityProxy.DetectionThreshold">
            <value>Threshold used to determine the logical state of the proximity sensor, when considered</value>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_detectionHysteresis">
            <summary>
              Returns the hysteresis used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the hysteresis used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.DETECTIONHYSTERESIS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.set_detectionHysteresis(System.Int32)">
            <summary>
              Changes the hysteresis used to determine the logical state of the proximity sensor, when considered
              as a binary input (on/off).
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the hysteresis used to determine the logical state of the proximity
              sensor, when considered
              as a binary input (on/off)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YProximityProxy.DetectionHysteresis">
            <value>Hysteresis used to determine the logical state of the proximity sensor, when considered</value>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_presenceMinTime">
            <summary>
              Returns the minimal detection duration before signalling a presence event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimal detection duration before signalling a presence event
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PRESENCEMINTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.set_presenceMinTime(System.Int32)">
            <summary>
              Changes the minimal detection duration before signalling a presence event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimal detection duration before signalling a presence event
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YProximityProxy.PresenceMinTime">
            <value>Minimal detection duration before signalling a presence event. Any shorter detection is</value>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_removalMinTime">
            <summary>
              Returns the minimal detection duration before signalling a removal event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minimal detection duration before signalling a removal event
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.REMOVALMINTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.set_removalMinTime(System.Int32)">
            <summary>
              Changes the minimal detection duration before signalling a removal event.
            <para>
              Any shorter detection is
              considered as noise or bounce (false positive) and filtered out.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minimal detection duration before signalling a removal event
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YProximityProxy.RemovalMinTime">
            <value>Minimal detection duration before signalling a removal event. Any shorter detection is</value>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_isPresent">
            <summary>
              Returns true if the input (considered as binary) is active (detection value is smaller than the specified <c>threshold</c>), and false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YProximity.ISPRESENT_FALSE</c> or <c>YProximity.ISPRESENT_TRUE</c>, according to true if
              the input (considered as binary) is active (detection value is smaller than the specified
              <c>threshold</c>), and false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.ISPRESENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_lastTimeApproached">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from absent to present).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from absent to present)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.LASTTIMEAPPROACHED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_lastTimeRemoved">
            <summary>
              Returns the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from present to absent).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of elapsed milliseconds between the module power on and the last observed
              detection (the input contact transitioned from present to absent)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.LASTTIMEREMOVED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_pulseCounter">
            <summary>
              Returns the pulse counter value.
            <para>
              The value is a 32 bit integer. In case
              of overflow (>=2^32), the counter will wrap. To reset the counter, just
              call the resetCounter() method.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the pulse counter value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PULSECOUNTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_pulseTimer">
            <summary>
              Returns the timer of the pulse counter (ms).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the timer of the pulse counter (ms)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.get_proximityReportMode">
            <summary>
              Returns the parameter (sensor value, presence or pulse count) returned by the get_currentValue function and callbacks.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YProximity.PROXIMITYREPORTMODE_NUMERIC</c>,
              <c>YProximity.PROXIMITYREPORTMODE_PRESENCE</c> and <c>YProximity.PROXIMITYREPORTMODE_PULSECOUNT</c>
              corresponding to the parameter (sensor value, presence or pulse count) returned by the
              get_currentValue function and callbacks
            </returns>
            <para>
              On failure, throws an exception or returns <c>YProximity.PROXIMITYREPORTMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.set_proximityReportMode(System.Int32)">
            <summary>
              Changes the  parameter  type (sensor value, presence or pulse count) returned by the get_currentValue function and callbacks.
            <para>
              The edge count value is limited to the 6 lowest digits. For values greater than one million, use
              get_pulseCounter().
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YProximity.PROXIMITYREPORTMODE_NUMERIC</c>,
              <c>YProximity.PROXIMITYREPORTMODE_PRESENCE</c> and <c>YProximity.PROXIMITYREPORTMODE_PULSECOUNT</c>
              corresponding to the  parameter  type (sensor value, presence or pulse count) returned by the
              get_currentValue function and callbacks
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YProximityProxy.ProximityReportMode">
            <value>Parameter (sensor value, presence or pulse count) returned by the get_currentValue function and callbacks.</value>
        </member>
        <member name="M:YoctoProxyAPI.YProximityProxy.resetCounter">
            <summary>
              Resets the pulse counter value as well as its timer.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YPwmInputProxy">
            <summary>
              The <c>YPwmInput</c> class allows you to read and configure Yoctopuce PWM inputs.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to configure the signal parameter used to transmit
              information: the duty cycle, the frequency or the pulse width.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.FindPwmInput(System.String)">
            <summary>
              Retrieves a PWM input for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the PWM input is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPwmInput.isOnline()</c> to test if the PWM input is
              indeed online at a given time. In case of ambiguity when looking for
              a PWM input by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the PWM input, for instance
              <c>YPWMRX01.pwmInput1</c>.
            </param>
            <returns>
              a <c>YPwmInput</c> object allowing you to drive the PWM input.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type PwmInput available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YPwmInput.FindPwmInput</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured quantity.
            <para>
              That unit
              is just a string which is automatically initialized each time
              the measurement mode is changed. But is can be set to an
              arbitrary value.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured quantity
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_dutyCycle">
            <summary>
              Returns the PWM duty cycle, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM duty cycle, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.DUTYCYCLE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_pulseDuration">
            <summary>
              Returns the PWM pulse length in milliseconds, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM pulse length in milliseconds, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PULSEDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_frequency">
            <summary>
              Returns the PWM frequency in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM frequency in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_period">
            <summary>
              Returns the PWM period in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM period in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_pulseCounter">
            <summary>
              Returns the pulse counter value.
            <para>
              Actually that
              counter is incremented twice per period. That counter is
              limited  to 1 billion.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the pulse counter value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PULSECOUNTER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_pulseTimer">
            <summary>
              Returns the timer of the pulses counter (ms).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the timer of the pulses counter (ms)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_pwmReportMode">
            <summary>
              Returns the parameter (frequency/duty cycle, pulse width, edges count) returned by the get_currentValue function and callbacks.
            <para>
              Attention
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YPwmInput.PWMREPORTMODE_PWM_DUTYCYCLE</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQUENCY</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSEDURATION</c>, <c>YPwmInput.PWMREPORTMODE_PWM_EDGECOUNT</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSECOUNT</c>, <c>YPwmInput.PWMREPORTMODE_PWM_CPS</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_CPM</c>, <c>YPwmInput.PWMREPORTMODE_PWM_STATE</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPS</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPM</c> and
              <c>YPwmInput.PWMREPORTMODE_PWM_PERIODCOUNT</c> corresponding to the parameter (frequency/duty
              cycle, pulse width, edges count) returned by the get_currentValue function and callbacks
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.PWMREPORTMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.set_pwmReportMode(System.Int32)">
            <summary>
              Changes the  parameter  type (frequency/duty cycle, pulse width, or edge count) returned by the get_currentValue function and callbacks.
            <para>
              The edge count value is limited to the 6 lowest digits. For values greater than one million, use
              get_pulseCounter().
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YPwmInput.PWMREPORTMODE_PWM_DUTYCYCLE</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQUENCY</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSEDURATION</c>, <c>YPwmInput.PWMREPORTMODE_PWM_EDGECOUNT</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_PULSECOUNT</c>, <c>YPwmInput.PWMREPORTMODE_PWM_CPS</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_CPM</c>, <c>YPwmInput.PWMREPORTMODE_PWM_STATE</c>,
              <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPS</c>, <c>YPwmInput.PWMREPORTMODE_PWM_FREQ_CPM</c> and
              <c>YPwmInput.PWMREPORTMODE_PWM_PERIODCOUNT</c> corresponding to the  parameter  type
              (frequency/duty cycle, pulse width, or edge count) returned by the get_currentValue function and callbacks
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmInputProxy.PwmReportMode">
            <value>Parameter (frequency/duty cycle, pulse width, edges count) returned by the get_currentValue function and callbacks. Attention</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_debouncePeriod">
            <summary>
              Returns the shortest expected pulse duration, in ms.
            <para>
              Any shorter pulse will be automatically ignored (debounce).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the shortest expected pulse duration, in ms
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.DEBOUNCEPERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.set_debouncePeriod(System.Int32)">
            <summary>
              Changes the shortest expected pulse duration, in ms.
            <para>
              Any shorter pulse will be automatically ignored (debounce).
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the shortest expected pulse duration, in ms
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmInputProxy.DebouncePeriod">
            <value>Shortest expected pulse duration, in ms. Any shorter pulse will be automatically ignored (debounce).</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_bandwidth">
            <summary>
              Returns the input signal sampling rate, in kHz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the input signal sampling rate, in kHz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.set_bandwidth(System.Int32)">
            <summary>
              Changes the input signal sampling rate, measured in kHz.
            <para>
              A lower sampling frequency can be used to hide hide-frequency bounce effects,
              for instance on electromechanical contacts, but limits the measure resolution.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the input signal sampling rate, measured in kHz
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmInputProxy.Bandwidth">
            <value>Input signal sampling rate, in kHz.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.get_edgesPerPeriod">
            <summary>
              Returns the number of edges detected per preiod.
            <para>
              For a clean PWM signal, this should be exactly two,
              but in cas the signal is created by a mechanical contact with bounces, it can get higher.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of edges detected per preiod
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmInput.EDGESPERPERIOD_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmInputProxy.resetCounter">
            <summary>
              Returns the pulse counter value as well as its timer.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YPwmOutputProxy">
            <summary>
              The <c>YPwmOutput</c> class allows you to drive a pulse-width modulated output (PWM).
            <para>
              You can configure the frequency as well as the duty cycle, and setup progressive
              transitions.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.FindPwmOutput(System.String)">
            <summary>
              Retrieves a PWM generator for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the PWM generator is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPwmOutput.isOnline()</c> to test if the PWM generator is
              indeed online at a given time. In case of ambiguity when looking for
              a PWM generator by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the PWM generator, for instance
              <c>YPWMTX01.pwmOutput1</c>.
            </param>
            <returns>
              a <c>YPwmOutput</c> object allowing you to drive the PWM generator.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type PwmOutput available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YPwmOutput.FindPwmOutput</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.get_enabled">
            <summary>
              Returns the state of the PWM generators.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPwmOutput.ENABLED_FALSE</c> or <c>YPwmOutput.ENABLED_TRUE</c>, according to the state of
              the PWM generators
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.set_enabled(System.Int32)">
            <summary>
              Stops or starts the PWM.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPwmOutput.ENABLED_FALSE</c> or <c>YPwmOutput.ENABLED_TRUE</c>
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.set_frequency(System.Double)">
            <summary>
              Changes the PWM frequency.
            <para>
              The duty cycle is kept unchanged thanks to an
              automatic pulse width change, in other words, the change will not be applied
              before the end of the current period. This can significantly affect reaction
              time at low frequencies. If you call the matching module <c>saveToFlash()</c>
              method, the frequency will be kept after a device power cycle.
              To stop the PWM signal, do not set the frequency to zero, use the set_enabled()
              method instead.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM frequency
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.get_frequency">
            <summary>
              Returns the PWM frequency in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM frequency in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.FREQUENCY_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmOutputProxy.Frequency">
            <value>PWM frequency in Hz.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.set_period(System.Double)">
            <summary>
              Changes the PWM period in milliseconds.
            <para>
              Caution: in order to avoid  random truncation of
              the current pulse, the change will not be applied
              before the end of the current period. This can significantly affect reaction
              time at low frequencies. If you call the matching module <c>saveToFlash()</c>
              method, the frequency will be kept after a device power cycle.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM period in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.get_period">
            <summary>
              Returns the PWM period in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM period in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.PERIOD_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmOutputProxy.Period">
            <value>PWM period in milliseconds.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.set_dutyCycle(System.Double)">
            <summary>
              Changes the PWM duty cycle, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM duty cycle, in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.get_dutyCycle">
            <summary>
              Returns the PWM duty cycle, in per cents.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM duty cycle, in per cents
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.DUTYCYCLE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmOutputProxy.DutyCycle">
            <value>PWM duty cycle, in per cents.</value>
        </member>
        <member name="P:YoctoProxyAPI.YPwmOutputProxy.Enabled">
            <value>True if the port output is enabled.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.set_pulseDuration(System.Double)">
            <summary>
              Changes the PWM pulse length, in milliseconds.
            <para>
              A pulse length cannot be longer than period, otherwise it is truncated.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM pulse length, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.get_pulseDuration">
            <summary>
              Returns the PWM pulse length in milliseconds, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM pulse length in milliseconds, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.PULSEDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.get_enabledAtPowerOn">
            <summary>
              Returns the state of the PWM at device power on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YPwmOutput.ENABLEDATPOWERON_FALSE</c> or <c>YPwmOutput.ENABLEDATPOWERON_TRUE</c>,
              according to the state of the PWM at device power on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.ENABLEDATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.set_enabledAtPowerOn(System.Int32)">
            <summary>
              Changes the state of the PWM at device power on.
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YPwmOutput.ENABLEDATPOWERON_FALSE</c> or <c>YPwmOutput.ENABLEDATPOWERON_TRUE</c>,
              according to the state of the PWM at device power on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmOutputProxy.EnabledAtPowerOn">
            <value>State of the PWM at device power on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.set_dutyCycleAtPowerOn(System.Double)">
            <summary>
              Changes the PWM duty cycle at device power on.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the PWM duty cycle at device power on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.get_dutyCycleAtPowerOn">
            <summary>
              Returns the PWM generators duty cycle at device power on as a floating point number between 0 and 100.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the PWM generators duty cycle at device power on as a
              floating point number between 0 and 100
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmOutput.DUTYCYCLEATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmOutputProxy.DutyCycleAtPowerOn">
            <value>PWM generators duty cycle at device power on as a floating point number between 0 and 100.</value>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.pulseDurationMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of the pulse duration toward a given value.
            <para>
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="ms_target">
              new pulse duration at the end of the transition
              (floating-point number, representing the pulse duration in milliseconds)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.dutyCycleMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth change of the duty cycle toward a given value.
            <para>
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="target">
              new duty cycle at the end of the transition
              (percentage, floating-point number between 0 and 100)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.frequencyMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth frequency change toward a given value.
            <para>
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="target">
              new frequency at the end of the transition (floating-point number)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.phaseMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition toward a specified value of the phase shift between this channel
              and the other channel.
            <para>
              The phase shift is executed by slightly changing the frequency
              temporarily during the specified duration. This function only makes sense when both channels
              are running, either at the same frequency, or at a multiple of the channel frequency.
              Any period, frequency, duty cycle or pulse width change will cancel any ongoing transition process.
            </para>
            </summary>
            <param name="target">
              phase shift at the end of the transition, in milliseconds (floating-point number)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.triggerPulsesByDuration(System.Double,System.Int32)">
            <summary>
              Trigger a given number of pulses of specified duration, at current frequency.
            <para>
              At the end of the pulse train, revert to the original state of the PWM generator.
            </para>
            </summary>
            <param name="ms_target">
              desired pulse duration
              (floating-point number, representing the pulse duration in milliseconds)
            </param>
            <param name="n_pulses">
              desired pulse count
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.triggerPulsesByDutyCycle(System.Double,System.Int32)">
            <summary>
              Trigger a given number of pulses of specified duration, at current frequency.
            <para>
              At the end of the pulse train, revert to the original state of the PWM generator.
            </para>
            </summary>
            <param name="target">
              desired duty cycle for the generated pulses
              (percentage, floating-point number between 0 and 100)
            </param>
            <param name="n_pulses">
              desired pulse count
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmOutputProxy.triggerPulsesByFrequency(System.Double,System.Int32)">
            <summary>
              Trigger a given number of pulses at the specified frequency, using current duty cycle.
            <para>
              At the end of the pulse train, revert to the original state of the PWM generator.
            </para>
            </summary>
            <param name="target">
              desired frequency for the generated pulses (floating-point number)
            </param>
            <param name="n_pulses">
              desired pulse count
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YPwmPowerSourceProxy">
            <summary>
              The <c>YPwmPowerSource</c> class allows you to configure
              the voltage source used by all PWM outputs on the same device.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YPwmPowerSourceProxy.FindPwmPowerSource(System.String)">
            <summary>
              Retrieves a PWM generator power source for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the PWM generator power source is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YPwmPowerSource.isOnline()</c> to test if the PWM generator power source is
              indeed online at a given time. In case of ambiguity when looking for
              a PWM generator power source by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the PWM generator power source, for instance
              <c>YPWMTX01.pwmPowerSource</c>.
            </param>
            <returns>
              a <c>YPwmPowerSource</c> object allowing you to drive the PWM generator power source.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPwmPowerSourceProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type PwmPowerSource available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YPwmPowerSource.FindPwmPowerSource</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YPwmPowerSourceProxy.get_powerMode">
            <summary>
              Returns the selected power source for the PWM on the same device.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YPwmPowerSource.POWERMODE_USB_5V</c>, <c>YPwmPowerSource.POWERMODE_USB_3V</c>,
              <c>YPwmPowerSource.POWERMODE_EXT_V</c> and <c>YPwmPowerSource.POWERMODE_OPNDRN</c> corresponding to
              the selected power source for the PWM on the same device
            </returns>
            <para>
              On failure, throws an exception or returns <c>YPwmPowerSource.POWERMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YPwmPowerSourceProxy.set_powerMode(System.Int32)">
            <summary>
              Changes  the PWM power source.
            <para>
              PWM can use isolated 5V from USB, isolated 3V from USB or
              voltage from an external power source. The PWM can also work in open drain  mode. In that
              mode, the PWM actively pulls the line down.
              Warning: this setting is common to all PWM on the same device. If you change that parameter,
              all PWM located on the same device are  affected.
              If you want the change to be kept after a device reboot, make sure  to call the matching
              module <c>saveToFlash()</c>.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YPwmPowerSource.POWERMODE_USB_5V</c>, <c>YPwmPowerSource.POWERMODE_USB_3V</c>,
              <c>YPwmPowerSource.POWERMODE_EXT_V</c> and <c>YPwmPowerSource.POWERMODE_OPNDRN</c> corresponding to
               the PWM power source
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YPwmPowerSourceProxy.PowerMode">
            <value>Selected power source for the PWM on the same device.</value>
        </member>
        <member name="T:YoctoProxyAPI.YQtProxy">
            <summary>
              The <c>YQt</c> class provides direct access to the 3D attitude estimation
              provided by Yoctopuce inertial sensors.
            <para>
              The four instances of <c>YQt</c>
              provide direct access to the individual quaternion components representing the
              orientation. It is usually not needed to use the <c>YQt</c> class
              directly, as the <c>YGyro</c> class provides a more convenient higher-level
              interface.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YQtProxy.FindQt(System.String)">
            <summary>
              Retrieves a quaternion component for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the quaternion component is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YQt.isOnline()</c> to test if the quaternion component is
              indeed online at a given time. In case of ambiguity when looking for
              a quaternion component by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the quaternion component, for instance
              <c>Y3DMK002.qt1</c>.
            </param>
            <returns>
              a <c>YQt</c> object allowing you to drive the quaternion component.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YQtProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Qt available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YQt.FindQt</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YQuadratureDecoderProxy">
            <summary>
              The <c>YQuadratureDecoder</c> class allows you to read and configure Yoctopuce quadrature decoders.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YQuadratureDecoderProxy.FindQuadratureDecoder(System.String)">
            <summary>
              Retrieves a quadrature decoder for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the quadrature decoder is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YQuadratureDecoder.isOnline()</c> to test if the quadrature decoder is
              indeed online at a given time. In case of ambiguity when looking for
              a quadrature decoder by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the quadrature decoder, for instance
              <c>YPWMRX01.quadratureDecoder</c>.
            </param>
            <returns>
              a <c>YQuadratureDecoder</c> object allowing you to drive the quadrature decoder.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YQuadratureDecoderProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type QuadratureDecoder available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YQuadratureDecoder.FindQuadratureDecoder</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YQuadratureDecoderProxy.set_currentValue(System.Double)">
            <summary>
              Changes the current expected position of the quadrature decoder.
            <para>
              Invoking this function implicitly activates the quadrature decoder.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current expected position of the quadrature decoder
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YQuadratureDecoderProxy.get_speed">
            <summary>
              Returns the increments frequency, in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the increments frequency, in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YQuadratureDecoder.SPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YQuadratureDecoderProxy.get_decoding">
            <summary>
              Returns the current activation state of the quadrature decoder.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YQuadratureDecoder.DECODING_OFF</c>, <c>YQuadratureDecoder.DECODING_ON</c>,
              <c>YQuadratureDecoder.DECODING_DIV2</c> and <c>YQuadratureDecoder.DECODING_DIV4</c> corresponding
              to the current activation state of the quadrature decoder
            </returns>
            <para>
              On failure, throws an exception or returns <c>YQuadratureDecoder.DECODING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YQuadratureDecoderProxy.set_decoding(System.Int32)">
            <summary>
              Changes the activation state of the quadrature decoder.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YQuadratureDecoder.DECODING_OFF</c>, <c>YQuadratureDecoder.DECODING_ON</c>,
              <c>YQuadratureDecoder.DECODING_DIV2</c> and <c>YQuadratureDecoder.DECODING_DIV4</c> corresponding
              to the activation state of the quadrature decoder
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YQuadratureDecoderProxy.Decoding">
            <value>Current activation state of the quadrature decoder.</value>
        </member>
        <member name="T:YoctoProxyAPI.YRangeFinderProxy">
            <summary>
              The <c>YRangeFinder</c> class allows you to read and configure Yoctopuce range finders.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to easily perform a one-point linear calibration
              to compensate the effect of a glass or filter placed in front of the sensor.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.FindRangeFinder(System.String)">
            <summary>
              Retrieves a range finder for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the range finder is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRangeFinder.isOnline()</c> to test if the range finder is
              indeed online at a given time. In case of ambiguity when looking for
              a range finder by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the range finder, for instance
              <c>YRNGFND1.rangeFinder1</c>.
            </param>
            <returns>
              a <c>YRangeFinder</c> object allowing you to drive the range finder.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type RangeFinder available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YRangeFinder.FindRangeFinder</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="P:YoctoProxyAPI.YRangeFinderProxy.IsPresent">
            <value>True if the sensor detected an object</value>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured range.
            <para>
              That unit is a string.
              String value can be <c>"</c> or <c>mm</c>. Any other value is ignored.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
              WARNING: if a specific calibration is defined for the rangeFinder function, a
              unit system change will probably break it.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured range
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.get_rangeFinderMode">
            <summary>
              Returns the range finder running mode.
            <para>
              The rangefinder running mode
              allows you to put priority on precision, speed or maximum range.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YRangeFinder.RANGEFINDERMODE_DEFAULT</c>, <c>YRangeFinder.RANGEFINDERMODE_LONG_RANGE</c>,
              <c>YRangeFinder.RANGEFINDERMODE_HIGH_ACCURACY</c> and <c>YRangeFinder.RANGEFINDERMODE_HIGH_SPEED</c>
              corresponding to the range finder running mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.RANGEFINDERMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.set_rangeFinderMode(System.Int32)">
            <summary>
              Changes the rangefinder running mode, allowing you to put priority on
              precision, speed or maximum range.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YRangeFinder.RANGEFINDERMODE_DEFAULT</c>, <c>YRangeFinder.RANGEFINDERMODE_LONG_RANGE</c>,
              <c>YRangeFinder.RANGEFINDERMODE_HIGH_ACCURACY</c> and <c>YRangeFinder.RANGEFINDERMODE_HIGH_SPEED</c>
              corresponding to the rangefinder running mode, allowing you to put priority on
              precision, speed or maximum range
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRangeFinderProxy.RangeFinderMode">
            <value>Range finder running mode. The rangefinder running mode</value>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.get_timeFrame">
            <summary>
              Returns the time frame used to measure the distance and estimate the measure
              reliability.
            <para>
              The time frame is expressed in milliseconds.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the time frame used to measure the distance and estimate the measure
              reliability
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.TIMEFRAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.set_timeFrame(System.Int64)">
            <summary>
              Changes the time frame used to measure the distance and estimate the measure
              reliability.
            <para>
              The time frame is expressed in milliseconds. A larger timeframe
              improves stability and reliability, at the cost of higher latency, but prevents
              the detection of events shorter than the time frame.
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the time frame used to measure the distance and estimate the measure
              reliability
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRangeFinderProxy.TimeFrame">
            <value>Time frame used to measure the distance and estimate the measure</value>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.get_quality">
            <summary>
              Returns a measure quality estimate, based on measured dispersion.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to a measure quality estimate, based on measured dispersion
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.QUALITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.get_currentTemperature">
            <summary>
              Returns the current sensor temperature, as a floating point number.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current sensor temperature, as a floating point number
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRangeFinder.CURRENTTEMPERATURE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.get_hardwareCalibrationTemperature">
            <summary>
              Returns the temperature at the time when the latest calibration was performed.
            <para>
              This function can be used to determine if a new calibration for ambient temperature
              is required.
            </para>
            </summary>
            <returns>
              a temperature, as a floating point number.
              On failure, throws an exception or return YAPI.INVALID_DOUBLE.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.triggerTemperatureCalibration">
            <summary>
              Triggers a sensor calibration according to the current ambient temperature.
            <para>
              That
              calibration process needs no physical interaction with the sensor. It is performed
              automatically at device startup, but it is recommended to start it again when the
              temperature delta since the latest calibration exceeds 8°C.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.triggerSpadCalibration">
            <summary>
              Triggers the photon detector hardware calibration.
            <para>
              This function is part of the calibration procedure to compensate for the the effect
              of a cover glass. Make sure to read the chapter about hardware calibration for details
              on the calibration procedure for proper results.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.triggerOffsetCalibration(System.Double)">
            <summary>
              Triggers the hardware offset calibration of the distance sensor.
            <para>
              This function is part of the calibration procedure to compensate for the the effect
              of a cover glass. Make sure to read the chapter about hardware calibration for details
              on the calibration procedure for proper results.
            </para>
            </summary>
            <param name="targetDist">
              true distance of the calibration target, in mm or inches, depending
              on the unit selected in the device
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.triggerXTalkCalibration(System.Double)">
            <summary>
              Triggers the hardware cross-talk calibration of the distance sensor.
            <para>
              This function is part of the calibration procedure to compensate for the the effect
              of a cover glass. Make sure to read the chapter about hardware calibration for details
              on the calibration procedure for proper results.
            </para>
            </summary>
            <param name="targetDist">
              true distance of the calibration target, in mm or inches, depending
              on the unit selected in the device
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRangeFinderProxy.cancelCoverGlassCalibrations">
            <summary>
              Cancels the effect of previous hardware calibration procedures to compensate
              for cover glass, and restores factory settings.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YRealTimeClockProxy">
            <summary>
              The <c>YRealTimeClock</c> class provide access to the embedded real-time clock available on some Yoctopuce
              devices.
            <para>
              It can provide current date and time, even after a power outage
              lasting several days. It is the base for automated wake-up functions provided by the WakeUpScheduler.
              The current time may represent a local time as well as an UTC time, but no automatic time change
              will occur to account for daylight saving time.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.FindRealTimeClock(System.String)">
            <summary>
              Retrieves a real-time clock for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the real-time clock is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRealTimeClock.isOnline()</c> to test if the real-time clock is
              indeed online at a given time. In case of ambiguity when looking for
              a real-time clock by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the real-time clock, for instance
              <c>YHUBGSM3.realTimeClock</c>.
            </param>
            <returns>
              a <c>YRealTimeClock</c> object allowing you to drive the real-time clock.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type RealTimeClock available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YRealTimeClock.FindRealTimeClock</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.get_unixTime">
            <summary>
              Returns the current time in Unix format (number of elapsed seconds since Jan 1st, 1970).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current time in Unix format (number of elapsed seconds since Jan 1st, 1970)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.UNIXTIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.set_unixTime(System.Int64)">
            <summary>
              Changes the current time.
            <para>
              Time is specifid in Unix format (number of elapsed seconds since Jan 1st, 1970).
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the current time
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.get_dateTime">
            <summary>
              Returns the current time in the form "YYYY/MM/DD hh:mm:ss".
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the current time in the form "YYYY/MM/DD hh:mm:ss"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.DATETIME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.get_utcOffset">
            <summary>
              Returns the number of seconds between current time and UTC time (time zone).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.UTCOFFSET_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.set_utcOffset(System.Int32)">
            <summary>
              Changes the number of seconds between current time and UTC time (time zone).
            <para>
              The timezone is automatically rounded to the nearest multiple of 15 minutes.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the number of seconds between current time and UTC time (time zone)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRealTimeClockProxy.UtcOffset">
            <value>Number of seconds between current time and UTC time (time zone).</value>
        </member>
        <member name="M:YoctoProxyAPI.YRealTimeClockProxy.get_timeSet">
            <summary>
              Returns true if the clock has been set, and false otherwise.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YRealTimeClock.TIMESET_FALSE</c> or <c>YRealTimeClock.TIMESET_TRUE</c>, according to true
              if the clock has been set, and false otherwise
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRealTimeClock.TIMESET_INVALID</c>.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YRefFrameProxy">
            <summary>
              The <c>YRefFrame</c> class is used to setup the base orientation of the Yoctopuce inertial
              sensors.
            <para>
              Thanks to this, orientation functions relative to the earth surface plane
              can use the proper reference frame. For some devices, the class also implements a
              tridimensional sensor calibration process, which can compensate for local variations
              of standard gravity and improve the precision of the tilt sensors.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.FindRefFrame(System.String)">
            <summary>
              Retrieves a reference frame for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the reference frame is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRefFrame.isOnline()</c> to test if the reference frame is
              indeed online at a given time. In case of ambiguity when looking for
              a reference frame by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the reference frame, for instance
              <c>Y3DMK002.refFrame</c>.
            </param>
            <returns>
              a <c>YRefFrame</c> object allowing you to drive the reference frame.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type RefFrame available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YRefFrame.FindRefFrame</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.set_bearing(System.Double)">
            <summary>
              Changes the reference bearing used by the compass.
            <para>
              The relative bearing
              indicated by the compass is the difference between the measured magnetic
              heading and the reference bearing indicated here.
            </para>
            <para>
              For instance, if you setup as reference bearing the value of the earth
              magnetic declination, the compass will provide the orientation relative
              to the geographic North.
            </para>
            <para>
              Similarly, when the sensor is not mounted along the standard directions
              because it has an additional yaw angle, you can set this angle in the reference
              bearing so that the compass provides the expected natural direction.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the reference bearing used by the compass
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_bearing">
            <summary>
              Returns the reference bearing used by the compass.
            <para>
              The relative bearing
              indicated by the compass is the difference between the measured magnetic
              heading and the reference bearing indicated here.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the reference bearing used by the compass
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRefFrame.BEARING_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRefFrameProxy.Bearing">
            <value>Reference bearing used by the compass. The relative bearing</value>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_fusionMode">
            <summary>
              Returns the sensor fusion mode.
            <para>
              Note that available sensor fusion modes depend on the sensor type.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YRefFrame.FUSIONMODE_NDOF</c>, <c>YRefFrame.FUSIONMODE_NDOF_FMC_OFF</c>,
              <c>YRefFrame.FUSIONMODE_M4G</c>, <c>YRefFrame.FUSIONMODE_COMPASS</c>,
              <c>YRefFrame.FUSIONMODE_IMU</c>, <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_1G8</c>,
              <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_3G6</c> and <c>YRefFrame.FUSIONMODE_INCLIN_10DEG</c>
              corresponding to the sensor fusion mode
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRefFrame.FUSIONMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.set_fusionMode(System.Int32)">
            <summary>
              Change the sensor fusion mode.
            <para>
              Note that available sensor fusion modes depend on the sensor type.
              Remember to call the matching module <c>saveToFlash()</c> method to save the setting permanently.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YRefFrame.FUSIONMODE_NDOF</c>, <c>YRefFrame.FUSIONMODE_NDOF_FMC_OFF</c>,
              <c>YRefFrame.FUSIONMODE_M4G</c>, <c>YRefFrame.FUSIONMODE_COMPASS</c>,
              <c>YRefFrame.FUSIONMODE_IMU</c>, <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_1G8</c>,
              <c>YRefFrame.FUSIONMODE_INCLIN_90DEG_3G6</c> and <c>YRefFrame.FUSIONMODE_INCLIN_10DEG</c>
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRefFrameProxy.FusionMode">
            <value>Sensor fusion mode. Note that available sensor fusion modes depend on the sensor type.</value>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_mountPosition">
            <summary>
              Returns the installation position of the device, as configured
              in order to define the reference frame for the compass and the
              pitch/roll tilt sensors.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among the <c>YRefFrame.MOUNTPOSITION</c> enumeration
              (<c>YRefFrame.MOUNTPOSITION_BOTTOM</c>,  <c>YRefFrame.MOUNTPOSITION_TOP</c>,
              <c>YRefFrame.MOUNTPOSITION_FRONT</c>,    <c>YRefFrame.MOUNTPOSITION_RIGHT</c>,
              <c>YRefFrame.MOUNTPOSITION_REAR</c>,     <c>YRefFrame.MOUNTPOSITION_LEFT</c>),
              corresponding to the installation in a box, on one of the six faces.
            </returns>
            <para>
              On failure, throws an exception or returns refframe._Mountposition_INVALID.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_mountOrientation">
            <summary>
              Returns the installation orientation of the device, as configured
              in order to define the reference frame for the compass and the
              pitch/roll tilt sensors.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among the enumeration <c>YRefFrame.MOUNTORIENTATION</c>
              (<c>YRefFrame.MOUNTORIENTATION_TWELVE</c>, <c>YRefFrame.MOUNTORIENTATION_THREE</c>,
              <c>YRefFrame.MOUNTORIENTATION_SIX</c>,     <c>YRefFrame.MOUNTORIENTATION_NINE</c>)
              corresponding to the orientation of the "X" arrow on the device,
              as on a clock dial seen from an observer in the center of the box.
              On the bottom face, the 12H orientation points to the front, while
              on the top face, the 12H orientation points to the rear.
            </returns>
            <para>
              On failure, throws an exception or returns refframe._Mountorientation_INVALID.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.set_mountPosition(System.Int32,System.Int32)">
            <summary>
              Changes the compass and tilt sensor frame of reference.
            <para>
              The magnetic compass
              and the tilt sensors (pitch and roll) naturally work in the plane
              parallel to the earth surface. In case the device is not installed upright
              and horizontally, you must select its reference orientation (parallel to
              the earth surface) so that the measures are made relative to this position.
            </para>
            <para>
            </para>
            </summary>
            <param name="position">
              a value among the <c>YRefFrame.MOUNTPOSITION</c> enumeration
              (<c>YRefFrame.MOUNTPOSITION_BOTTOM</c>,  <c>YRefFrame.MOUNTPOSITION_TOP</c>,
              <c>YRefFrame.MOUNTPOSITION_FRONT</c>,    <c>YRefFrame.MOUNTPOSITION_RIGHT</c>,
              <c>YRefFrame.MOUNTPOSITION_REAR</c>,     <c>YRefFrame.MOUNTPOSITION_LEFT</c>),
              corresponding to the installation in a box, on one of the six faces.
            </param>
            <param name="orientation">
              a value among the enumeration <c>YRefFrame.MOUNTORIENTATION</c>
              (<c>YRefFrame.MOUNTORIENTATION_TWELVE</c>, <c>YRefFrame.MOUNTORIENTATION_THREE</c>,
              <c>YRefFrame.MOUNTORIENTATION_SIX</c>,     <c>YRefFrame.MOUNTORIENTATION_NINE</c>)
              corresponding to the orientation of the "X" arrow on the device,
              as on a clock dial seen from an observer in the center of the box.
              On the bottom face, the 12H orientation points to the front, while
              on the top face, the 12H orientation points to the rear.
            </param>
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_calibrationState">
            <summary>
              Returns the 3D sensor calibration state (Yocto-3D-V2 only).
            <para>
              This function returns
              an integer representing the calibration state of the 3 inertial sensors of
              the BNO055 chip, found in the Yocto-3D-V2. Hundredths show the calibration state
              of the accelerometer, tenths show the calibration state of the magnetometer while
              units show the calibration state of the gyroscope. For each sensor, the value 0
              means no calibration and the value 3 means full calibration.
            </para>
            </summary>
            <returns>
              an integer representing the calibration state of Yocto-3D-V2:
              333 when fully calibrated, 0 when not calibrated at all.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
              For the Yocto-3D (V1), this function always return -3 (unsupported function).
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_measureQuality">
            <summary>
              Returns estimated quality of the orientation (Yocto-3D-V2 only).
            <para>
              This function returns
              an integer between 0 and 3 representing the degree of confidence of the position
              estimate. When the value is 3, the estimation is reliable. Below 3, one should
              expect sudden corrections, in particular for heading (<c>compass</c> function).
              The most frequent causes for values below 3 are magnetic interferences, and
              accelerations or rotations beyond the sensor range.
            </para>
            </summary>
            <returns>
              an integer between 0 and 3 (3 when the measure is reliable)
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
              For the Yocto-3D (V1), this function always return -3 (unsupported function).
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.start3DCalibration">
            <summary>
              Initiates the sensors tridimensional calibration process.
            <para>
              This calibration is used at low level for inertial position estimation
              and to enhance the precision of the tilt sensors.
            </para>
            <para>
              After calling this method, the device should be moved according to the
              instructions provided by method <c>get_3DCalibrationHint</c>,
              and <c>more3DCalibration</c> should be invoked about 5 times per second.
              The calibration procedure is completed when the method
              <c>get_3DCalibrationProgress</c> returns 100. At this point,
              the computed calibration parameters can be applied using method
              <c>save3DCalibration</c>. The calibration process can be cancelled
              at any time using method <c>cancel3DCalibration</c>.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.more3DCalibration">
            <summary>
              Continues the sensors tridimensional calibration process previously
              initiated using method <c>start3DCalibration</c>.
            <para>
              This method should be called approximately 5 times per second, while
              positioning the device according to the instructions provided by method
              <c>get_3DCalibrationHint</c>. Note that the instructions change during
              the calibration process.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_3DCalibrationHint">
            <summary>
              Returns instructions to proceed to the tridimensional calibration initiated with
              method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              a character string.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_3DCalibrationProgress">
            <summary>
              Returns the global process indicator for the tridimensional calibration
              initiated with method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              an integer between 0 (not started) and 100 (stage completed).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_3DCalibrationStage">
            <summary>
              Returns index of the current stage of the calibration
              initiated with method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              an integer, growing each time a calibration stage is completed.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_3DCalibrationStageProgress">
            <summary>
              Returns the process indicator for the current stage of the calibration
              initiated with method <c>start3DCalibration</c>.
            <para>
            </para>
            </summary>
            <returns>
              an integer between 0 (not started) and 100 (stage completed).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.get_3DCalibrationLogMsg">
            <summary>
              Returns the latest log message from the calibration process.
            <para>
              When no new message is available, returns an empty string.
            </para>
            </summary>
            <returns>
              a character string.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.save3DCalibration">
            <summary>
              Applies the sensors tridimensional calibration parameters that have just been computed.
            <para>
              Remember to call the <c>saveToFlash()</c>  method of the module if the changes
              must be kept when the device is restarted.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YRefFrameProxy.cancel3DCalibration">
            <summary>
              Aborts the sensors tridimensional calibration process et restores normal settings.
            <para>
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="T:YoctoProxyAPI.YRelayProxy">
            <summary>
              The <c>YRelay</c> class allows you to drive a Yoctopuce relay or optocoupled output.
            <para>
              It can be used to simply switch the output on or off, but also to automatically generate short
              pulses of determined duration.
              On devices with two output for each relay (double throw), the two outputs are named A and B,
              with output A corresponding to the idle position (normally closed) and the output B corresponding to the
              active state (normally open).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.FindRelay(System.String)">
            <summary>
              Retrieves a relay for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the relay is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YRelay.isOnline()</c> to test if the relay is
              indeed online at a given time. In case of ambiguity when looking for
              a relay by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the relay, for instance
              <c>YLTCHRL1.relay1</c>.
            </param>
            <returns>
              a <c>YRelay</c> object allowing you to drive the relay.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Relay available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YRelay.FindRelay</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.get_state">
            <summary>
              Returns the state of the relays (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YRelay.STATE_A</c> or <c>YRelay.STATE_B</c>, according to the state of the relays (A for
              the idle position, B for the active position)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.STATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.set_state(System.Int32)">
            <summary>
              Changes the state of the relays (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YRelay.STATE_A</c> or <c>YRelay.STATE_B</c>, according to the state of the relays (A for
              the idle position, B for the active position)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRelayProxy.State">
            <value>State of the relays (A for the idle position, B for the active position).</value>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.get_stateAtPowerOn">
            <summary>
              Returns the state of the relays at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YRelay.STATEATPOWERON_UNCHANGED</c>, <c>YRelay.STATEATPOWERON_A</c> and
              <c>YRelay.STATEATPOWERON_B</c> corresponding to the state of the relays at device startup (A for
              the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.STATEATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.set_stateAtPowerOn(System.Int32)">
            <summary>
              Changes the state of the relays at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YRelay.STATEATPOWERON_UNCHANGED</c>, <c>YRelay.STATEATPOWERON_A</c> and
              <c>YRelay.STATEATPOWERON_B</c> corresponding to the state of the relays at device startup (A for
              the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRelayProxy.StateAtPowerOn">
            <value>State of the relays at device startup (A for the idle position,</value>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.get_maxTimeOnStateA">
            <summary>
              Returns the maximum time (ms) allowed for the relay to stay in state
              A before automatically switching back in to B state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum time (ms) allowed for the relay to stay in state
              A before automatically switching back in to B state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.MAXTIMEONSTATEA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.set_maxTimeOnStateA(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the relay to stay in state A
              before automatically switching back in to B state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the relay to stay in state A
              before automatically switching back in to B state
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRelayProxy.MaxTimeOnStateA">
            <value>Maximum time (ms) allowed for the relay to stay in state</value>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.get_maxTimeOnStateB">
            <summary>
              Retourne the maximum time (ms) allowed for the relay to stay in state B
              before automatically switching back in to A state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.MAXTIMEONSTATEB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.set_maxTimeOnStateB(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the relay to stay in state B before
              automatically switching back in to A state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the relay to stay in state B before
              automatically switching back in to A state
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YRelayProxy.MaxTimeOnStateB">
            <value>The maximum time (ms) allowed for the relay to stay in state B</value>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.get_output">
            <summary>
              Returns the output state of the relays, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YRelay.OUTPUT_OFF</c> or <c>YRelay.OUTPUT_ON</c>, according to the output state of the
              relays, when used as a simple switch (single throw)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.OUTPUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.set_output(System.Int32)">
            <summary>
              Changes the output state of the relays, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YRelay.OUTPUT_OFF</c> or <c>YRelay.OUTPUT_ON</c>, according to the output state of the
              relays, when used as a simple switch (single throw)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.get_pulseTimer">
            <summary>
              Returns the number of milliseconds remaining before the relays is returned to idle position
              (state A), during a measured pulse generation.
            <para>
              When there is no ongoing pulse, returns zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before the relays is returned to idle position
              (state A), during a measured pulse generation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.pulse(System.Int32)">
            <summary>
              Sets the relay to output B (active) for a specified duration, then brings it
              automatically back to output A (idle state).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.delayedPulse(System.Int32,System.Int32)">
            <summary>
              Schedules a pulse.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_delay">
              waiting time before the pulse, in milliseconds
            </param>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.get_countdown">
            <summary>
              Returns the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero
            </returns>
            <para>
              On failure, throws an exception or returns <c>YRelay.COUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YRelayProxy.toggle">
            <summary>
              Switch the relay to the opposite state.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YSegmentedDisplayProxy">
            <summary>
              The <c>SegmentedDisplay</c> class allows you to drive segmented displays.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YSegmentedDisplayProxy.FindSegmentedDisplay(System.String)">
            <summary>
              Retrieves a segmented display for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the segmented display is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSegmentedDisplay.isOnline()</c> to test if the segmented display is
              indeed online at a given time. In case of ambiguity when looking for
              a segmented display by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the segmented display, for instance
              <c>MyDevice.segmentedDisplay</c>.
            </param>
            <returns>
              a <c>YSegmentedDisplay</c> object allowing you to drive the segmented display.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSegmentedDisplayProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type SegmentedDisplay available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YSegmentedDisplay.FindSegmentedDisplay</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSegmentedDisplayProxy.get_displayedText">
            <summary>
              Returns the text currently displayed on the screen.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the text currently displayed on the screen
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSegmentedDisplay.DISPLAYEDTEXT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSegmentedDisplayProxy.set_displayedText(System.String)">
            <summary>
              Changes the text currently displayed on the screen.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the text currently displayed on the screen
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YSerialPortProxy">
            <summary>
              The <c>YSerialPort</c> class allows you to fully drive a Yoctopuce serial port.
            <para>
              It can be used to send and receive data, and to configure communication
              parameters (baud rate, bit count, parity, flow control and protocol).
              Note that Yoctopuce serial ports are not exposed as virtual COM ports.
              They are meant to be used in the same way as all Yoctopuce devices.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.FindSerialPort(System.String)">
            <summary>
              Retrieves a serial port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the serial port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSerialPort.isOnline()</c> to test if the serial port is
              indeed online at a given time. In case of ambiguity when looking for
              a serial port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the serial port, for instance
              <c>RS232MK1.serialPort</c>.
            </param>
            <returns>
              a <c>YSerialPort</c> object allowing you to drive the serial port.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type SerialPort available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YSerialPort.FindSerialPort</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_rxCount">
            <summary>
              Returns the total number of bytes received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.RXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_txCount">
            <summary>
              Returns the total number of bytes transmitted since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes transmitted since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.TXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_errCount">
            <summary>
              Returns the total number of communication errors detected since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of communication errors detected since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.ERRCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_rxMsgCount">
            <summary>
              Returns the total number of messages received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.RXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_txMsgCount">
            <summary>
              Returns the total number of messages send since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages send since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.TXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_lastMsg">
            <summary>
              Returns the latest message fully received (for Line, Frame and Modbus protocols).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest message fully received (for Line, Frame and Modbus protocols)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.LASTMSG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_currentJob">
            <summary>
              Returns the name of the job file currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the job file currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.CURRENTJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.set_currentJob(System.String)">
            <summary>
              Selects a job file to run immediately.
            <para>
              If an empty string is
              given as argument, stops running current job file.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_startupJob">
            <summary>
              Returns the job file to use when the device is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the job file to use when the device is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.STARTUPJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.set_startupJob(System.String)">
            <summary>
              Changes the job to use when the device is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the job to use when the device is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSerialPortProxy.StartupJob">
            <value>Job file to use when the device is powered on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_jobMaxTask">
            <summary>
              Returns the maximum number of tasks in a job that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of tasks in a job that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.JOBMAXTASK_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSerialPortProxy.JobMaxTask">
            <value>Maximum number of tasks in a job that the device can handle.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_jobMaxSize">
            <summary>
              Returns maximum size allowed for job files.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to maximum size allowed for job files
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.JOBMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSerialPortProxy.JobMaxSize">
            <value>Maximum size allowed for job files.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_protocol">
            <summary>
              Returns the type of protocol used over the serial line, as a string.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "StxEtx" for ASCII messages delimited by STX/ETX codes,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Modbus-ASCII" for MODBUS messages in ASCII mode,
              "Modbus-RTU" for MODBUS messages in RTU mode,
              "Wiegand-ASCII" for Wiegand messages in ASCII mode,
              "Wiegand-26","Wiegand-34", etc for Wiegand messages in byte mode,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used over the serial line, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.PROTOCOL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.set_protocol(System.String)">
            <summary>
              Changes the type of protocol used over the serial line.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "StxEtx" for ASCII messages delimited by STX/ETX codes,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Modbus-ASCII" for MODBUS messages in ASCII mode,
              "Modbus-RTU" for MODBUS messages in RTU mode,
              "Wiegand-ASCII" for Wiegand messages in ASCII mode,
              "Wiegand-26","Wiegand-34", etc for Wiegand messages in byte mode,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each bytes sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used over the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSerialPortProxy.Protocol">
            <value>Type of protocol used over the serial line, as a string.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_voltageLevel">
            <summary>
              Returns the voltage level used on the serial line.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YSerialPort.VOLTAGELEVEL_OFF</c>, <c>YSerialPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSerialPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSerialPort.VOLTAGELEVEL_RS232</c>,
              <c>YSerialPort.VOLTAGELEVEL_RS485</c> and <c>YSerialPort.VOLTAGELEVEL_TTL1V8</c> corresponding to
              the voltage level used on the serial line
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.VOLTAGELEVEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.set_voltageLevel(System.Int32)">
            <summary>
              Changes the voltage type used on the serial line.
            <para>
              Valid
              values  will depend on the Yoctopuce device model featuring
              the serial port feature.  Check your device documentation
              to find out which values are valid for that specific model.
              Trying to set an invalid value will have no effect.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YSerialPort.VOLTAGELEVEL_OFF</c>, <c>YSerialPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSerialPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSerialPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSerialPort.VOLTAGELEVEL_RS232</c>,
              <c>YSerialPort.VOLTAGELEVEL_RS485</c> and <c>YSerialPort.VOLTAGELEVEL_TTL1V8</c> corresponding to
              the voltage type used on the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSerialPortProxy.VoltageLevel">
            <value>Voltage level used on the serial line.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_serialMode">
            <summary>
              Returns the serial port communication parameters, as a string such as
              "9600,8N1".
            <para>
              The string includes the baud rate, the number of data bits,
              the parity, and the number of stop bits. An optional suffix is included
              if flow control is active: "CtsRts" for hardware handshake, "XOnXOff"
              for logical flow control and "Simplex" for acquiring a shared bus using
              the RTS line (as used by some RS485 adapters for instance).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the serial port communication parameters, as a string such as
              "9600,8N1"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSerialPort.SERIALMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.set_serialMode(System.String)">
            <summary>
              Changes the serial port communication parameters, with a string such as
              "9600,8N1".
            <para>
              The string includes the baud rate, the number of data bits,
              the parity, and the number of stop bits. An optional suffix can be added
              to enable flow control: "CtsRts" for hardware handshake, "XOnXOff"
              for logical flow control and "Simplex" for acquiring a shared bus using
              the RTS line (as used by some RS485 adapters for instance).
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the serial port communication parameters, with a string such as
              "9600,8N1"
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSerialPortProxy.SerialMode">
            <value>Serial port communication parameters, as a string such as</value>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.readLine">
            <summary>
              Reads a single line (or message) from the receive buffer, starting at current stream position.
            <para>
              This function is intended to be used when the serial port is configured for a message protocol,
              such as 'Line' mode or frame protocols.
            </para>
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              the function returns the oldest available line and moves the stream position just after.
              If no new full line is received, the function returns an empty line.
            </para>
            </summary>
            <returns>
              a string with a single line of text
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.readMessages(System.String,System.Int32)">
            <summary>
              Searches for incoming messages in the serial port receive buffer matching a given pattern,
              starting at current position.
            <para>
              This function will only compare and return printable characters
              in the message strings. Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              The search returns all messages matching the expression provided as argument in the buffer.
              If no matching message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="pattern">
              a limited regular expression describing the expected message format,
              or an empty string if all messages should be returned (no filtering).
              When using binary protocols, the format applies to the hexadecimal
              representation of the message.
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of strings containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.read_seek(System.Int32)">
            <summary>
              Changes the current internal stream position to the specified value.
            <para>
              This function
              does not affect the device, it only changes the value stored in the API object
              for the next read operations.
            </para>
            </summary>
            <param name="absPos">
              the absolute position index for next read operations.
            </param>
            <returns>
              nothing.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.read_tell">
            <summary>
              Returns the current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the absolute position index for next read operations.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.read_avail">
            <summary>
              Returns the number of bytes available to read in the input buffer starting from the
              current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the number of bytes available to read
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.queryLine(System.String,System.Int32)">
            <summary>
              Sends a text line query to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for 'Line' protocol.
            </para>
            </summary>
            <param name="query">
              the line query to send (without CR/LF)
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next text line received after sending the text query, as a string.
              Additional lines can be obtained by calling readLine or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.queryHex(System.String,System.Int32)">
            <summary>
              Sends a binary message to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for
              Frame-based protocol.
            </para>
            </summary>
            <param name="hexString">
              the message to send, coded in hexadecimal
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next frame received after sending the message, as a hex string.
              Additional frames can be obtained by calling readHex or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.uploadJob(System.String,System.String)">
            <summary>
              Saves the job definition string (JSON data) into a job file.
            <para>
              The job file can be later enabled using <c>selectJob()</c>.
            </para>
            </summary>
            <param name="jobfile">
              name of the job file to save on the device filesystem
            </param>
            <param name="jsonDef">
              a string containing a JSON definition of the job
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.selectJob(System.String)">
            <summary>
              Load and start processing the specified job file.
            <para>
              The file must have
              been previously created using the user interface or uploaded on the
              device filesystem using the <c>uploadJob()</c> function.
            </para>
            <para>
            </para>
            </summary>
            <param name="jobfile">
              name of the job file (on the device filesystem)
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.reset">
            <summary>
              Clears the serial port buffer and resets counters to zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeByte(System.Int32)">
            <summary>
              Sends a single byte to the serial port.
            <para>
            </para>
            </summary>
            <param name="code">
              the byte to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeStr(System.String)">
            <summary>
              Sends an ASCII string to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeBin(System.Byte[])">
            <summary>
              Sends a binary buffer to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeArray(System.Int32[])">
            <summary>
              Sends a byte sequence (provided as a list of bytes) to the serial port.
            <para>
            </para>
            </summary>
            <param name="byteList">
              a list of byte codes
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeHex(System.String)">
            <summary>
              Sends a byte sequence (provided as a hexadecimal string) to the serial port.
            <para>
            </para>
            </summary>
            <param name="hexString">
              a string of hexadecimal byte codes
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeLine(System.String)">
            <summary>
              Sends an ASCII string to the serial port, followed by a line break (CR LF).
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.readByte">
            <summary>
              Reads one byte from the receive buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              or if there is no data available yet, the function returns YAPI.NO_MORE_DATA.
            </para>
            </summary>
            <returns>
              the next byte
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.readStr(System.Int32)">
            <summary>
              Reads data from the receive buffer as a string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of characters to read
            </param>
            <returns>
              a string with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.readBin(System.Int32)">
            <summary>
              Reads data from the receive buffer as a binary buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a binary object with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.readArray(System.Int32)">
            <summary>
              Reads data from the receive buffer as a list of bytes, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a sequence of bytes with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.readHex(System.Int32)">
            <summary>
              Reads data from the receive buffer as a hexadecimal string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nBytes">
              the maximum number of bytes to read
            </param>
            <returns>
              a string with receive buffer contents, encoded in hexadecimal
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.set_RTS(System.Int32)">
            <summary>
              Manually sets the state of the RTS line.
            <para>
              This function has no effect when
              hardware handshake is enabled, as the RTS line is driven automatically.
            </para>
            <para>
            </para>
            </summary>
            <param name="val">
              1 to turn RTS on, 0 to turn RTS off
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.get_CTS">
            <summary>
              Reads the level of the CTS line.
            <para>
              The CTS line is usually driven by
              the RTS signal of the connected serial device.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              1 if the CTS line is high, 0 if the CTS line is low.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.snoopMessages(System.Int32)">
            <summary>
              Retrieves messages (both direction) in the serial port buffer, starting at current position.
            <para>
              This function will only compare and return printable characters in the message strings.
              Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              If no message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of <c>YSnoopingRecord</c> objects containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeStxEtx(System.String)">
            <summary>
              Sends an ASCII string to the serial port, preceeded with an STX code and
              followed by an ETX code.
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.writeMODBUS(System.String)">
            <summary>
              Sends a MODBUS message (provided as a hexadecimal string) to the serial port.
            <para>
              The message must start with the slave address. The MODBUS CRC/LRC is
              automatically added by the function. This function does not wait for a reply.
            </para>
            </summary>
            <param name="hexString">
              a hexadecimal message string, including device address but no CRC/LRC
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.queryMODBUS(System.Int32,System.Int32[])">
            <summary>
              Sends a message to a specified MODBUS slave connected to the serial port, and reads the
              reply, if any.
            <para>
              The message is the PDU, provided as a vector of bytes.
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduBytes">
              the message to send (PDU), as a vector of bytes. The first byte of the
              PDU is the MODBUS function code.
            </param>
            <returns>
              the received reply, as a vector of bytes.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array (or a MODBUS error reply).
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusReadBits(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous internal bits (or coil status) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x01 (Read Coils).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first bit/coil to read (zero-based)
            </param>
            <param name="nBits">
              the number of bits/coils to read
            </param>
            <returns>
              a vector of integers, each corresponding to one bit.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusReadInputBits(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous input bits (or discrete inputs) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x02 (Read Discrete Inputs).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first bit/input to read (zero-based)
            </param>
            <param name="nBits">
              the number of bits/inputs to read
            </param>
            <returns>
              a vector of integers, each corresponding to one bit.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusReadRegisters(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous internal registers (holding registers) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x03 (Read Holding Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first holding register to read (zero-based)
            </param>
            <param name="nWords">
              the number of holding registers to read
            </param>
            <returns>
              a vector of integers, each corresponding to one 16-bit register value.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusReadInputRegisters(System.Int32,System.Int32,System.Int32)">
            <summary>
              Reads one or more contiguous input registers (read-only registers) from a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x04 (Read Input Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to query
            </param>
            <param name="pduAddr">
              the relative address of the first input register to read (zero-based)
            </param>
            <param name="nWords">
              the number of input registers to read
            </param>
            <returns>
              a vector of integers, each corresponding to one 16-bit input value.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusWriteBit(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets a single internal bit (or coil) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x05 (Write Single Coil).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the bit/coil to set (zero-based)
            </param>
            <param name="value">
              the value to set (0 for OFF state, non-zero for ON state)
            </param>
            <returns>
              the number of bits/coils affected on the device (1)
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusWriteBits(System.Int32,System.Int32,System.Int32[])">
            <summary>
              Sets several contiguous internal bits (or coils) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x0f (Write Multiple Coils).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the first bit/coil to set (zero-based)
            </param>
            <param name="bits">
              the vector of bits to be set (one integer per bit)
            </param>
            <returns>
              the number of bits/coils affected on the device
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusWriteRegister(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets a single internal register (or holding register) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x06 (Write Single Register).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the register to set (zero-based)
            </param>
            <param name="value">
              the 16 bit value to set
            </param>
            <returns>
              the number of registers affected on the device (1)
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusWriteRegisters(System.Int32,System.Int32,System.Int32[])">
            <summary>
              Sets several contiguous internal registers (or holding registers) on a MODBUS serial device.
            <para>
              This method uses the MODBUS function code 0x10 (Write Multiple Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduAddr">
              the relative address of the first internal register to set (zero-based)
            </param>
            <param name="values">
              the vector of 16 bit values to set
            </param>
            <returns>
              the number of registers affected on the device
            </returns>
            <para>
              On failure, throws an exception or returns zero.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSerialPortProxy.modbusWriteAndReadRegisters(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
              Sets several contiguous internal registers (holding registers) on a MODBUS serial device,
              then performs a contiguous read of a set of (possibly different) internal registers.
            <para>
              This method uses the MODBUS function code 0x17 (Read/Write Multiple Registers).
            </para>
            </summary>
            <param name="slaveNo">
              the address of the slave MODBUS device to drive
            </param>
            <param name="pduWriteAddr">
              the relative address of the first internal register to set (zero-based)
            </param>
            <param name="values">
              the vector of 16 bit values to set
            </param>
            <param name="pduReadAddr">
              the relative address of the first internal register to read (zero-based)
            </param>
            <param name="nReadWords">
              the number of 16 bit values to read
            </param>
            <returns>
              a vector of integers, each corresponding to one 16-bit register value read.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YServoProxy">
            <summary>
              The <c>YServo</c> class is designed to drive remote-control servo motors
              outputs.
            <para>
              This class allows you not only to move
              a servo to a given position, but also to specify the time interval
              in which the move should be performed. This makes it possible to
              synchronize two servos involved in a same move.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.FindServo(System.String)">
            <summary>
              Retrieves a RC servo motor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the RC servo motor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YServo.isOnline()</c> to test if the RC servo motor is
              indeed online at a given time. In case of ambiguity when looking for
              a RC servo motor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the RC servo motor, for instance
              <c>SERVORC1.servo1</c>.
            </param>
            <returns>
              a <c>YServo</c> object allowing you to drive the RC servo motor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Servo available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YServo.FindServo</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.get_position">
            <summary>
              Returns the current servo position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current servo position
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.POSITION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.set_position(System.Int32)">
            <summary>
              Changes immediately the servo driving position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to immediately the servo driving position
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YServoProxy.Position">
            <value>Current servo position.</value>
        </member>
        <member name="P:YoctoProxyAPI.YServoProxy.Enabled">
            <value>True if the port output is enabled.</value>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.get_enabled">
            <summary>
              Returns the state of the RC servo motors.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YServo.ENABLED_FALSE</c> or <c>YServo.ENABLED_TRUE</c>, according to the state of the RC servo motors
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.set_enabled(System.Int32)">
            <summary>
              Stops or starts the RC servo motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YServo.ENABLED_FALSE</c> or <c>YServo.ENABLED_TRUE</c>
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.get_range">
            <summary>
              Returns the current range of use of the servo.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current range of use of the servo
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.RANGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.set_range(System.Int32)">
            <summary>
              Changes the range of use of the servo, specified in per cents.
            <para>
              A range of 100% corresponds to a standard control signal, that varies
              from 1 [ms] to 2 [ms], When using a servo that supports a double range,
              from 0.5 [ms] to 2.5 [ms], you can select a range of 200%.
              Be aware that using a range higher than what is supported by the servo
              is likely to damage the servo. Remember to call the matching module
              <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the range of use of the servo, specified in per cents
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YServoProxy.Range">
            <value>Current range of use of the servo.</value>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.get_neutral">
            <summary>
              Returns the duration in microseconds of a neutral pulse for the servo.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the duration in microseconds of a neutral pulse for the servo
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.NEUTRAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.set_neutral(System.Int32)">
            <summary>
              Changes the duration of the pulse corresponding to the neutral position of the servo.
            <para>
              The duration is specified in microseconds, and the standard value is 1500 [us].
              This setting makes it possible to shift the range of use of the servo.
              Be aware that using a range higher than what is supported by the servo is
              likely to damage the servo. Remember to call the matching module
              <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the duration of the pulse corresponding to the neutral position of the servo
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YServoProxy.Neutral">
            <value>Duration in microseconds of a neutral pulse for the servo.</value>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.move(System.Int32,System.Int32)">
            <summary>
              Performs a smooth move at constant speed toward a given position.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="target">
              new position at the end of the move
            </param>
            <param name="ms_duration">
              total duration of the move, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.get_positionAtPowerOn">
            <summary>
              Returns the servo position at device power up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the servo position at device power up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.POSITIONATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.set_positionAtPowerOn(System.Int32)">
            <summary>
              Configure the servo position at device power up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YServoProxy.PositionAtPowerOn">
            <value>Servo position at device power up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.get_enabledAtPowerOn">
            <summary>
              Returns the servo signal generator state at power up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YServo.ENABLEDATPOWERON_FALSE</c> or <c>YServo.ENABLEDATPOWERON_TRUE</c>, according to
              the servo signal generator state at power up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YServo.ENABLEDATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YServoProxy.set_enabledAtPowerOn(System.Int32)">
            <summary>
              Configure the servo signal generator state at power up.
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YServo.ENABLEDATPOWERON_FALSE</c> or <c>YServo.ENABLEDATPOWERON_TRUE</c>
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YServoProxy.EnabledAtPowerOn">
            <value>Servo signal generator state at power up.</value>
        </member>
        <member name="T:YoctoProxyAPI.YSpiPortProxy">
            <summary>
              The <c>YSpiPort</c> class allows you to fully drive a Yoctopuce SPI port.
            <para>
              It can be used to send and receive data, and to configure communication
              parameters (baud rate, bit count, parity, flow control and protocol).
              Note that Yoctopuce SPI ports are not exposed as virtual COM ports.
              They are meant to be used in the same way as all Yoctopuce devices.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.FindSpiPort(System.String)">
            <summary>
              Retrieves a SPI port for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the SPI port is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YSpiPort.isOnline()</c> to test if the SPI port is
              indeed online at a given time. In case of ambiguity when looking for
              a SPI port by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the SPI port, for instance
              <c>YSPIMK01.spiPort</c>.
            </param>
            <returns>
              a <c>YSpiPort</c> object allowing you to drive the SPI port.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type SpiPort available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YSpiPort.FindSpiPort</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_rxCount">
            <summary>
              Returns the total number of bytes received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.RXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_txCount">
            <summary>
              Returns the total number of bytes transmitted since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of bytes transmitted since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.TXCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_errCount">
            <summary>
              Returns the total number of communication errors detected since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of communication errors detected since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.ERRCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_rxMsgCount">
            <summary>
              Returns the total number of messages received since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages received since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.RXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_txMsgCount">
            <summary>
              Returns the total number of messages send since last reset.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the total number of messages send since last reset
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.TXMSGCOUNT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_lastMsg">
            <summary>
              Returns the latest message fully received (for Line and Frame protocols).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest message fully received (for Line and Frame protocols)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.LASTMSG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_currentJob">
            <summary>
              Returns the name of the job file currently in use.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the name of the job file currently in use
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.CURRENTJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_currentJob(System.String)">
            <summary>
              Selects a job file to run immediately.
            <para>
              If an empty string is
              given as argument, stops running current job file.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_startupJob">
            <summary>
              Returns the job file to use when the device is powered on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the job file to use when the device is powered on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.STARTUPJOB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_startupJob(System.String)">
            <summary>
              Changes the job to use when the device is powered on.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the job to use when the device is powered on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.StartupJob">
            <value>Job file to use when the device is powered on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_jobMaxTask">
            <summary>
              Returns the maximum number of tasks in a job that the device can handle.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum number of tasks in a job that the device can handle
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.JOBMAXTASK_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.JobMaxTask">
            <value>Maximum number of tasks in a job that the device can handle.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_jobMaxSize">
            <summary>
              Returns maximum size allowed for job files.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to maximum size allowed for job files
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.JOBMAXSIZE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.JobMaxSize">
            <value>Maximum size allowed for job files.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_protocol">
            <summary>
              Returns the type of protocol used over the serial line, as a string.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the type of protocol used over the serial line, as a string
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.PROTOCOL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_protocol(System.String)">
            <summary>
              Changes the type of protocol used over the serial line.
            <para>
              Possible values are "Line" for ASCII messages separated by CR and/or LF,
              "Frame:[timeout]ms" for binary messages separated by a delay time,
              "Char" for a continuous ASCII stream or
              "Byte" for a continuous binary stream.
              The suffix "/[wait]ms" can be added to reduce the transmit rate so that there
              is always at lest the specified number of milliseconds between each bytes sent.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the type of protocol used over the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.Protocol">
            <value>Type of protocol used over the serial line, as a string.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_voltageLevel">
            <summary>
              Returns the voltage level used on the serial line.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YSpiPort.VOLTAGELEVEL_OFF</c>, <c>YSpiPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSpiPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSpiPort.VOLTAGELEVEL_RS232</c>,
              <c>YSpiPort.VOLTAGELEVEL_RS485</c> and <c>YSpiPort.VOLTAGELEVEL_TTL1V8</c> corresponding to the
              voltage level used on the serial line
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.VOLTAGELEVEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_voltageLevel(System.Int32)">
            <summary>
              Changes the voltage type used on the serial line.
            <para>
              Valid
              values  will depend on the Yoctopuce device model featuring
              the serial port feature.  Check your device documentation
              to find out which values are valid for that specific model.
              Trying to set an invalid value will have no effect.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YSpiPort.VOLTAGELEVEL_OFF</c>, <c>YSpiPort.VOLTAGELEVEL_TTL3V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL3VR</c>, <c>YSpiPort.VOLTAGELEVEL_TTL5V</c>,
              <c>YSpiPort.VOLTAGELEVEL_TTL5VR</c>, <c>YSpiPort.VOLTAGELEVEL_RS232</c>,
              <c>YSpiPort.VOLTAGELEVEL_RS485</c> and <c>YSpiPort.VOLTAGELEVEL_TTL1V8</c> corresponding to the
              voltage type used on the serial line
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.VoltageLevel">
            <value>Voltage level used on the serial line.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_spiMode">
            <summary>
              Returns the SPI port communication parameters, as a string such as
              "125000,0,msb".
            <para>
              The string includes the baud rate, the SPI mode (between
              0 and 3) and the bit order.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the SPI port communication parameters, as a string such as
              "125000,0,msb"
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.SPIMODE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_spiMode(System.String)">
            <summary>
              Changes the SPI port communication parameters, with a string such as
              "125000,0,msb".
            <para>
              The string includes the baud rate, the SPI mode (between
              0 and 3) and the bit order.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the SPI port communication parameters, with a string such as
              "125000,0,msb"
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.SpiMode">
            <value>SPI port communication parameters, as a string such as</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_ssPolarity">
            <summary>
              Returns the SS line polarity.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YSpiPort.SSPOLARITY_ACTIVE_LOW</c> or <c>YSpiPort.SSPOLARITY_ACTIVE_HIGH</c>, according
              to the SS line polarity
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.SSPOLARITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_ssPolarity(System.Int32)">
            <summary>
              Changes the SS line polarity.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YSpiPort.SSPOLARITY_ACTIVE_LOW</c> or <c>YSpiPort.SSPOLARITY_ACTIVE_HIGH</c>, according
              to the SS line polarity
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.SsPolarity">
            <value>SS line polarity.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.get_shiftSampling">
            <summary>
              Returns true when the SDI line phase is shifted with regards to the SDO line.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YSpiPort.SHIFTSAMPLING_OFF</c> or <c>YSpiPort.SHIFTSAMPLING_ON</c>, according to true
              when the SDI line phase is shifted with regards to the SDO line
            </returns>
            <para>
              On failure, throws an exception or returns <c>YSpiPort.SHIFTSAMPLING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_shiftSampling(System.Int32)">
            <summary>
              Changes the SDI line sampling shift.
            <para>
              When disabled, SDI line is
              sampled in the middle of data output time. When enabled, SDI line is
              samples at the end of data output time.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YSpiPort.SHIFTSAMPLING_OFF</c> or <c>YSpiPort.SHIFTSAMPLING_ON</c>, according to the SDI
              line sampling shift
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YSpiPortProxy.ShiftSampling">
            <value>True when the SDI line phase is shifted with regards to the SDO line.</value>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.readLine">
            <summary>
              Reads a single line (or message) from the receive buffer, starting at current stream position.
            <para>
              This function is intended to be used when the serial port is configured for a message protocol,
              such as 'Line' mode or frame protocols.
            </para>
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              the function returns the oldest available line and moves the stream position just after.
              If no new full line is received, the function returns an empty line.
            </para>
            </summary>
            <returns>
              a string with a single line of text
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.readMessages(System.String,System.Int32)">
            <summary>
              Searches for incoming messages in the serial port receive buffer matching a given pattern,
              starting at current position.
            <para>
              This function will only compare and return printable characters
              in the message strings. Binary protocols are handled as hexadecimal strings.
            </para>
            <para>
              The search returns all messages matching the expression provided as argument in the buffer.
              If no matching message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="pattern">
              a limited regular expression describing the expected message format,
              or an empty string if all messages should be returned (no filtering).
              When using binary protocols, the format applies to the hexadecimal
              representation of the message.
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of strings containing the messages found, if any.
              Binary messages are converted to hexadecimal representation.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.read_seek(System.Int32)">
            <summary>
              Changes the current internal stream position to the specified value.
            <para>
              This function
              does not affect the device, it only changes the value stored in the API object
              for the next read operations.
            </para>
            </summary>
            <param name="absPos">
              the absolute position index for next read operations.
            </param>
            <returns>
              nothing.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.read_tell">
            <summary>
              Returns the current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the absolute position index for next read operations.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.read_avail">
            <summary>
              Returns the number of bytes available to read in the input buffer starting from the
              current absolute stream position pointer of the API object.
            <para>
            </para>
            </summary>
            <returns>
              the number of bytes available to read
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.queryLine(System.String,System.Int32)">
            <summary>
              Sends a text line query to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for 'Line' protocol.
            </para>
            </summary>
            <param name="query">
              the line query to send (without CR/LF)
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next text line received after sending the text query, as a string.
              Additional lines can be obtained by calling readLine or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.queryHex(System.String,System.Int32)">
            <summary>
              Sends a binary message to the serial port, and reads the reply, if any.
            <para>
              This function is intended to be used when the serial port is configured for
              Frame-based protocol.
            </para>
            </summary>
            <param name="hexString">
              the message to send, coded in hexadecimal
            </param>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a reply.
            </param>
            <returns>
              the next frame received after sending the message, as a hex string.
              Additional frames can be obtained by calling readHex or readMessages.
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.uploadJob(System.String,System.String)">
            <summary>
              Saves the job definition string (JSON data) into a job file.
            <para>
              The job file can be later enabled using <c>selectJob()</c>.
            </para>
            </summary>
            <param name="jobfile">
              name of the job file to save on the device filesystem
            </param>
            <param name="jsonDef">
              a string containing a JSON definition of the job
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.selectJob(System.String)">
            <summary>
              Load and start processing the specified job file.
            <para>
              The file must have
              been previously created using the user interface or uploaded on the
              device filesystem using the <c>uploadJob()</c> function.
            </para>
            <para>
            </para>
            </summary>
            <param name="jobfile">
              name of the job file (on the device filesystem)
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.reset">
            <summary>
              Clears the serial port buffer and resets counters to zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.writeByte(System.Int32)">
            <summary>
              Sends a single byte to the serial port.
            <para>
            </para>
            </summary>
            <param name="code">
              the byte to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.writeStr(System.String)">
            <summary>
              Sends an ASCII string to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.writeBin(System.Byte[])">
            <summary>
              Sends a binary buffer to the serial port, as is.
            <para>
            </para>
            </summary>
            <param name="buff">
              the binary buffer to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.writeArray(System.Int32[])">
            <summary>
              Sends a byte sequence (provided as a list of bytes) to the serial port.
            <para>
            </para>
            </summary>
            <param name="byteList">
              a list of byte codes
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.writeHex(System.String)">
            <summary>
              Sends a byte sequence (provided as a hexadecimal string) to the serial port.
            <para>
            </para>
            </summary>
            <param name="hexString">
              a string of hexadecimal byte codes
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.writeLine(System.String)">
            <summary>
              Sends an ASCII string to the serial port, followed by a line break (CR LF).
            <para>
            </para>
            </summary>
            <param name="text">
              the text string to send
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.readByte">
            <summary>
              Reads one byte from the receive buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer,
              or if there is no data available yet, the function returns YAPI.NO_MORE_DATA.
            </para>
            </summary>
            <returns>
              the next byte
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.readStr(System.Int32)">
            <summary>
              Reads data from the receive buffer as a string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of characters to read
            </param>
            <returns>
              a string with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.readBin(System.Int32)">
            <summary>
              Reads data from the receive buffer as a binary buffer, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a binary object with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.readArray(System.Int32)">
            <summary>
              Reads data from the receive buffer as a list of bytes, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nChars">
              the maximum number of bytes to read
            </param>
            <returns>
              a sequence of bytes with receive buffer contents
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.readHex(System.Int32)">
            <summary>
              Reads data from the receive buffer as a hexadecimal string, starting at current stream position.
            <para>
              If data at current stream position is not available anymore in the receive buffer, the
              function performs a short read.
            </para>
            </summary>
            <param name="nBytes">
              the maximum number of bytes to read
            </param>
            <returns>
              a string with receive buffer contents, encoded in hexadecimal
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.set_SS(System.Int32)">
            <summary>
              Manually sets the state of the SS line.
            <para>
              This function has no effect when
              the SS line is handled automatically.
            </para>
            </summary>
            <param name="val">
              1 to turn SS active, 0 to release SS.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSpiPortProxy.snoopMessages(System.Int32)">
            <summary>
              Retrieves messages (both direction) in the SPI port buffer, starting at current position.
            <para>
            </para>
            <para>
              If no message is found, the search waits for one up to the specified maximum timeout
              (in milliseconds).
            </para>
            </summary>
            <param name="maxWait">
              the maximum number of milliseconds to wait for a message if none is found
              in the receive buffer.
            </param>
            <returns>
              an array of <c>YSpiSnoopingRecord</c> objects containing the messages found, if any.
            </returns>
            <para>
              On failure, throws an exception or returns an empty array.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YStepperMotorProxy">
            <summary>
              The <c>YStepperMotor</c> class allows you to drive a stepper motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.FindStepperMotor(System.String)">
            <summary>
              Retrieves a stepper motor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the stepper motor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YStepperMotor.isOnline()</c> to test if the stepper motor is
              indeed online at a given time. In case of ambiguity when looking for
              a stepper motor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the stepper motor, for instance
              <c>MyDevice.stepperMotor1</c>.
            </param>
            <returns>
              a <c>YStepperMotor</c> object allowing you to drive the stepper motor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type StepperMotor available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YStepperMotor.FindStepperMotor</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_motorState">
            <summary>
              Returns the motor working state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YStepperMotor.MOTORSTATE_ABSENT</c>, <c>YStepperMotor.MOTORSTATE_ALERT</c>,
              <c>YStepperMotor.MOTORSTATE_HI_Z</c>, <c>YStepperMotor.MOTORSTATE_STOP</c>,
              <c>YStepperMotor.MOTORSTATE_RUN</c> and <c>YStepperMotor.MOTORSTATE_BATCH</c> corresponding to the
              motor working state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.MOTORSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_diags">
            <summary>
              Returns the stepper motor controller diagnostics, as a bitmap.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the stepper motor controller diagnostics, as a bitmap
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.DIAGS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_stepPos(System.Double)">
            <summary>
              Changes the current logical motor position, measured in steps.
            <para>
              This command does not cause any motor move, as its purpose is only to setup
              the origin of the position counter. The fractional part of the position,
              that corresponds to the physical position of the rotor, is not changed.
              To trigger a motor move, use methods <c>moveTo()</c> or <c>moveRel()</c>
              instead.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the current logical motor position, measured in steps
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_stepPos">
            <summary>
              Returns the current logical motor position, measured in steps.
            <para>
              The value may include a fractional part when micro-stepping is in use.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current logical motor position, measured in steps
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.STEPPOS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_speed">
            <summary>
              Returns current motor speed, measured in steps per second.
            <para>
              To change speed, use method <c>changeSpeed()</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to current motor speed, measured in steps per second
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.SPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_pullinSpeed(System.Double)">
            <summary>
              Changes the motor speed immediately reachable from stop state, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the motor speed immediately reachable from stop state,
              measured in steps per second
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_pullinSpeed">
            <summary>
              Returns the motor speed immediately reachable from stop state, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the motor speed immediately reachable from stop state,
              measured in steps per second
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.PULLINSPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_maxAccel(System.Double)">
            <summary>
              Changes the maximal motor acceleration, measured in steps per second^2.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the maximal motor acceleration, measured in steps per second^2
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_maxAccel">
            <summary>
              Returns the maximal motor acceleration, measured in steps per second^2.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the maximal motor acceleration, measured in steps per second^2
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.MAXACCEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_maxSpeed(System.Double)">
            <summary>
              Changes the maximal motor speed, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the maximal motor speed, measured in steps per second
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_maxSpeed">
            <summary>
              Returns the maximal motor speed, measured in steps per second.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the maximal motor speed, measured in steps per second
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.MAXSPEED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_stepping">
            <summary>
              Returns the stepping mode used to drive the motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YStepperMotor.STEPPING_MICROSTEP16</c>, <c>YStepperMotor.STEPPING_MICROSTEP8</c>,
              <c>YStepperMotor.STEPPING_MICROSTEP4</c>, <c>YStepperMotor.STEPPING_HALFSTEP</c> and
              <c>YStepperMotor.STEPPING_FULLSTEP</c> corresponding to the stepping mode used to drive the motor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.STEPPING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_stepping(System.Int32)">
            <summary>
              Changes the stepping mode used to drive the motor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YStepperMotor.STEPPING_MICROSTEP16</c>, <c>YStepperMotor.STEPPING_MICROSTEP8</c>,
              <c>YStepperMotor.STEPPING_MICROSTEP4</c>, <c>YStepperMotor.STEPPING_HALFSTEP</c> and
              <c>YStepperMotor.STEPPING_FULLSTEP</c> corresponding to the stepping mode used to drive the motor
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_overcurrent">
            <summary>
              Returns the overcurrent alert and emergency stop threshold, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the overcurrent alert and emergency stop threshold, measured in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.OVERCURRENT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_overcurrent(System.Int32)">
            <summary>
              Changes the overcurrent alert and emergency stop threshold, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the overcurrent alert and emergency stop threshold, measured in mA
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_tCurrStop">
            <summary>
              Returns the torque regulation current when the motor is stopped, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the torque regulation current when the motor is stopped, measured in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.TCURRSTOP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_tCurrStop(System.Int32)">
            <summary>
              Changes the torque regulation current when the motor is stopped, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the torque regulation current when the motor is stopped, measured in mA
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_tCurrRun">
            <summary>
              Returns the torque regulation current when the motor is running, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the torque regulation current when the motor is running, measured in mA
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.TCURRRUN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_tCurrRun(System.Int32)">
            <summary>
              Changes the torque regulation current when the motor is running, measured in mA.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the torque regulation current when the motor is running, measured in mA
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.get_auxSignal">
            <summary>
              Returns the current value of the signal generated on the auxiliary output.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the current value of the signal generated on the auxiliary output
            </returns>
            <para>
              On failure, throws an exception or returns <c>YStepperMotor.AUXSIGNAL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.set_auxSignal(System.Int32)">
            <summary>
              Changes the value of the signal generated on the auxiliary output.
            <para>
              Acceptable values depend on the auxiliary output signal type configured.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the value of the signal generated on the auxiliary output
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.reset">
            <summary>
              Reinitialize the controller and clear all alert flags.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.findHomePosition(System.Double)">
            <summary>
              Starts the motor backward at the specified speed, to search for the motor home position.
            <para>
            </para>
            </summary>
            <param name="speed">
              desired speed, in steps per second.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.changeSpeed(System.Double)">
            <summary>
              Starts the motor at a given speed.
            <para>
              The time needed to reach the requested speed
              will depend on the acceleration parameters configured for the motor.
            </para>
            </summary>
            <param name="speed">
              desired speed, in steps per second. The minimal non-zero speed
              is 0.001 pulse per second.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.moveTo(System.Double)">
            <summary>
              Starts the motor to reach a given absolute position.
            <para>
              The time needed to reach the requested
              position will depend on the acceleration and max speed parameters configured for
              the motor.
            </para>
            </summary>
            <param name="absPos">
              absolute position, measured in steps from the origin.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.moveRel(System.Double)">
            <summary>
              Starts the motor to reach a given relative position.
            <para>
              The time needed to reach the requested
              position will depend on the acceleration and max speed parameters configured for
              the motor.
            </para>
            </summary>
            <param name="relPos">
              relative position, measured in steps from the current position.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.moveRelSlow(System.Double,System.Double)">
            <summary>
              Starts the motor to reach a given relative position, keeping the speed under the
              specified limit.
            <para>
              The time needed to reach the requested position will depend on
              the acceleration parameters configured for the motor.
            </para>
            </summary>
            <param name="relPos">
              relative position, measured in steps from the current position.
            </param>
            <param name="maxSpeed">
              limit speed, in steps per second.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.pause(System.Int32)">
            <summary>
              Keep the motor in the same state for the specified amount of time, before processing next command.
            <para>
            </para>
            </summary>
            <param name="waitMs">
              wait time, specified in milliseconds.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.emergencyStop">
            <summary>
              Stops the motor with an emergency alert, without taking any additional precaution.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.alertStepOut">
            <summary>
              Move one step in the direction opposite the direction set when the most recent alert was raised.
            <para>
              The move occurs even if the system is still in alert mode (end switch depressed). Caution.
              use this function with great care as it may cause mechanical damages !
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.alertStepDir(System.Int32)">
            <summary>
              Move one single step in the selected direction without regards to end switches.
            <para>
              The move occurs even if the system is still in alert mode (end switch depressed). Caution.
              use this function with great care as it may cause mechanical damages !
            </para>
            </summary>
            <param name="dir">
              Value +1 or -1, according to the desired direction of the move
            </param>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.abortAndBrake">
            <summary>
              Stops the motor smoothly as soon as possible, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YStepperMotorProxy.abortAndHiZ">
            <summary>
              Turn the controller into Hi-Z mode immediately, without waiting for ongoing move completion.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YTemperatureProxy">
            <summary>
              The <c>YTemperature</c> class allows you to read and configure Yoctopuce temperature sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
              This class adds the ability to configure some specific parameters
              for some sensors (connection type, temperature mapping table).
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.FindTemperature(System.String)">
            <summary>
              Retrieves a temperature sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the temperature sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YTemperature.isOnline()</c> to test if the temperature sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a temperature sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the temperature sensor, for instance
              <c>METEOMK2.temperature</c>.
            </param>
            <returns>
              a <c>YTemperature</c> object allowing you to drive the temperature sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Temperature available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YTemperature.FindTemperature</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the measured temperature.
            <para>
              That unit is a string.
              If that strings end with the letter F all temperatures values will returned in
              Fahrenheit degrees. If that String ends with the letter K all values will be
              returned in Kelvin degrees. If that string ends with the letter C all values will be
              returned in Celsius degrees.  If the string ends with any other character the
              change will be ignored. Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
              WARNING: if a specific calibration is defined for the temperature function, a
              unit system change will probably break it.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the measured temperature
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.get_sensorType">
            <summary>
              Returns the temperature sensor type.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YTemperature.SENSORTYPE_DIGITAL</c>, <c>YTemperature.SENSORTYPE_TYPE_K</c>,
              <c>YTemperature.SENSORTYPE_TYPE_E</c>, <c>YTemperature.SENSORTYPE_TYPE_J</c>,
              <c>YTemperature.SENSORTYPE_TYPE_N</c>, <c>YTemperature.SENSORTYPE_TYPE_R</c>,
              <c>YTemperature.SENSORTYPE_TYPE_S</c>, <c>YTemperature.SENSORTYPE_TYPE_T</c>,
              <c>YTemperature.SENSORTYPE_PT100_4WIRES</c>, <c>YTemperature.SENSORTYPE_PT100_3WIRES</c>,
              <c>YTemperature.SENSORTYPE_PT100_2WIRES</c>, <c>YTemperature.SENSORTYPE_RES_OHM</c>,
              <c>YTemperature.SENSORTYPE_RES_NTC</c>, <c>YTemperature.SENSORTYPE_RES_LINEAR</c>,
              <c>YTemperature.SENSORTYPE_RES_INTERNAL</c>, <c>YTemperature.SENSORTYPE_IR</c>,
              <c>YTemperature.SENSORTYPE_RES_PT1000</c> and <c>YTemperature.SENSORTYPE_CHANNEL_OFF</c>
              corresponding to the temperature sensor type
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTemperature.SENSORTYPE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.set_sensorType(System.Int32)">
            <summary>
              Changes the temperature sensor type.
            <para>
              This function is used
              to define the type of thermocouple (K,E...) used with the device.
              It has no effect if module is using a digital sensor or a thermistor.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YTemperature.SENSORTYPE_DIGITAL</c>, <c>YTemperature.SENSORTYPE_TYPE_K</c>,
              <c>YTemperature.SENSORTYPE_TYPE_E</c>, <c>YTemperature.SENSORTYPE_TYPE_J</c>,
              <c>YTemperature.SENSORTYPE_TYPE_N</c>, <c>YTemperature.SENSORTYPE_TYPE_R</c>,
              <c>YTemperature.SENSORTYPE_TYPE_S</c>, <c>YTemperature.SENSORTYPE_TYPE_T</c>,
              <c>YTemperature.SENSORTYPE_PT100_4WIRES</c>, <c>YTemperature.SENSORTYPE_PT100_3WIRES</c>,
              <c>YTemperature.SENSORTYPE_PT100_2WIRES</c>, <c>YTemperature.SENSORTYPE_RES_OHM</c>,
              <c>YTemperature.SENSORTYPE_RES_NTC</c>, <c>YTemperature.SENSORTYPE_RES_LINEAR</c>,
              <c>YTemperature.SENSORTYPE_RES_INTERNAL</c>, <c>YTemperature.SENSORTYPE_IR</c>,
              <c>YTemperature.SENSORTYPE_RES_PT1000</c> and <c>YTemperature.SENSORTYPE_CHANNEL_OFF</c>
              corresponding to the temperature sensor type
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YTemperatureProxy.SensorType">
            <value>Temperature sensor type.</value>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.get_signalValue">
            <summary>
              Returns the current value of the electrical signal measured by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current value of the electrical signal measured by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTemperature.SIGNALVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.get_signalUnit">
            <summary>
              Returns the measuring unit of the electrical signal used by the sensor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the measuring unit of the electrical signal used by the sensor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTemperature.SIGNALUNIT_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YTemperatureProxy.SignalUnit">
            <value>Measuring unit of the electrical signal used by the sensor.</value>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.set_ntcParameters(System.Double,System.Double)">
            <summary>
              Configures NTC thermistor parameters in order to properly compute the temperature from
              the measured resistance.
            <para>
              For increased precision, you can enter a complete mapping
              table using set_thermistorResponseTable. This function can only be used with a
              temperature sensor based on thermistors.
            </para>
            <para>
            </para>
            </summary>
            <param name="res25">
              thermistor resistance at 25 degrees Celsius
            </param>
            <param name="beta">
              Beta value
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YTemperatureProxy.set_thermistorResponseTable(System.Double[],System.Double[])">
            <summary>
              Records a thermistor response table, in order to interpolate the temperature from
              the measured resistance.
            <para>
              This function can only be used with a temperature
              sensor based on thermistors.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all
              temperatures (in degrees Celsius) for which the resistance of the
              thermistor is specified.
            </param>
            <param name="resValues">
              array of floating point numbers, corresponding to the resistance
              values (in Ohms) for each of the temperature included in the first
              argument, index by index.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YTiltProxy">
            <summary>
              The <c>YSensor</c> class is the parent class for all Yoctopuce sensor types.
            <para>
              It can be
              used to read the current value and unit of any sensor, read the min/max
              value, configure autonomous recording frequency and access recorded data.
              It also provide a function to register a callback invoked each time the
              observed value changes, or at a predefined interval. Using this class rather
              than a specific subclass makes it possible to create generic applications
              that work with any Yoctopuce sensor, even those that do not yet exist.
              Note: The <c>YAnButton</c> class is the only analog input which does not inherit
              from <c>YSensor</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YTiltProxy.FindTilt(System.String)">
            <summary>
              Retrieves a tilt sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the tilt sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YTilt.isOnline()</c> to test if the tilt sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a tilt sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the tilt sensor, for instance
              <c>Y3DMK002.tilt1</c>.
            </param>
            <returns>
              a <c>YTilt</c> object allowing you to drive the tilt sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YTiltProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Tilt available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YTilt.FindTilt</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YTiltProxy.get_bandwidth">
            <summary>
              Returns the measure update frequency, measured in Hz.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the measure update frequency, measured in Hz
            </returns>
            <para>
              On failure, throws an exception or returns <c>YTilt.BANDWIDTH_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YTiltProxy.set_bandwidth(System.Int32)">
            <summary>
              Changes the measure update frequency, measured in Hz.
            <para>
              When the
              frequency is lower, the device performs averaging.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the measure update frequency, measured in Hz
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YTiltProxy.Bandwidth">
            <value>Measure update frequency, measured in Hz.</value>
        </member>
        <member name="M:YoctoProxyAPI.YTiltProxy.calibrateToZero">
            <summary>
              Performs a zero calibration for the tilt measurement (Yocto-Inclinometer only).
            <para>
              When this method is invoked, a simple shift (translation)
              is applied so that the current position is reported as a zero angle.
              Be aware that this shift will also affect the measurement boundaries.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YTiltProxy.restoreZeroCalibration">
            <summary>
              Cancels any previous zero calibration for the tilt measurement (Yocto-Inclinometer only).
            <para>
              This function restores the factory zero calibration.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YTvocProxy">
            <summary>
              The <c>YTvoc</c> class allows you to read and configure Yoctopuce Total Volatile Organic Compound sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YTvocProxy.FindTvoc(System.String)">
            <summary>
              Retrieves a Total  Volatile Organic Compound sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the Total  Volatile Organic Compound sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YTvoc.isOnline()</c> to test if the Total  Volatile Organic Compound sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a Total  Volatile Organic Compound sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the Total  Volatile Organic Compound sensor, for instance
              <c>YVOCMK03.tvoc</c>.
            </param>
            <returns>
              a <c>YTvoc</c> object allowing you to drive the Total  Volatile Organic Compound sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YTvocProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Tvoc available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YTvoc.FindTvoc</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YVocProxy">
            <summary>
              The <c>YVoc</c> class allows you to read and configure Yoctopuce Volatile Organic Compound sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YVocProxy.FindVoc(System.String)">
            <summary>
              Retrieves a Volatile Organic Compound sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the Volatile Organic Compound sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YVoc.isOnline()</c> to test if the Volatile Organic Compound sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a Volatile Organic Compound sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the Volatile Organic Compound sensor, for instance
              <c>YVOCMK03.voc</c>.
            </param>
            <returns>
              a <c>YVoc</c> object allowing you to drive the Volatile Organic Compound sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YVocProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Voc available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YVoc.FindVoc</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YVoltageProxy">
            <summary>
              The <c>YVoltage</c> class allows you to read and configure Yoctopuce voltage sensors.
            <para>
              It inherits from <c>YSensor</c> class the core functions to read measurements,
              to register callback functions, and to access the autonomous datalogger.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageProxy.FindVoltage(System.String)">
            <summary>
              Retrieves a voltage sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the voltage sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YVoltage.isOnline()</c> to test if the voltage sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a voltage sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the voltage sensor, for instance
              <c>MOTORCTL.voltage</c>.
            </param>
            <returns>
              a <c>YVoltage</c> object allowing you to drive the voltage sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Voltage available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YVoltage.FindVoltage</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageProxy.get_enabled">
            <summary>
              Returns the activation state of this input.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YVoltage.ENABLED_FALSE</c> or <c>YVoltage.ENABLED_TRUE</c>, according to the activation
              state of this input
            </returns>
            <para>
              On failure, throws an exception or returns <c>YVoltage.ENABLED_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageProxy.set_enabled(System.Int32)">
            <summary>
              Changes the activation state of this voltage input.
            <para>
              When AC measurements are disabled,
              the device will always assume a DC signal, and vice-versa. When both AC and DC measurements
              are active, the device switches between AC and DC mode based on the relative amplitude
              of variations compared to the average value.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YVoltage.ENABLED_FALSE</c> or <c>YVoltage.ENABLED_TRUE</c>, according to the activation
              state of this voltage input
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YVoltageProxy.Enabled">
            <value>Activation state of this input.</value>
        </member>
        <member name="T:YoctoProxyAPI.YVoltageOutputProxy">
            <summary>
              The <c>YVoltageOutput</c> class allows you to drive a voltage output.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageOutputProxy.FindVoltageOutput(System.String)">
            <summary>
              Retrieves a voltage output for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the voltage output is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YVoltageOutput.isOnline()</c> to test if the voltage output is
              indeed online at a given time. In case of ambiguity when looking for
              a voltage output by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the voltage output, for instance
              <c>TX010V01.voltageOutput1</c>.
            </param>
            <returns>
              a <c>YVoltageOutput</c> object allowing you to drive the voltage output.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageOutputProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type VoltageOutput available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YVoltageOutput.FindVoltageOutput</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageOutputProxy.set_currentVoltage(System.Double)">
            <summary>
              Changes the output voltage, in V.
            <para>
              Valid range is from 0 to 10V.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the output voltage, in V
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageOutputProxy.get_currentVoltage">
            <summary>
              Returns the output voltage set point, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the output voltage set point, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YVoltageOutput.CURRENTVOLTAGE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YVoltageOutputProxy.CurrentVoltage">
            <value>Output voltage set point, in V.</value>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageOutputProxy.set_voltageAtStartUp(System.Double)">
            <summary>
              Changes the output voltage at device start up.
            <para>
              Remember to call the matching
              module <c>saveToFlash()</c> method, otherwise this call has no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the output voltage at device start up
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageOutputProxy.get_voltageAtStartUp">
            <summary>
              Returns the selected voltage output at device startup, in V.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the selected voltage output at device startup, in V
            </returns>
            <para>
              On failure, throws an exception or returns <c>YVoltageOutput.VOLTAGEATSTARTUP_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YVoltageOutputProxy.VoltageAtStartUp">
            <value>Selected voltage output at device startup, in V.</value>
        </member>
        <member name="M:YoctoProxyAPI.YVoltageOutputProxy.voltageMove(System.Double,System.Int32)">
            <summary>
              Performs a smooth transition of output voltage.
            <para>
              Any explicit voltage
              change cancels any ongoing transition process.
            </para>
            </summary>
            <param name="V_target">
              new output voltage value at the end of the transition
              (floating-point number, representing the end voltage in V)
            </param>
            <param name="ms_duration">
              total duration of the transition, in milliseconds
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YWakeUpMonitorProxy">
            <summary>
              The <c>YWakeUpMonitor</c> class handles globally all wake-up sources, as well
              as automated sleep mode.
            <para>
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.FindWakeUpMonitor(System.String)">
            <summary>
              Retrieves a wake-up monitor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the wake-up monitor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWakeUpMonitor.isOnline()</c> to test if the wake-up monitor is
              indeed online at a given time. In case of ambiguity when looking for
              a wake-up monitor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the wake-up monitor, for instance
              <c>YHUBGSM3.wakeUpMonitor</c>.
            </param>
            <returns>
              a <c>YWakeUpMonitor</c> object allowing you to drive the wake-up monitor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type WakeUpMonitor available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YWakeUpMonitor.FindWakeUpMonitor</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.get_powerDuration">
            <summary>
              Returns the maximal wake up time (in seconds) before automatically going to sleep.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximal wake up time (in seconds) before automatically going to sleep
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.POWERDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.set_powerDuration(System.Int32)">
            <summary>
              Changes the maximal wake up time (seconds) before automatically going to sleep.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximal wake up time (seconds) before automatically going to sleep
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpMonitorProxy.PowerDuration">
            <value>Maximal wake up time (in seconds) before automatically going to sleep.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.get_sleepCountdown">
            <summary>
              Returns the delay before the  next sleep period.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the delay before the  next sleep period
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.SLEEPCOUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.set_sleepCountdown(System.Int32)">
            <summary>
              Changes the delay before the next sleep period.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the delay before the next sleep period
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.get_nextWakeUp">
            <summary>
              Returns the next scheduled wake up date/time (UNIX format).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the next scheduled wake up date/time (UNIX format)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.NEXTWAKEUP_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.set_nextWakeUp(System.Int64)">
            <summary>
              Changes the days of the week when a wake up must take place.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the days of the week when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpMonitorProxy.NextWakeUp">
            <value>Next scheduled wake up date/time (UNIX format).</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.get_wakeUpReason">
            <summary>
              Returns the latest wake up reason.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWakeUpMonitor.WAKEUPREASON_USBPOWER</c>, <c>YWakeUpMonitor.WAKEUPREASON_EXTPOWER</c>,
              <c>YWakeUpMonitor.WAKEUPREASON_ENDOFSLEEP</c>, <c>YWakeUpMonitor.WAKEUPREASON_EXTSIG1</c>,
              <c>YWakeUpMonitor.WAKEUPREASON_SCHEDULE1</c> and <c>YWakeUpMonitor.WAKEUPREASON_SCHEDULE2</c>
              corresponding to the latest wake up reason
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.WAKEUPREASON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.get_wakeUpState">
            <summary>
              Returns  the current state of the monitor.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWakeUpMonitor.WAKEUPSTATE_SLEEPING</c> or <c>YWakeUpMonitor.WAKEUPSTATE_AWAKE</c>,
              according to  the current state of the monitor
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpMonitor.WAKEUPSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.wakeUp">
            <summary>
              Forces a wake up.
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.sleep(System.Int32)">
            <summary>
              Goes to sleep until the next wake up condition is met,  the
              RTC time must have been set before calling this function.
            <para>
            </para>
            </summary>
            <param name="secBeforeSleep">
              number of seconds before going into sleep mode,
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.sleepFor(System.Int32,System.Int32)">
            <summary>
              Goes to sleep for a specific duration or until the next wake up condition is met, the
              RTC time must have been set before calling this function.
            <para>
              The count down before sleep
              can be canceled with resetSleepCountDown.
            </para>
            </summary>
            <param name="secUntilWakeUp">
              number of seconds before next wake up
            </param>
            <param name="secBeforeSleep">
              number of seconds before going into sleep mode
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.sleepUntil(System.Int32,System.Int32)">
            <summary>
              Go to sleep until a specific date is reached or until the next wake up condition is met, the
              RTC time must have been set before calling this function.
            <para>
              The count down before sleep
              can be canceled with resetSleepCountDown.
            </para>
            </summary>
            <param name="wakeUpTime">
              wake-up datetime (UNIX format)
            </param>
            <param name="secBeforeSleep">
              number of seconds before going into sleep mode
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpMonitorProxy.resetSleepCountDown">
            <summary>
              Resets the sleep countdown.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
              On failure, throws an exception or returns a negative error code.
            </returns>
        </member>
        <member name="T:YoctoProxyAPI.YWakeUpScheduleProxy">
            <summary>
              The <c>YWakeUpSchedule</c> class implements a wake up condition.
            <para>
              The wake up time is
              specified as a set of months and/or days and/or hours and/or minutes when the
              wake up should happen.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.FindWakeUpSchedule(System.String)">
            <summary>
              Retrieves a wake up schedule for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the wake up schedule is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWakeUpSchedule.isOnline()</c> to test if the wake up schedule is
              indeed online at a given time. In case of ambiguity when looking for
              a wake up schedule by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the wake up schedule, for instance
              <c>YHUBGSM3.wakeUpSchedule1</c>.
            </param>
            <returns>
              a <c>YWakeUpSchedule</c> object allowing you to drive the wake up schedule.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type WakeUpSchedule available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YWakeUpSchedule.FindWakeUpSchedule</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_minutesA">
            <summary>
              Returns the minutes in the 00-29 interval of each hour scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minutes in the 00-29 interval of each hour scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MINUTESA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.set_minutesA(System.Int32)">
            <summary>
              Changes the minutes in the 00-29 interval when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minutes in the 00-29 interval when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpScheduleProxy.MinutesA">
            <value>Minutes in the 00-29 interval of each hour scheduled for wake up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_minutesB">
            <summary>
              Returns the minutes in the 30-59 interval of each hour scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the minutes in the 30-59 interval of each hour scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MINUTESB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.set_minutesB(System.Int32)">
            <summary>
              Changes the minutes in the 30-59 interval when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the minutes in the 30-59 interval when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpScheduleProxy.MinutesB">
            <value>Minutes in the 30-59 interval of each hour scheduled for wake up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_hours">
            <summary>
              Returns the hours scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the hours scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.HOURS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.set_hours(System.Int32)">
            <summary>
              Changes the hours when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the hours when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpScheduleProxy.Hours">
            <value>Hours scheduled for wake up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_weekDays">
            <summary>
              Returns the days of the week scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the days of the week scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.WEEKDAYS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.set_weekDays(System.Int32)">
            <summary>
              Changes the days of the week when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the days of the week when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpScheduleProxy.WeekDays">
            <value>Days of the week scheduled for wake up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_monthDays">
            <summary>
              Returns the days of the month scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the days of the month scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MONTHDAYS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.set_monthDays(System.Int32)">
            <summary>
              Changes the days of the month when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the days of the month when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpScheduleProxy.MonthDays">
            <value>Days of the month scheduled for wake up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_months">
            <summary>
              Returns the months scheduled for wake up.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the months scheduled for wake up
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.MONTHS_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.set_months(System.Int32)">
            <summary>
              Changes the months when a wake up must take place.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the months when a wake up must take place
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpScheduleProxy.Months">
            <value>Months scheduled for wake up.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_nextOccurence">
            <summary>
              Returns the date/time (seconds) of the next wake up occurrence.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the date/time (seconds) of the next wake up occurrence
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWakeUpSchedule.NEXTOCCURENCE_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWakeUpScheduleProxy.NextOccurence">
            <value>Date/time (seconds) of the next wake up occurrence.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.get_minutes">
            <summary>
              Returns all the minutes of each hour that are scheduled for wake up.
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWakeUpScheduleProxy.set_minutes(System.Int64)">
            <summary>
              Changes all the minutes where a wake up must take place.
            <para>
            </para>
            </summary>
            <param name="bitmap">
              Minutes 00-59 of each hour scheduled for wake up.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YWatchdogProxy">
            <summary>
              The <c>YWatchdog</c> class allows you to drive a Yoctopuce watchdog.
            <para>
              A watchdog works like a relay, with an extra timer that can automatically
              trigger a brief power cycle to an appliance after a preset delay, to force this
              appliance to reset if a problem occurs. During normal use, the watchdog timer
              is reset periodically by the application to prevent the automated power cycle.
              Whenever the application dies, the watchdog will automatically trigger the power cycle.
              The watchdog can also be driven directly with <c>pulse</c> and <c>delayedPulse</c>
              methods to switch off an appliance for a given duration.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.FindWatchdog(System.String)">
            <summary>
              Retrieves a watchdog for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the watchdog is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWatchdog.isOnline()</c> to test if the watchdog is
              indeed online at a given time. In case of ambiguity when looking for
              a watchdog by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the watchdog, for instance
              <c>WDOGDC01.watchdog1</c>.
            </param>
            <returns>
              a <c>YWatchdog</c> object allowing you to drive the watchdog.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Watchdog available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YWatchdog.FindWatchdog</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_state">
            <summary>
              Returns the state of the watchdog (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.STATE_A</c> or <c>YWatchdog.STATE_B</c>, according to the state of the watchdog
              (A for the idle position, B for the active position)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.STATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_state(System.Int32)">
            <summary>
              Changes the state of the watchdog (A for the idle position, B for the active position).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.STATE_A</c> or <c>YWatchdog.STATE_B</c>, according to the state of the watchdog
              (A for the idle position, B for the active position)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.State">
            <value>State of the watchdog (A for the idle position, B for the active position).</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_stateAtPowerOn">
            <summary>
              Returns the state of the watchdog at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWatchdog.STATEATPOWERON_UNCHANGED</c>, <c>YWatchdog.STATEATPOWERON_A</c> and
              <c>YWatchdog.STATEATPOWERON_B</c> corresponding to the state of the watchdog at device startup (A
              for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.STATEATPOWERON_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_stateAtPowerOn(System.Int32)">
            <summary>
              Changes the state of the watchdog at device startup (A for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is).
            <para>
              Remember to call the matching module <c>saveToFlash()</c>
              method, otherwise this call will have no effect.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YWatchdog.STATEATPOWERON_UNCHANGED</c>, <c>YWatchdog.STATEATPOWERON_A</c> and
              <c>YWatchdog.STATEATPOWERON_B</c> corresponding to the state of the watchdog at device startup (A
              for the idle position,
              B for the active position, UNCHANGED to leave the relay state as is)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.StateAtPowerOn">
            <value>State of the watchdog at device startup (A for the idle position,</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_maxTimeOnStateA">
            <summary>
              Returns the maximum time (ms) allowed for the watchdog to stay in state
              A before automatically switching back in to B state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the maximum time (ms) allowed for the watchdog to stay in state
              A before automatically switching back in to B state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.MAXTIMEONSTATEA_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_maxTimeOnStateA(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the watchdog to stay in state A
              before automatically switching back in to B state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the watchdog to stay in state A
              before automatically switching back in to B state
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.MaxTimeOnStateA">
            <value>Maximum time (ms) allowed for the watchdog to stay in state</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_maxTimeOnStateB">
            <summary>
              Retourne the maximum time (ms) allowed for the watchdog to stay in state B
              before automatically switching back in to A state.
            <para>
              Zero means no time limit.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.MAXTIMEONSTATEB_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_maxTimeOnStateB(System.Int64)">
            <summary>
              Changes the maximum time (ms) allowed for the watchdog to stay in state B before
              automatically switching back in to A state.
            <para>
              Use zero for no time limit.
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the maximum time (ms) allowed for the watchdog to stay in state B before
              automatically switching back in to A state
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.MaxTimeOnStateB">
            <value>The maximum time (ms) allowed for the watchdog to stay in state B</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_output">
            <summary>
              Returns the output state of the watchdog, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.OUTPUT_OFF</c> or <c>YWatchdog.OUTPUT_ON</c>, according to the output state of
              the watchdog, when used as a simple switch (single throw)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.OUTPUT_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_output(System.Int32)">
            <summary>
              Changes the output state of the watchdog, when used as a simple switch (single throw).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.OUTPUT_OFF</c> or <c>YWatchdog.OUTPUT_ON</c>, according to the output state of
              the watchdog, when used as a simple switch (single throw)
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_pulseTimer">
            <summary>
              Returns the number of milliseconds remaining before the watchdog is returned to idle position
              (state A), during a measured pulse generation.
            <para>
              When there is no ongoing pulse, returns zero.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before the watchdog is returned to
              idle position
              (state A), during a measured pulse generation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.PULSETIMER_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.pulse(System.Int32)">
            <summary>
              Sets the relay to output B (active) for a specified duration, then brings it
              automatically back to output A (idle state).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.delayedPulse(System.Int32,System.Int32)">
            <summary>
              Schedules a pulse.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="ms_delay">
              waiting time before the pulse, in milliseconds
            </param>
            <param name="ms_duration">
              pulse duration, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_countdown">
            <summary>
              Returns the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the number of milliseconds remaining before a pulse (delayedPulse() call)
              When there is no scheduled pulse, returns zero
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.COUNTDOWN_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_autoStart">
            <summary>
              Returns the watchdog running state at module power on.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.AUTOSTART_OFF</c> or <c>YWatchdog.AUTOSTART_ON</c>, according to the watchdog
              running state at module power on
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.AUTOSTART_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_autoStart(System.Int32)">
            <summary>
              Changes the watchdog running state at module power on.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.AUTOSTART_OFF</c> or <c>YWatchdog.AUTOSTART_ON</c>, according to the watchdog
              running state at module power on
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.AutoStart">
            <value>Watchdog running state at module power on.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_running">
            <summary>
              Returns the watchdog running state.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              either <c>YWatchdog.RUNNING_OFF</c> or <c>YWatchdog.RUNNING_ON</c>, according to the watchdog running state
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.RUNNING_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_running(System.Int32)">
            <summary>
              Changes the running state of the watchdog.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              either <c>YWatchdog.RUNNING_OFF</c> or <c>YWatchdog.RUNNING_ON</c>, according to the running state
              of the watchdog
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.Running">
            <value>Watchdog running state.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.resetWatchdog">
            <summary>
              Resets the watchdog.
            <para>
              When the watchdog is running, this function
              must be called on a regular basis to prevent the watchdog to
              trigger
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_triggerDelay">
            <summary>
              Returns  the waiting duration before a reset is automatically triggered by the watchdog, in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to  the waiting duration before a reset is automatically triggered by the
              watchdog, in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.TRIGGERDELAY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_triggerDelay(System.Int64)">
            <summary>
              Changes the waiting delay before a reset is triggered by the watchdog,
              in milliseconds.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the waiting delay before a reset is triggered by the watchdog,
              in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.TriggerDelay">
            <value>Waiting duration before a reset is automatically triggered by the watchdog, in milliseconds.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.get_triggerDuration">
            <summary>
              Returns the duration of resets caused by the watchdog, in milliseconds.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the duration of resets caused by the watchdog, in milliseconds
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWatchdog.TRIGGERDURATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.set_triggerDuration(System.Int64)">
            <summary>
              Changes the duration of resets caused by the watchdog, in milliseconds.
            <para>
              Remember to call the <c>saveToFlash()</c>
              method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              an integer corresponding to the duration of resets caused by the watchdog, in milliseconds
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWatchdogProxy.TriggerDuration">
            <value>Duration of resets caused by the watchdog, in milliseconds.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWatchdogProxy.toggle">
            <summary>
              Switch the relay to the opposite state.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YWeighScaleProxy">
            <summary>
              The <c>YWeighScale</c> class provides a weight measurement from a ratiometric sensor.
            <para>
              It can be used to control the bridge excitation parameters, in order to avoid
              measure shifts caused by temperature variation in the electronics, and can also
              automatically apply an additional correction factor based on temperature to
              compensate for offsets in the load cell itself.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.FindWeighScale(System.String)">
            <summary>
              Retrieves a weighing scale sensor for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the weighing scale sensor is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWeighScale.isOnline()</c> to test if the weighing scale sensor is
              indeed online at a given time. In case of ambiguity when looking for
              a weighing scale sensor by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the weighing scale sensor, for instance
              <c>YWBRIDG1.weighScale1</c>.
            </param>
            <returns>
              a <c>YWeighScale</c> object allowing you to drive the weighing scale sensor.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type WeighScale available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YWeighScale.FindWeighScale</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_unit(System.String)">
            <summary>
              Changes the measuring unit for the weight.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the measuring unit for the weight
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.get_excitation">
            <summary>
              Returns the current load cell bridge excitation method.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWeighScale.EXCITATION_OFF</c>, <c>YWeighScale.EXCITATION_DC</c> and
              <c>YWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.EXCITATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_excitation(System.Int32)">
            <summary>
              Changes the current load cell bridge excitation method.
            <para>
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a value among <c>YWeighScale.EXCITATION_OFF</c>, <c>YWeighScale.EXCITATION_DC</c> and
              <c>YWeighScale.EXCITATION_AC</c> corresponding to the current load cell bridge excitation method
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWeighScaleProxy.Excitation">
            <value>Current load cell bridge excitation method.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_tempAvgAdaptRatio(System.Double)">
            <summary>
              Changes the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.get_tempAvgAdaptRatio">
            <summary>
              Returns the averaged temperature update rate, in per mille.
            <para>
              The purpose of this adaptation ratio is to model the thermal inertia of the load cell.
              The averaged temperature is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current compensation
              temperature. The standard rate is 0.2 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the averaged temperature update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.TEMPAVGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWeighScaleProxy.TempAvgAdaptRatio">
            <value>Averaged temperature update rate, in per mille.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_tempChgAdaptRatio(System.Double)">
            <summary>
              Changes the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the temperature change update rate, in per mille
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.get_tempChgAdaptRatio">
            <summary>
              Returns the temperature change update rate, in per mille.
            <para>
              The temperature change is updated every 10 seconds, by applying this adaptation rate
              to the difference between the measures ambient temperature and the current temperature used for
              change compensation. The standard rate is 0.6 per mille, and the maximal rate is 65 per mille.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the temperature change update rate, in per mille
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.TEMPCHGADAPTRATIO_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWeighScaleProxy.TempChgAdaptRatio">
            <value>Temperature change update rate, in per mille.</value>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.get_compTempAvg">
            <summary>
              Returns the current averaged temperature, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current averaged temperature, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.COMPTEMPAVG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.get_compTempChg">
            <summary>
              Returns the current temperature variation, used for thermal compensation.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current temperature variation, used for thermal compensation
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.COMPTEMPCHG_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.get_compensation">
            <summary>
              Returns the current current thermal compensation value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the current current thermal compensation value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.COMPENSATION_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_zeroTracking(System.Double)">
            <summary>
              Changes the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a floating point number corresponding to the zero tracking threshold value
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.get_zeroTracking">
            <summary>
              Returns the zero tracking threshold value.
            <para>
              When this threshold is larger than
              zero, any measure under the threshold will automatically be ignored and the
              zero compensation will be updated.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a floating point number corresponding to the zero tracking threshold value
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWeighScale.ZEROTRACKING_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWeighScaleProxy.ZeroTracking">
            <value>Zero tracking threshold value. When this threshold is larger than</value>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.tare">
            <summary>
              Adapts the load cell signal bias (stored in the corresponding genericSensor)
              so that the current signal corresponds to a zero weight.
            <para>
              Remember to call the
              <c>saveToFlash()</c> method of the module if the modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.setupSpan(System.Double,System.Double)">
            <summary>
              Configures the load cell span parameters (stored in the corresponding genericSensor)
              so that the current signal corresponds to the specified reference weight.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="currWeight">
              reference weight presently on the load cell.
            </param>
            <param name="maxWeight">
              maximum weight to be expected on the load cell.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_offsetAvgCompensationTable(System.Double[],System.Double[])">
            <summary>
              Records a weight offset thermal compensation table, in order to automatically correct the
              measured weight based on the averaged compensation temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all averaged
              temperatures for which an offset correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the offset correction
              to apply for each of the temperature included in the first
              argument, index by index.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_offsetChgCompensationTable(System.Double[],System.Double[])">
            <summary>
              Records a weight offset thermal compensation table, in order to automatically correct the
              measured weight based on the variation of temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to temperature
              variations for which an offset correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the offset correction
              to apply for each of the temperature variation included in the first
              argument, index by index.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_spanAvgCompensationTable(System.Double[],System.Double[])">
            <summary>
              Records a weight span thermal compensation table, in order to automatically correct the
              measured weight based on the compensation temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all averaged
              temperatures for which a span correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the span correction
              (in percents) to apply for each of the temperature included in the first
              argument, index by index.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWeighScaleProxy.set_spanChgCompensationTable(System.Double[],System.Double[])">
            <summary>
              Records a weight span thermal compensation table, in order to automatically correct the
              measured weight based on the variation of temperature.
            <para>
              The weight correction will be applied by linear interpolation between specified points.
            </para>
            <para>
            </para>
            </summary>
            <param name="tempValues">
              array of floating point numbers, corresponding to all variations of
              temperatures for which a span correction is specified.
            </param>
            <param name="compValues">
              array of floating point numbers, corresponding to the span correction
              (in percents) to apply for each of the temperature variation included
              in the first argument, index by index.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YWirelessProxy">
            <summary>
              The YWireless class provides control over wireless network parameters
              and status for devices that are wireless-enabled.
            <para>
              Note that TCP/IP parameters are configured separately, using class <c>YNetwork</c>.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.FindWireless(System.String)">
            <summary>
              Retrieves a wireless LAN interface for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the wireless LAN interface is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YWireless.isOnline()</c> to test if the wireless LAN interface is
              indeed online at a given time. In case of ambiguity when looking for
              a wireless LAN interface by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the wireless LAN interface, for instance
              <c>YHUBWLN1.wireless</c>.
            </param>
            <returns>
              a <c>YWireless</c> object allowing you to drive the wireless LAN interface.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.GetSimilarFunctions">
            <summary>
              Enumerates all functions of type Wireless available on the devices
              currently reachable by the library, and returns their unique hardware ID.
            <para>
              Each of these IDs can be provided as argument to the method
              <c>YWireless.FindWireless</c> to obtain an object that can control the
              corresponding device.
            </para>
            </summary>
            <returns>
              an array of strings, each string containing the unique hardwareId
              of a device function currently connected.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.get_linkQuality">
            <summary>
              Returns the link quality, expressed in percent.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the link quality, expressed in percent
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.LINKQUALITY_INVALID</c>.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YWirelessProxy.LinkQuality">
            <value>Link quality, expressed in percent.</value>
        </member>
        <member name="P:YoctoProxyAPI.YWirelessProxy.Ssid">
            <value>Wireless network name (SSID).</value>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.get_ssid">
            <summary>
              Returns the wireless network name (SSID).
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the wireless network name (SSID)
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.SSID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.get_channel">
            <summary>
              Returns the 802.11 channel currently used, or 0 when the selected network has not been found.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the 802.11 channel currently used, or 0 when the selected network has not been found
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.CHANNEL_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.get_security">
            <summary>
              Returns the security algorithm used by the selected wireless network.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWireless.SECURITY_UNKNOWN</c>, <c>YWireless.SECURITY_OPEN</c>,
              <c>YWireless.SECURITY_WEP</c>, <c>YWireless.SECURITY_WPA</c> and <c>YWireless.SECURITY_WPA2</c>
              corresponding to the security algorithm used by the selected wireless network
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.SECURITY_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.get_message">
            <summary>
              Returns the latest status message from the wireless interface.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the latest status message from the wireless interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.MESSAGE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.get_wlanState">
            <summary>
              Returns the current state of the wireless interface.
            <para>
              The state <c>YWireless.WLANSTATE_DOWN</c> means that the network interface is
              not connected to a network. The state <c>YWireless.WLANSTATE_SCANNING</c> means that the network
              interface is scanning available
              frequencies. During this stage, the device is not reachable, and the network settings are not yet
              applied. The state
              <c>YWireless.WLANSTATE_CONNECTED</c> means that the network settings have been successfully applied
              ant that the device is reachable
              from the wireless network. If the device is configured to use ad-hoc or Soft AP mode, it means that
              the wireless network
              is up and that other devices can join the network. The state <c>YWireless.WLANSTATE_REJECTED</c>
              means that the network interface has
              not been able to join the requested network. The description of the error can be obtain with the
              <c>get_message()</c> method.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a value among <c>YWireless.WLANSTATE_DOWN</c>, <c>YWireless.WLANSTATE_SCANNING</c>,
              <c>YWireless.WLANSTATE_CONNECTED</c> and <c>YWireless.WLANSTATE_REJECTED</c> corresponding to the
              current state of the wireless interface
            </returns>
            <para>
              On failure, throws an exception or returns <c>YWireless.WLANSTATE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.startWlanScan">
            <summary>
              Triggers a scan of the wireless frequency and builds the list of available networks.
            <para>
              The scan forces a disconnection from the current network. At then end of the process, the
              the network interface attempts to reconnect to the previous network. During the scan, the <c>wlanState</c>
              switches to <c>YWireless.WLANSTATE_DOWN</c>, then to <c>YWireless.WLANSTATE_SCANNING</c>. When the
              scan is completed,
              <c>get_wlanState()</c> returns either <c>YWireless.WLANSTATE_DOWN</c> or
              <c>YWireless.WLANSTATE_SCANNING</c>. At this
              point, the list of detected network can be retrieved with the <c>get_detectedWlans()</c> method.
            </para>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.joinNetwork(System.String,System.String)">
            <summary>
              Changes the configuration of the wireless lan interface to connect to an existing
              access point (infrastructure mode).
            <para>
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="ssid">
              the name of the network to connect to
            </param>
            <param name="securityKey">
              the network key, as a character string
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.adhocNetwork(System.String,System.String)">
            <summary>
              Changes the configuration of the wireless lan interface to create an ad-hoc
              wireless network, without using an access point.
            <para>
              On the YoctoHub-Wireless-g
              and YoctoHub-Wireless-n,
              you should use <c>softAPNetwork()</c> instead, which emulates an access point
              (Soft AP) which is more efficient and more widely supported than ad-hoc networks.
            </para>
            <para>
              When a security key is specified for an ad-hoc network, the network is protected
              by a WEP40 key (5 characters or 10 hexadecimal digits) or WEP128 key (13 characters
              or 26 hexadecimal digits). It is recommended to use a well-randomized WEP128 key
              using 26 hexadecimal digits to maximize security.
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module
              to apply this setting.
            </para>
            </summary>
            <param name="ssid">
              the name of the network to connect to
            </param>
            <param name="securityKey">
              the network key, as a character string
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.softAPNetwork(System.String,System.String)">
            <summary>
              Changes the configuration of the wireless lan interface to create a new wireless
              network by emulating a WiFi access point (Soft AP).
            <para>
              This function can only be
              used with the YoctoHub-Wireless-g and the YoctoHub-Wireless-n.
            </para>
            <para>
              On the YoctoHub-Wireless-g, when a security key is specified for a SoftAP network,
              the network is protected by a WEP40 key (5 characters or 10 hexadecimal digits) or
              WEP128 key (13 characters or 26 hexadecimal digits). It is recommended to use a
              well-randomized WEP128 key using 26 hexadecimal digits to maximize security.
            </para>
            <para>
              On the YoctoHub-Wireless-n, when a security key is specified for a SoftAP network,
              the network will be protected by WPA2.
            </para>
            <para>
              Remember to call the <c>saveToFlash()</c> method and then to reboot the module to apply this setting.
            </para>
            </summary>
            <param name="ssid">
              the name of the network to connect to
            </param>
            <param name="securityKey">
              the network key, as a character string
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YWirelessProxy.get_detectedWlans">
            <summary>
              Returns a list of <c>YWlanRecord</c> objects that describe detected Wireless networks.
            <para>
              This list is not updated when the module is already connected to an access point (infrastructure mode).
              To force an update of this list, <c>startWlanScan()</c> must be called.
              Note that an languages without garbage collections, the returned list must be freed by the caller.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a list of <c>YWlanRecord</c> objects, containing the SSID, channel,
              link quality and the type of security of the wireless network.
            </returns>
            <para>
              On failure, throws an exception or returns an empty list.
            </para>
        </member>
        <member name="T:YoctoProxyAPI.YFunctionProxy">
            <summary>
              This is the parent class for all public objects representing device functions documented in
              the high-level programming API.
            <para>
              This abstract class does all the real job, but without
              knowledge of the specific function attributes.
            </para>
            <para>
              Instantiating a child class of YFunction does not cause any communication.
              The instance simply keeps track of its function identifier, and will dynamically bind
              to a matching device at the time it is really being used to read or set an attribute.
              In order to allow true hot-plug replacement of one device by another, the binding stay
              dynamic through the life of the object.
            </para>
            <para>
              The YFunction class implements a generic high-level cache for the attribute values of
              the specified function, pre-parsed from the REST API string.
            </para>
            <para>
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.FindFunction(System.String)">
            <summary>
              Retrieves a function for a given identifier.
            <para>
              The identifier can be specified using several formats:
            </para>
            <para>
            </para>
            <para>
              - FunctionLogicalName
            </para>
            <para>
              - ModuleSerialNumber.FunctionIdentifier
            </para>
            <para>
              - ModuleSerialNumber.FunctionLogicalName
            </para>
            <para>
              - ModuleLogicalName.FunctionIdentifier
            </para>
            <para>
              - ModuleLogicalName.FunctionLogicalName
            </para>
            <para>
            </para>
            <para>
              This function does not require that the function is online at the time
              it is invoked. The returned object is nevertheless valid.
              Use the method <c>YFunction.isOnline()</c> to test if the function is
              indeed online at a given time. In case of ambiguity when looking for
              a function by logical name, no error is notified: the first instance
              found is returned. The search is performed first by hardware name,
              then by logical name.
            </para>
            <para>
              If a call to this object's is_online() method returns FALSE although
              you are certain that the matching device is plugged, make sure that you did
              call registerHub() at application initialization time.
            </para>
            <para>
            </para>
            </summary>
            <param name="func">
              a string that uniquely characterizes the function, for instance
              <c>MyDevice.</c>.
            </param>
            <returns>
              a <c>YFunction</c> object allowing you to drive the function.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.get_hardwareId">
            <summary>
              Returns the unique hardware identifier of the function in the form <c>SERIAL.FUNCTIONID</c>.
            <para>
              The unique hardware identifier is composed of the device serial
              number and of the hardware identifier of the function (for example <c>RELAYLO1-123456.relay1</c>).
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the function (ex: <c>RELAYLO1-123456.relay1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YFunction.HARDWAREID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.get_functionId">
            <summary>
              Returns the hardware identifier of the function, without reference to the module.
            <para>
              For example
              <c>relay1</c>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that identifies the function (ex: <c>relay1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YFunction.FUNCTIONID_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.get_friendlyName">
            <summary>
              Returns a global identifier of the function in the format <c>MODULE_NAME&#46;FUNCTION_NAME</c>.
            <para>
              The returned string uses the logical names of the module and of the function if they are defined,
              otherwise the serial number of the module and the hardware identifier of the function
              (for example: <c>MyCustomName.relay1</c>)
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string that uniquely identifies the function using logical names
              (ex: <c>MyCustomName.relay1</c>)
            </returns>
            <para>
              On failure, throws an exception or returns  <c>YFunction.FRIENDLYNAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.isOnline">
            <summary>
              Checks if the function is currently reachable, without raising any error.
            <para>
              If there is a cached value for the function in cache, that has not yet
              expired, the device is considered reachable.
              No exception is raised if there is an error while trying to contact the
              device hosting the function.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>true</c> if the function can be reached, and <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.get_module">
            <summary>
              Gets the <c>YModule</c> object for the device on which the function is located.
            <para>
              If the function cannot be located on any module, the returned instance of
              <c>YModule</c> is not shown as on-line.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an instance of <c>YModule</c>
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.GetSimilarFunctions">
            <summary>
              Enumère toutes les fonctions de type Function.
            <para>
              Returns an array of strings representing hardware identifiers for all Function functions presently connected.
            </para>
            </summary>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.get_logicalName">
            <summary>
              Returns the logical name of the function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the logical name of the function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFunction.LOGICALNAME_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.set_logicalName(System.String)">
            <summary>
              Changes the logical name of the function.
            <para>
              You can use <c>yCheckLogicalName()</c>
              prior to this call to make sure that your parameter is valid.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            <para>
            </para>
            </summary>
            <param name="newval">
              a string corresponding to the logical name of the function
            </param>
            <para>
            </para>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="P:YoctoProxyAPI.YFunctionProxy.LogicalName">
            <value>Logical name of the function.</value>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.get_advertisedValue">
            <summary>
              Returns a short string representing the current state of the function.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to a short string representing the current state of the function
            </returns>
            <para>
              On failure, throws an exception or returns <c>YFunction.ADVERTISEDVALUE_INVALID</c>.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.muteValueCallbacks">
            <summary>
              Disables the propagation of every new advertised value to the parent hub.
            <para>
              You can use this function to save bandwidth and CPU on computers with limited
              resources, or to prevent unwanted invocations of the HTTP callback.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.unmuteValueCallbacks">
            <summary>
              Re-enables the propagation of every new advertised value to the parent hub.
            <para>
              This function reverts the effect of a previous call to <c>muteValueCallbacks()</c>.
              Remember to call the <c>saveToFlash()</c> method of the module if the
              modification must be kept.
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.loadAttribute(System.String)">
            <summary>
              Returns the current value of a single function attribute, as a text string, as quickly as
              possible but without using the cached value.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <param name="attrName">
              the name of the requested attribute
            </param>
            <returns>
              a string with the value of the the attribute
            </returns>
            <para>
              On failure, throws an exception or returns an empty string.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.isReadOnly">
            <summary>
              Test if the function is readOnly.
            <para>
              Return <c>true</c> if the function is write protected
              or that the function is not available.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>true</c> if the function is readOnly or not online.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFunctionProxy.get_serialNumber">
            <summary>
              Returns the serial number of the module, as set by the factory.
            <para>
            </para>
            </summary>
            <returns>
              a string corresponding to the serial number of the module, as set by the factory.
            </returns>
            <para>
              On failure, throws an exception or returns YFunction.SERIALNUMBER_INVALID.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFirmwareUpdateProxy.GetAllBootLoaders">
            <summary>
              Returns a list of all the modules in "firmware update" mode.
            <para>
              Only devices
              connected over USB are listed. For devices connected to a YoctoHub, you
              must connect yourself to the YoctoHub web interface.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an array of strings containing the serial numbers of devices in "firmware update" mode.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFirmwareUpdateProxy.CheckFirmware(System.String,System.String,System.Int32)">
            <summary>
              Test if the byn file is valid for this module.
            <para>
              It is possible to pass a directory instead of a file.
              In that case, this method returns the path of the most recent appropriate byn file. This method will
              ignore any firmware older than minrelease.
            </para>
            <para>
            </para>
            </summary>
            <param name="serial">
              the serial number of the module to update
            </param>
            <param name="path">
              the path of a byn file or a directory that contains byn files
            </param>
            <param name="minrelease">
              a positive integer
            </param>
            <returns>
              : the path of the byn file to use, or an empty string if no byn files matches the requirement
            </returns>
            <para>
              On failure, returns a string that starts with "error:".
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFirmwareUpdateProxy.get_progress">
            <summary>
              Returns the progress of the firmware update, on a scale from 0 to 100.
            <para>
              When the object is
              instantiated, the progress is zero. The value is updated during the firmware update process until
              the value of 100 is reached. The 100 value means that the firmware update was completed
              successfully. If an error occurs during the firmware update, a negative value is returned, and the
              error message can be retrieved with <c>get_progressMessage</c>.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion)
              or a negative error code in case of failure.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFirmwareUpdateProxy.get_progressMessage">
            <summary>
              Returns the last progress message of the firmware update process.
            <para>
              If an error occurs during the
              firmware update process, the error message is returned
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string  with the latest progress message, or the error message.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFirmwareUpdateProxy.startUpdate">
            <summary>
              Starts the firmware update process.
            <para>
              This method starts the firmware update process in background. This method
              returns immediately. You can monitor the progress of the firmware update with the <c>get_progress()</c>
              and <c>get_progressMessage()</c> methods.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              an integer in the range 0 to 100 (percentage of completion),
              or a negative error code in case of failure.
            </returns>
            <para>
              On failure returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.reset">
            <summary>
              Reverts the layer to its initial state (fully transparent, default settings).
            <para>
              Reinitializes the drawing pointer to the upper left position,
              and selects the most visible pen color. If you only want to erase the layer
              content, use the method <c>clear()</c> instead.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.clear">
            <summary>
              Erases the whole content of the layer (makes it fully transparent).
            <para>
              This method does not change any other attribute of the layer.
              To reinitialize the layer attributes to defaults settings, use the method
              <c>reset()</c> instead.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.selectColorPen(System.Int32)">
            <summary>
              Selects the pen color for all subsequent drawing functions,
              including text drawing.
            <para>
              The pen color is provided as an RGB value.
              For grayscale or monochrome displays, the value is
              automatically converted to the proper range.
            </para>
            </summary>
            <param name="color">
              the desired pen color, as a 24-bit RGB value
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.selectGrayPen(System.Int32)">
            <summary>
              Selects the pen gray level for all subsequent drawing functions,
              including text drawing.
            <para>
              The gray level is provided as a number between
              0 (black) and 255 (white, or whichever the lightest color is).
              For monochrome displays (without gray levels), any value
              lower than 128 is rendered as black, and any value equal
              or above to 128 is non-black.
            </para>
            </summary>
            <param name="graylevel">
              the desired gray level, from 0 to 255
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.selectEraser">
            <summary>
              Selects an eraser instead of a pen for all subsequent drawing functions,
              except for bitmap copy functions.
            <para>
              Any point drawn using the eraser
              becomes transparent (as when the layer is empty), showing the other
              layers beneath it.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.setAntialiasingMode(System.Boolean)">
            <summary>
              Enables or disables anti-aliasing for drawing oblique lines and circles.
            <para>
              Anti-aliasing provides a smoother aspect when looked from far enough,
              but it can add fuzziness when the display is looked from very close.
              At the end of the day, it is your personal choice.
              Anti-aliasing is enabled by default on grayscale and color displays,
              but you can disable it if you prefer. This setting has no effect
              on monochrome displays.
            </para>
            </summary>
            <param name="mode">
              <c>true</c> to enable anti-aliasing, <c>false</c> to
              disable it.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawPixel(System.Int32,System.Int32)">
            <summary>
              Draws a single pixel at the specified position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer, in pixels
            </param>
            <param name="y">
              the distance from top of layer, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws an empty rectangle at a specified position.
            <para>
            </para>
            </summary>
            <param name="x1">
              the distance from left of layer to the left border of the rectangle, in pixels
            </param>
            <param name="y1">
              the distance from top of layer to the top border of the rectangle, in pixels
            </param>
            <param name="x2">
              the distance from left of layer to the right border of the rectangle, in pixels
            </param>
            <param name="y2">
              the distance from top of layer to the bottom border of the rectangle, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawBar(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws a filled rectangular bar at a specified position.
            <para>
            </para>
            </summary>
            <param name="x1">
              the distance from left of layer to the left border of the rectangle, in pixels
            </param>
            <param name="y1">
              the distance from top of layer to the top border of the rectangle, in pixels
            </param>
            <param name="x2">
              the distance from left of layer to the right border of the rectangle, in pixels
            </param>
            <param name="y2">
              the distance from top of layer to the bottom border of the rectangle, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawCircle(System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws an empty circle at a specified position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the center of the circle, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the center of the circle, in pixels
            </param>
            <param name="r">
              the radius of the circle, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawDisc(System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws a filled disc at a given position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the center of the disc, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the center of the disc, in pixels
            </param>
            <param name="r">
              the radius of the disc, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.selectFont(System.String)">
            <summary>
              Selects a font to use for the next text drawing functions, by providing the name of the
              font file.
            <para>
              You can use a built-in font as well as a font file that you have previously
              uploaded to the device built-in memory. If you experience problems selecting a font
              file, check the device logs for any error message such as missing font file or bad font
              file format.
            </para>
            </summary>
            <param name="fontname">
              the font file name, embedded fonts are 8x8.yfm, Small.yfm, Medium.yfm, Large.yfm (not available on
              Yocto-MiniDisplay).
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawText(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              Draws a text string at the specified position.
            <para>
              The point of the text that is aligned
              to the specified pixel position is called the anchor point, and can be chosen among
              several options. Text is rendered from left to right, without implicit wrapping.
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the text anchor point, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the text anchor point, in pixels
            </param>
            <param name="anchor">
              the text anchor point, chosen among the <c>YDisplayLayer.ALIGN</c> enumeration:
              <c>YDisplayLayer.ALIGN_TOP_LEFT</c>,         <c>YDisplayLayer.ALIGN_CENTER_LEFT</c>,
              <c>YDisplayLayer.ALIGN_BASELINE_LEFT</c>,    <c>YDisplayLayer.ALIGN_BOTTOM_LEFT</c>,
              <c>YDisplayLayer.ALIGN_TOP_CENTER</c>,       <c>YDisplayLayer.ALIGN_CENTER</c>,
              <c>YDisplayLayer.ALIGN_BASELINE_CENTER</c>,  <c>YDisplayLayer.ALIGN_BOTTOM_CENTER</c>,
              <c>YDisplayLayer.ALIGN_TOP_DECIMAL</c>,      <c>YDisplayLayer.ALIGN_CENTER_DECIMAL</c>,
              <c>YDisplayLayer.ALIGN_BASELINE_DECIMAL</c>, <c>YDisplayLayer.ALIGN_BOTTOM_DECIMAL</c>,
              <c>YDisplayLayer.ALIGN_TOP_RIGHT</c>,        <c>YDisplayLayer.ALIGN_CENTER_RIGHT</c>,
              <c>YDisplayLayer.ALIGN_BASELINE_RIGHT</c>,   <c>YDisplayLayer.ALIGN_BOTTOM_RIGHT</c>.
            </param>
            <param name="text">
              the text string to draw
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawImage(System.Int32,System.Int32,System.String)">
            <summary>
              Draws a GIF image at the specified position.
            <para>
              The GIF image must have been previously
              uploaded to the device built-in memory. If you experience problems using an image
              file, check the device logs for any error message such as missing image file or bad
              image file format.
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the left of the image, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the top of the image, in pixels
            </param>
            <param name="imagename">
              the GIF file name
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.drawBitmap(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
              Draws a bitmap at the specified position.
            <para>
              The bitmap is provided as a binary object,
              where each pixel maps to a bit, from left to right and from top to bottom.
              The most significant bit of each byte maps to the leftmost pixel, and the least
              significant bit maps to the rightmost pixel. Bits set to 1 are drawn using the
              layer selected pen color. Bits set to 0 are drawn using the specified background
              gray level, unless -1 is specified, in which case they are not drawn at all
              (as if transparent).
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the left of the bitmap, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the top of the bitmap, in pixels
            </param>
            <param name="w">
              the width of the bitmap, in pixels
            </param>
            <param name="bitmap">
              a binary object
            </param>
            <param name="bgcol">
              the background gray level to use for zero bits (0 = black,
              255 = white), or -1 to leave the pixels unchanged
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.moveTo(System.Int32,System.Int32)">
            <summary>
              Moves the drawing pointer of this layer to the specified position.
            <para>
            </para>
            </summary>
            <param name="x">
              the distance from left of layer, in pixels
            </param>
            <param name="y">
              the distance from top of layer, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.lineTo(System.Int32,System.Int32)">
            <summary>
              Draws a line from current drawing pointer position to the specified position.
            <para>
              The specified destination pixel is included in the line. The pointer position
              is then moved to the end point of the line.
            </para>
            </summary>
            <param name="x">
              the distance from left of layer to the end point of the line, in pixels
            </param>
            <param name="y">
              the distance from top of layer to the end point of the line, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.consoleOut(System.String)">
            <summary>
              Outputs a message in the console area, and advances the console pointer accordingly.
            <para>
              The console pointer position is automatically moved to the beginning
              of the next line when a newline character is met, or when the right margin
              is hit. When the new text to display extends below the lower margin, the
              console area is automatically scrolled up.
            </para>
            </summary>
            <param name="text">
              the message to display
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.setConsoleMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets up display margins for the <c>consoleOut</c> function.
            <para>
            </para>
            </summary>
            <param name="x1">
              the distance from left of layer to the left margin, in pixels
            </param>
            <param name="y1">
              the distance from top of layer to the top margin, in pixels
            </param>
            <param name="x2">
              the distance from left of layer to the right margin, in pixels
            </param>
            <param name="y2">
              the distance from top of layer to the bottom margin, in pixels
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.setConsoleBackground(System.Int32)">
            <summary>
              Sets up the background color used by the <c>clearConsole</c> function and by
              the console scrolling feature.
            <para>
            </para>
            </summary>
            <param name="bgcol">
              the background gray level to use when scrolling (0 = black,
              255 = white), or -1 for transparent
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.setConsoleWordWrap(System.Boolean)">
            <summary>
              Sets up the wrapping behavior used by the <c>consoleOut</c> function.
            <para>
            </para>
            </summary>
            <param name="wordwrap">
              <c>true</c> to wrap only between words,
              <c>false</c> to wrap on the last column anyway.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.clearConsole">
            <summary>
              Blanks the console area within console margins, and resets the console pointer
              to the upper left corner of the console.
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.setLayerPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the position of the layer relative to the display upper left corner.
            <para>
              When smooth scrolling is used, the display offset of the layer is
              automatically updated during the next milliseconds to animate the move of the layer.
            </para>
            </summary>
            <param name="x">
              the distance from left of display to the upper left corner of the layer
            </param>
            <param name="y">
              the distance from top of display to the upper left corner of the layer
            </param>
            <param name="scrollTime">
              number of milliseconds to use for smooth scrolling, or
              0 if the scrolling should be immediate.
            </param>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.hide">
            <summary>
              Hides the layer.
            <para>
              The state of the layer is preserved but the layer is not displayed
              on the screen until the next call to <c>unhide()</c>. Hiding the layer can positively
              affect the drawing speed, since it postpones the rendering until all operations are
              completed (double-buffering).
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.unhide">
            <summary>
              Shows the layer.
            <para>
              Shows the layer again after a hide command.
            </para>
            </summary>
            <returns>
              <c>0</c> if the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.get_display">
            <summary>
              Gets parent YDisplay.
            <para>
              Returns the parent YDisplay object of the current YDisplayLayer.
            </para>
            </summary>
            <returns>
              an <c>YDisplay</c> object
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.get_displayWidth">
            <summary>
              Returns the display width, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display width, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns displaylayer._Displaywidth_INVALID.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.get_displayHeight">
            <summary>
              Returns the display height, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the display height, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns displaylayer._Displayheight_INVALID.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.get_layerWidth">
            <summary>
              Returns the width of the layers to draw on, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the width of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns displaylayer._Layerwidth_INVALID.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YDisplayLayerProxy.get_layerHeight">
            <summary>
              Returns the height of the layers to draw on, in pixels.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the height of the layers to draw on, in pixels
            </returns>
            <para>
              On failure, throws an exception or returns displaylayer._Layerheight_INVALID.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YFileRecordProxy.get_name">
            <summary>
              Returns the name of the file.
            <para>
            </para>
            </summary>
            <returns>
              a string with the name of the file.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFileRecordProxy.get_size">
            <summary>
              Returns the size of the file in bytes.
            <para>
            </para>
            </summary>
            <returns>
              the size of the file.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YFileRecordProxy.get_crc">
            <summary>
              Returns the 32-bit CRC of the file content.
            <para>
            </para>
            </summary>
            <returns>
              the 32-bit CRC of the file content.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWlanRecordProxy.get_ssid">
            <summary>
              Returns the name of the wireless network (SSID).
            <para>
            </para>
            </summary>
            <returns>
              a string with the name of the wireless network (SSID).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWlanRecordProxy.get_channel">
            <summary>
              Returns the 802.11 b/g/n channel number used by this network.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the channel.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWlanRecordProxy.get_security">
            <summary>
              Returns the security algorithm used by the wireless network.
            <para>
              If the network implements to security, the value is <c>"OPEN"</c>.
            </para>
            </summary>
            <returns>
              a string with the security algorithm.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YWlanRecordProxy.get_linkQuality">
            <summary>
              Returns the quality of the wireless network link, in per cents.
            <para>
            </para>
            </summary>
            <returns>
              an integer between 0 and 100 corresponding to the signal quality.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellRecordProxy.get_cellOperator">
            <summary>
              Returns the name of the the cell operator, as received from the network.
            <para>
            </para>
            </summary>
            <returns>
              a string with the name of the the cell operator.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellRecordProxy.get_mobileCountryCode">
            <summary>
              Returns the Mobile Country Code (MCC).
            <para>
              The MCC is a unique identifier for each country.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Mobile Country Code (MCC).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellRecordProxy.get_mobileNetworkCode">
            <summary>
              Returns the Mobile Network Code (MNC).
            <para>
              The MNC is a unique identifier for each phone
              operator within a country.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Mobile Network Code (MNC).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellRecordProxy.get_locationAreaCode">
            <summary>
              Returns the Location Area Code (LAC).
            <para>
              The LAC is a unique identifier for each
              place within a country.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Location Area Code (LAC).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellRecordProxy.get_cellId">
            <summary>
              Returns the Cell ID.
            <para>
              The Cell ID is a unique identifier for each
              base transmission station within a LAC.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Cell Id.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellRecordProxy.get_signalStrength">
            <summary>
              Returns the signal strength, measured in dBm.
            <para>
            </para>
            </summary>
            <returns>
              an integer corresponding to the signal strength.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YCellRecordProxy.get_timingAdvance">
            <summary>
              Returns the Timing Advance (TA).
            <para>
              The TA corresponds to the time necessary
              for the signal to reach the base station from the device.
              Each increment corresponds about to 550m of distance.
            </para>
            </summary>
            <returns>
              an integer corresponding to the Timing Advance (TA).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSmsProxy.get_textData">
            <summary>
              Returns the content of the message.
            <para>
            </para>
            <para>
            </para>
            </summary>
            <returns>
              a string with the content of the message.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSmsProxy.addText(System.String)">
            <summary>
              Add a regular text to the SMS.
            <para>
              This function support messages
              of more than 160 characters. ISO-latin accented characters
              are supported. For messages with special unicode characters such as asian
              characters and emoticons, use the  <c>addUnicodeData</c> method.
            </para>
            <para>
            </para>
            </summary>
            <param name="val">
              the text to be sent in the message
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSmsProxy.addUnicodeData(System.Int32[])">
            <summary>
              Add a unicode text to the SMS.
            <para>
              This function support messages
              of more than 160 characters, using SMS concatenation.
            </para>
            <para>
            </para>
            </summary>
            <param name="val">
              an array of special unicode characters
            </param>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSmsProxy.send">
            <summary>
              Sends the SMS to the recipient.
            <para>
              Messages of more than 160 characters are supported
              using SMS concatenation.
            </para>
            <para>
            </para>
            </summary>
            <returns>
              <c>0</c> when the call succeeds.
            </returns>
            <para>
              On failure, throws an exception or returns a negative error code.
            </para>
        </member>
        <member name="M:YoctoProxyAPI.YSnoopingRecordProxy.get_time">
            <summary>
              Returns the elapsed time, in ms, since the beginning of the preceding message.
            <para>
            </para>
            </summary>
            <returns>
              the elapsed time, in ms, since the beginning of the preceding message.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSnoopingRecordProxy.get_direction">
            <summary>
              Returns the message direction (RX=0, TX=1).
            <para>
            </para>
            </summary>
            <returns>
              the message direction (RX=0, TX=1).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSnoopingRecordProxy.get_message">
            <summary>
              Returns the message content.
            <para>
            </para>
            </summary>
            <returns>
              the message content.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiSnoopingRecordProxy.get_time">
            <summary>
              Returns the elapsed time, in ms, since the beginning of the preceding message.
            <para>
            </para>
            </summary>
            <returns>
              the elapsed time, in ms, since the beginning of the preceding message.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiSnoopingRecordProxy.get_direction">
            <summary>
              Returns the message direction (RX=0, TX=1).
            <para>
            </para>
            </summary>
            <returns>
              the message direction (RX=0, TX=1).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YSpiSnoopingRecordProxy.get_message">
            <summary>
              Returns the message content.
            <para>
            </para>
            </summary>
            <returns>
              the message content.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cSnoopingRecordProxy.get_time">
            <summary>
              Returns the elapsed time, in ms, since the beginning of the preceding message.
            <para>
            </para>
            </summary>
            <returns>
              the elapsed time, in ms, since the beginning of the preceding message.
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cSnoopingRecordProxy.get_direction">
            <summary>
              Returns the message direction (RX=0, TX=1).
            <para>
            </para>
            </summary>
            <returns>
              the message direction (RX=0, TX=1).
            </returns>
        </member>
        <member name="M:YoctoProxyAPI.YI2cSnoopingRecordProxy.get_message">
            <summary>
              Returns the message content.
            <para>
            </para>
            </summary>
            <returns>
              the message content.
            </returns>
        </member>
    </members>
</doc>
